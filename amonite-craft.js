(function(e,f){function r(x){return function(p){var i=x[p];if(f[i][2])return f[i][2].exports;var o={},m={exports:o},[s,h]=f[i];f[i][2]=m;h.call(o,r(s),m,o);return m.exports}}r({"":e})("")})(0, [[{"../../index":1},function (require,module,exports) {
"use strict";var _index=_interopRequireDefault(require("../../index"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}window.Amonite=_index["default"];
}],[{"./libs/layout/event-target":2,"./libs/layout/component":3,"./libs/layout/define":4,"./libs/layout/page":5,"./libs/request/resource":6,"./libs/request/ajax":7,"./libs/layout/section":8,"./libs/router/route":9,"./libs/router/router":10},function (require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=init,exports.initAll=initAll,Object.defineProperty(exports,"EventTarget",{enumerable:!0,get:function get(){return _eventTarget["default"]}}),Object.defineProperty(exports,"Component",{enumerable:!0,get:function get(){return _component["default"]}}),Object.defineProperty(exports,"Section",{enumerable:!0,get:function get(){return _section["default"]}}),Object.defineProperty(exports,"Page",{enumerable:!0,get:function get(){return _page["default"]}}),Object.defineProperty(exports,"define",{enumerable:!0,get:function get(){return _define.define}}),Object.defineProperty(exports,"CustomHTMLElement",{enumerable:!0,get:function get(){return _define.CustomHTMLElement}}),Object.defineProperty(exports,"ajax",{enumerable:!0,get:function get(){return _ajax["default"]}}),Object.defineProperty(exports,"Resource",{enumerable:!0,get:function get(){return _resource["default"]}}),Object.defineProperty(exports,"Router",{enumerable:!0,get:function get(){return _router["default"]}}),Object.defineProperty(exports,"Route",{enumerable:!0,get:function get(){return _route["default"]}}),exports["default"]=void 0;var _eventTarget=_interopRequireDefault(require("./libs/layout/event-target")),_component=_interopRequireDefault(require("./libs/layout/component")),_section=_interopRequireDefault(require("./libs/layout/section")),_page=_interopRequireDefault(require("./libs/layout/page")),_define=require("./libs/layout/define"),_ajax=_interopRequireDefault(require("./libs/request/ajax")),_resource=_interopRequireDefault(require("./libs/request/resource")),_router=_interopRequireDefault(require("./libs/router/router")),_route=_interopRequireDefault(require("./libs/router/route"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function init(a){"function"==typeof a&&("complete"===document.readyState?a():window.addEventListener("load",a))}function initAll(a){"complete"===document.readyState?(_page["default"].setContainer(),_router["default"].listenPopstate(),"function"==typeof a&&a()):window.addEventListener("load",function(){_page["default"].setContainer(),_router["default"].listenPopstate(),"function"==typeof a&&a()})}var Amonite={Component:_component["default"],Section:_section["default"],Page:_page["default"],define:_define.define,CustomHTMLElement:_define.CustomHTMLElement,ajax:_ajax["default"],Resource:_resource["default"],Router:_router["default"],Route:_route["default"],init:init,initAll:initAll};exports["default"]=Amonite;
}],[{},function (require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}var EventTarget=function(){function a(){_classCallCheck(this,a),Object.defineProperty(this,"__events__",{enumerable:!1,configurable:!1,value:{}})}return _createClass(a,[{key:"listen",value:function listen(a,b){var c=this;if("string"==typeof a){var d=a.split(/[\n\s,]+/g);if(1<d.length)return this.listen(_toConsumableArray(d),b)}else if(Array.isArray(a))return a.forEach(function(a){c.listen(a,b)}),this;if(Array.isArray(b))return b.forEach(function(b){c.listen(a,b)}),this;if("function"==typeof b){var e=this.__events__;Array.isArray(e[a])||(e[a]=[]),e[a].push(b)}return this}},{key:"dispatch",value:function dispatch(a,b){var c=this;if("string"==typeof a){var e=a.split(/[\n\s,]+/g);if(1<e.length)return this.dispatch(_toConsumableArray(e),b)}else if(Array.isArray(a))return a.forEach(function(a){c.dispatch(a,b)}),this;var d=this.__events__;return Array.isArray(d[a])||(d[a]=[]),d[a].forEach(function(a){Array.isArray(b)?a.apply(null,b):a()}),this}},{key:"detach",value:function detach(a,b){var c=this;if("string"==typeof a){var e=a.split(/[\n\s,]+/g);if(1<e.length)return this.detach(_toConsumableArray(e),b)}else if(Array.isArray(a))return a.forEach(function(a){c.detach(a,b)}),this;if(Array.isArray(b))return b.forEach(function(b){c.detach(a,b)}),this;var d=this.__events__;return Array.isArray(d[a])||(d[a]=[]),d[a]=void 0===b?[]:d[a].splice(d[a].indexOf(b)),this}},{key:"listenOnce",value:function listenOnce(a,b){var c=this,d=function(){c.detach(a,[b,d])};return this.listen(a,[b,d]),this}}]),a}();exports["default"]=EventTarget;
}],[{"./event-target":2},function (require,module,exports) {
"use strict";var _eventTarget=_interopRequireDefault(require("./event-target"));Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(a,b){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a)){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{d||null==h["return"]||h["return"]()}finally{if(e)throw f}}return c}}function _arrayWithHoles(a){if(Array.isArray(a))return a}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _possibleConstructorReturn(a,b){return b&&("object"===_typeof(b)||"function"==typeof b)?b:_assertThisInitialized(a)}function _getPrototypeOf(a){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)},_getPrototypeOf(a)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _inherits(a,b){if("function"!=typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),b&&_setPrototypeOf(a,b)}function _setPrototypeOf(a,b){return _setPrototypeOf=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a},_setPrototypeOf(a,b)}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function container(a,b,c){return a instanceof HTMLElement?a:"string"==typeof a?container(document.querySelector(a),b,c):"function"==typeof a?container(a.apply(b,c),b,c):null}function template(a,b,c){if(a instanceof HTMLElement)return a;if("function"==typeof a)return template(a.apply(b,c),b,c);var d=document.createElement("div");return d.setAttribute("component",b.constructor.name),"string"==typeof a&&(d.innerHTML=a),d}function elements(a,b,c){var d=b.template;if("function"==typeof a)return elements(a.apply(b,c),b,c);if("object"===_typeof(a)&&d instanceof HTMLElement){var e={};return Object.keys(a).forEach(function(b){a[b]instanceof HTMLElement&&(e[b]=[a[b]]),"string"==typeof a[b]?e[b]=_toConsumableArray(d.querySelectorAll(a[b])):Array.isArray(a[b])&&(e[b]=a[b])}),e}return{}}function events(a,b,c){var d=3<arguments.length&&arguments[3]!==void 0?arguments[3]:[],e=4<arguments.length&&arguments[4]!==void 0?arguments[4]:[];if(!("function"==typeof a))"string"==typeof a&&"function"===b[a]?events_gettargets(d,b).forEach(function(c){e.forEach(function(d){c.addEventListener(d,b[a].bind(b))})}):Array.isArray(a)?a.forEach(function(a){return events(a,b,c,d,e)}):"object"===_typeof(a)&&Object.keys(a).forEach(function(f){var g=events_keysplit(f),h=g.selectors,i=g.events;d.forEach(function(a){return h.push(a)}),e.forEach(function(a){return i.push(a)}),i(a[f],b,c,h,i)});else if(e.length){events_gettargets(d,b).forEach(function(b){e.forEach(function(c){b.addEventListener(c,a)})})}else events(a.apply(b,c),b,c,d,e)}function events_keysplit(a){var b=a.split(/[\n\s]+/g),c=[],d=[];return b.forEach(function(a){"@"===a[0]?d.push(a):c.push(a)}),{selectors:c.join(" ").split(/,/g),events:d.join(",").split(/,/g)}}function events_gettargets(a,b){var c=[];return a.map(function(a){return Array.isArray(a)?events_gettargets(a,b):Array.isArray(b.elements[a])?b.elements[a]:"string"==typeof a?_toConsumableArray(b.template.querySelectorAll(a)):a instanceof HTMLElement?a:void 0}).forEach(function(a){return a.filter(function(a){return a instanceof HTMLElement}).forEach(function(a){return c.push(a)})}),c}var Component=function(a){function b(){var a,c;return _classCallCheck(this,b),c=_possibleConstructorReturn(this,_getPrototypeOf(b).call(this)),Object.defineProperty(_assertThisInitialized(c),"_builder",{enumerable:!1,configurable:!1,value:{container:c.container,template:c.template,elements:c.elements,events:c.events}}),c.container=null,c.template=null,c.elements=[],c.events={},(a=c).setTemplate.apply(a,[null].concat(Array.prototype.slice.call(arguments))),c._builder.container&&c.setContainer(c._builder.container),c}return _inherits(b,a),_createClass(b,[{key:"setTemplate",value:function setTemplate(){var a=Array.prototype.slice.call(arguments),b=a[0],c=a.slice(1),d=template(b||this._builder.template,this,c);return d instanceof HTMLElement&&(this.template=d,this.elements=elements(this._builder.elements,this,c),events(this._builder.events,this,c)),this}},{key:"setContainer",value:function setContainer(a){var b=container(a,this,arguments);return b instanceof HTMLElement&&(this.container=b,this.template instanceof HTMLElement&&this.container.appendChild(this.template)),this}},{key:"clearElement",value:function clearElement(a){var b,c,d;if(this.elements[a]&&(b=this.elements[a],c=_slicedToArray(b,1),d=c[0],b)){for(;d.firstChild;)d.removeChild(d.firstChild);return this}throw new Error("Element \"".concat(a,"\" is not an element of this component"))}},{key:"appendComponent",value:function appendComponent(a,c){var d,e,f;if(this.elements[a]&&(d=this.elements[a],e=_slicedToArray(d,1),f=e[0],d)){if(c instanceof b)return c.setContainer(f),this;throw new Error("Second parameter is not a Component object")}else throw new Error("Element \"".concat(a,"\" is not an element of this component"))}},{key:"fillComponent",value:function fillComponent(a,b){return this.clearElement(a).appendComponent(a,b)}},{key:"template",value:function(){return""}},{key:"elements",value:function(){return{}}},{key:"events",value:function(){return{}}}]),b}(_eventTarget["default"]);exports["default"]=Component;
}],[{},function (require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.define=exports["default"]=define,exports.CustomHTMLElement=void 0;function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function getCustomChildren(a){return _toConsumableArray(a.querySelectorAll(Object.keys(DEFINES).join(",").toUpperCase()))}function test(a){var b=DEFINES[a.nodeName.toUpperCase()];if(-1===DEFINED.indexOf(a)){if(b){new b(a);var c=getCustomChildren(a);c.length?c.forEach(function(b){b.addEventListener("load",function(){c.filter(function(a){return-1===DEFINED.indexOf(a)}).length||(DEFINED.push(a),a.dispatchEvent(new Event("load")))})}):(DEFINED.push(a),a.dispatchEvent(new Event("load")))}a.childNodes.length&&a.childNodes.forEach(test)}}function onload(){var a=new MutationObserver(function(a){a.forEach(function(a){a.addedNodes.forEach(test)})});a.observe(document.querySelector("html"),{attributes:!0,childList:!0,characterData:!0,subtree:!0})}window.addEventListener("load",onload),"complete"===window.document.readyState&&onload();var DEFINES={},DEFINED=[];function define(a,b){if("string"!=typeof a)throw new Error("First parameter should be a string (to select items by node name in dom tree)");if("function"!=typeof b)throw new Error("Second parameter should be a class or a function (to construct item)");DEFINES[a.toUpperCase()]=b,_toConsumableArray(document.querySelectorAll(a.toUpperCase())).forEach(test)}var CustomHTMLElement=function a(){_classCallCheck(this,a)};exports.CustomHTMLElement=CustomHTMLElement;
}],[{"./component":3,"./section":8},function (require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;var _component=_interopRequireDefault(require("./component")),_section=_interopRequireDefault(require("./section"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _possibleConstructorReturn(a,b){return b&&("object"===_typeof(b)||"function"==typeof b)?b:_assertThisInitialized(a)}function _getPrototypeOf(a){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)},_getPrototypeOf(a)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _inherits(a,b){if("function"!=typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),b&&_setPrototypeOf(a,b)}function _setPrototypeOf(a,b){return _setPrototypeOf=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a},_setPrototypeOf(a,b)}var Page=function(a){function b(){var a;return _classCallCheck(this,b),a=_possibleConstructorReturn(this,_getPrototypeOf(b).call(this,b.container)),a.template.setAttribute("page",a.template.getAttribute("component")),a.template.removeAttribute("component"),b.instances[a.constructor.name]=_assertThisInitialized(a),a}return _inherits(b,a),_createClass(b,[{key:"setSection",value:function setSection(a){return a instanceof _section["default"]&&this.fillComponent("section",a),this}},{key:"setPage",value:function setPage(a){if(b.page!==this){for(var c=b.container;c.firstChild;)c.removeChild(c.firstChild);this.setContainer(into),b.page=this}return this.setSection(a)}}],[{key:"setContainer",value:function setContainer(a){return"function"==typeof a?b.setContainer(a()):void("string"==typeof a&&(a=document.querySelector(a)),b.container=a instanceof HTMLElement?a:b.container||document.body,b.page&&b.page.setContainer(a))}},{key:"getCurrentPage",value:function getCurrentPage(){return b.page}},{key:"getPageByConstructor",value:function getPageByConstructor(a){var c=b.instances[a.name];return c instanceof b?c:new a}}]),b}(_component["default"]);exports["default"]=Page,Page.instances={},Page.container=null;
}],[{"./ajax":7},function (require,module,exports) {
"use strict";var _ajax=_interopRequireDefault(require("./ajax"));Object.defineProperty(exports,"__esModule",{value:!0}),exports.merge=merge,exports.Resource=exports["default"]=void 0;function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function merge(){for(var a={},b=[],c=[],d=arguments.length,e=Array(d),f=0;f<d;f++)e[f]=arguments[f];for(;e.length;){var g=e.shift();Array.isArray(g.success)&&b.concat(g.success),"function"==typeof g.success&&b.push(g.success),Array.isArray(g.failure)&&c.concat(g.failure),"function"==typeof g.failure&&c.push(g.failure),Object.assign(a,g)}return a.success=b,a.failure=c,a}function ajaxParameters(a,b,c,d,e,f,g){return"object"===_typeof(a)&&null!==a?ajaxParameters(a.method,a.uri||a.url||a.file||a.source,a.data||a.body||a.post,a.success||a.load,a.failure||a.error,a.headers,a.overrideMimeType):{method:a,uri:b,data:c,success:d,failure:e,headers:f,overrideMimeType:g}}var Resource=function(){function a(){_classCallCheck(this,a);for(var b=arguments.length,c=Array(b),d=0;d<b;d++)c[d]=arguments[d];this.commonBuilder=ajaxParameters.apply(null,c),this.methodsBuilder={}}return _createClass(a,[{key:"addMethod",value:function addMethod(a){for(var b=arguments,c=arguments.length,d=Array(1<c?c-1:0),e=1;e<c;e++)d[e-1]=arguments[e];var f=this;if(this[a])throw new Error("This resource already has a ".concat(a," method"));return this.methodsBuilder[a]=ajaxParameters.apply(null,d),this[a]=function(){var c=ajaxParameters.apply(null,b);return(0,_ajax["default"])(merge(f.commonBuilder,f.methodsBuilder[a],c))},this}}],[{key:"request",value:function request(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];var d=ajaxParameters.apply(null,b);return(0,_ajax["default"])(d)}}]),a}();exports.Resource=exports["default"]=Resource;
}],[{},function (require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ajax=exports["default"]=ajax,exports.ajaxParameters=ajaxParameters,exports.tryExec=tryExec;function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function ajax(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];var d=ajaxParameters.apply(null,b),e=new Promise(function(a,b){var c=new XMLHttpRequest;c.addEventListener("loadend",function(){a(c)}),c.addEventListener("error",function(){var a=new Error("Request ".concat(d.method," ").concat(d.uri," failed"));a.xhr=c,b(a)}),c.open(d.method,d.uri),"object"===_typeof(d.headers)&&null!==d.headers&&Object.keys(d.headers).forEach(function(a){var b=tryExec(d.headers[a]);"string"==typeof b&&c.setRequestHeader(a,b)}),"string"==typeof d.overrideMimeType&&c.overrideMimeType(d.overrideMimeType),c.send(d.data)});return Array.isArray(d.success)&&d.success.forEach(function(a){"function"==typeof a&&e.then(a)}),"function"==typeof d.success&&e.then(d.success),Array.isArray(d.failure)&&d.failure.forEach(function(a){"function"==typeof a&&e["catch"](a)}),"function"==typeof d.failure&&e["catch"](d.failure),e}function ajaxParameters(a,b,c,d,e,f,g){return"object"===_typeof(a)?ajaxParameters(a.method,a.uri||a.url||a.file||a.source,a.data||a.body||a.post,a.success||a.load,a.failure||a.error,a.headers,a.overrideMimeType):{method:tryExec.call(this,a,"GET",arguments),uri:tryExec.call(this,b,"",arguments),data:tryExec.call(this,c,null,arguments),success:d,failure:e,headers:tryExec.call(this,f,null,arguments),overrideMimeType:tryExec.call(this,g,null,arguments)}}function tryExec(a,b,c){return"function"==typeof a?a.apply(this,c):"string"==typeof a?a:b}
}],[{"./component":3,"./page":5},function (require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;var _component=_interopRequireDefault(require("./component")),_page=_interopRequireDefault(require("./page"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _possibleConstructorReturn(a,b){return b&&("object"===_typeof(b)||"function"==typeof b)?b:_assertThisInitialized(a)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _getPrototypeOf(a){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)},_getPrototypeOf(a)}function _inherits(a,b){if("function"!=typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),b&&_setPrototypeOf(a,b)}function _setPrototypeOf(a,b){return _setPrototypeOf=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a},_setPrototypeOf(a,b)}var Section=function(a){function b(){var a;return _classCallCheck(this,b),a=_possibleConstructorReturn(this,_getPrototypeOf(b).apply(this,arguments)),a.template.setAttribute("section",a.template.getAttribute("component")),a.template.removeAttribute("component"),a}return _inherits(b,a),_createClass(b,[{key:"setSection",value:function setSection(){var a=this.getWrapper();return a&&(a.setPage(this),this._builder.wrapper=a),this}},{key:"getWrapper",value:function getWrapper(){return this._builder.wrapper||(this._builder.wrapper=_page["default"].getPageByConstructor(this.wrapper())),this._builder.wrapper}},{key:"wrapper",value:function wrapper(){return null}}]),b}(_component["default"]);exports["default"]=Section;
}],[{"./chunk":11},function (require,module,exports) {
"use strict";var _chunk=_interopRequireDefault(require("./chunk"));Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}var currentArgs,Route=function(){function a(b,c){if(_classCallCheck(this,a),this.original=b,"string"==typeof b&&(b=b.split("/")),Array.isArray(b))this.chunks=b.map(function(a){return new _chunk["default"](a)});else throw new Error("First parameter should be a string or an Array.");if("function"!=typeof c)throw new Error("Second parameter should be a function.");this.controller=c,this.noEnd="*"===this.chunks[this.chunks.length-1].original}return _createClass(a,[{key:"go",value:function go(b,c){var d=Array.isArray(b)?b:[],e=this.createPath(d||currentArgs);return c&&e===a.getBrowserRequest()?this.run(b):a.setBrowserRequest(e),this}},{key:"run",value:function run(a){return currentArgs=a||this.getArgs(),this.controller(currentArgs)}},{key:"getArgs",value:function getArgs(){var b=a.getBrowserRequest().split("/");try{var c=0,d=this.chunks.map(function(a){var d=b[c++],e=a.extractArgs(d);return e});if("*"===this.chunks[c-1].original)d.pop(),d.push({value:b.slice(c-1).join("/")});else if(c!==b.length)return null;return d}catch(a){return null}}},{key:"isMatch",value:function isMatch(){return null!==this.getArgs()}},{key:"createPath",value:function createPath(a){return Array.isArray(a)||(a=[]),this.chunks.map(function(b,c){return b.createPath(a[c])}).join("/")}},{key:"toString",value:function toString(){return"string"==typeof this.original?this.original:this.chunks.map(function(a){return a.toString()}).join("/")}}],[{key:"getBrowserRequest",value:function getBrowserRequest(){return window.location.hash.substr(1)}},{key:"setBrowserRequest",value:function setBrowserRequest(a){window.location.hash=a}}]),a}(),_default=Route;exports["default"]=_default;
}],[{"./route":9},function (require,module,exports) {
"use strict";var _route=_interopRequireDefault(require("./route"));Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}var ROUTERS=[],defaultController=null,launched=!1;window.r=ROUTERS;var Router=function(){function a(b,c){_classCallCheck(this,a),this.baseUrl=b||"",this.firstCall=c||null,this.routes=[],ROUTERS.push(this)}return _createClass(a,[{key:"add",value:function add(b,c){if("string"==typeof b&&"function"==typeof c&&(b=new _route["default"](this.baseUrl+b,c)),b instanceof _route["default"]&&(this.routes.push(b),launched)){var d=b.getArgs();d&&(this.callFirst(),b.go(d),a.current=b)}return b}},{key:"test",value:function test(){return this.routes.find(function(a){return a.getArgs()})}},{key:"callFirst",value:function callFirst(){"function"==typeof this.firstCall&&(this.firstCall(),this.firstCall=null)}}],[{key:"setDefault",value:function setDefault(a){defaultController=a}},{key:"listenPopstate",value:function listenPopstate(){window.addEventListener("popstate",popstate),launched||popstate()}},{key:"getAll",value:function getAll(){var a=ROUTERS.map(function(a){return a.routes.map(function(a){return a.toString()})}).flat();return defaultController&&a.unshift("*"),a}}]),a}();exports["default"]=Router;function popstate(){launched=!0;var a,b;ROUTERS.forEach(function(c){a||(a=c.test(),b=c)}),a?(b.callFirst(),a.run(),Router.current=a):"function"==typeof defaultController&&defaultController()}
}],[{},function (require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}var ChunkError=function(){function a(b){var c=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,d=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;_classCallCheck(this,a);var e=new Error().stack.split(/\s*[\r\n]+\s*/);e.shift(),e.shift(),Object.assign(this,{message:b,code:c,previous:d,stack:e})}return _createClass(a,[{key:"toString",value:function toString(){return"".concat(this.constructor.name," (").concat(this.code,"): ").concat(this.message,"\n\t").concat(this.stack.join("\n\t"),"\n")}}]),a}(),FORMATS={number:function number(a){var b=parseFloat(a);if(isNaN(b))throw new ChunkError("Bad type: expect argument to be a number.");return b},integer:function integer(a){var b=parseInt(a);if(isNaN(b))throw new ChunkError("Bad type: expect argument to be an integer.");return b},float:function float(a){var b=parseFloat(a);if(isNaN(b))throw new ChunkError("Bad type: expect argument to be a float.");return b},string:function string(a){try{var b=JSON.parse(a);if("string"==typeof b)return b}catch(a){}return a},json:function json(a){try{var b=JSON.parse(a);if("object"===_typeof(b))return b}catch(a){}throw new ChunkError("Bad type: expect argument to be a json object.")},jsonarray:function jsonarray(a){try{var b=JSON.parse(a);if("object"===_typeof(b)&&Array.isArray(b))return b}catch(a){}throw new ChunkError("Bad type: expect argument to be a json array.")},jsonobject:function jsonobject(a){try{var b=JSON.parse(a);if("object"===_typeof(b)&&!Array.isArray(b))return b}catch(a){}throw new ChunkError("Bad type: expect argument to be a json object not array.")},boolean:function boolean(a){try{var c=JSON.parse(a);if("boolean"==typeof c)return c}catch(a){}throw new ChunkError("Bad type: expect argument to be a boolean.")},any:function any(a){try{return JSON.parse(a)}catch(a){}return a},uuid:function uuid(a){if(a.match(/^[\da-f]{8}-[\da-f]{4}-4[\da-f]{3}-[89ab][\da-f]{3}-[\da-f]{12}$/))return a;throw new ChunkError("Bad type: expect argument to be an uuid.")},date:function date(a){if(a.match(/^\d{4}-\d{2}-\d{2}$/))return new Date(a);throw new ChunkError("Bad type: expect argument to be a date.")},time:function time(a){var b=a.match(/^(2[0-3]|[01][0-9]):([0-5][0-9])(:([0-5][0-9])(.(\d{1,3}))?)?$/);if(b){var c=new Date;return c.setHours(b[1]),c.setMinutes(b[2]),b[3]&&c.setSeconds(b[4]),b[5]&&c.setMilliseconds(b[6]),c}throw new ChunkError("Bad type: expect argument to be a time.")},datetime:function datetime(a){var b=new Date(a);if(!isNaN(+b))return b;throw new ChunkError("Bad type: expect argument to be any Date format.")},jsondate:function jsondate(a){var b=new Date(a);if(!isNaN(+b))return b;throw new ChunkError("Bad type: expect argument to be any Date format.")},integerdate:function integerdate(a){var b=new Date(parseInt(a));if(!isNaN(+b))return b;throw new ChunkError("Bad type: expect argument to be an integer.")}};FORMATS[""]=FORMATS.any;function isObject(a){return"object"===_typeof(a)&&null!==a}function ruleToObject(a){var b={};if("object"===_typeof(a)&&(a instanceof RegExp?b.regexp=a:a.value?b.value=a.value:(a.key&&(b.key=a.key),a.type&&(b.type=a.type),a.regexp&&(b.regexp=a.regexp),a.match&&(b.match=a.match),a.transform&&(b.transform=a.transform))),"function"==typeof a&&(b.transform=a),"string"==typeof a){if("*"===a)return{};var c=a.split(":");if(1<c.length){var d=c.shift(),e=c.join(":");b.type=e,d.length&&(b.key=d)}else b.value=a}return b}function testValue(a,b){if(a.value!==void 0){if(a.value===b)return{value:b};throw new ChunkError("Chunk value does not match")}var c={};if(!(a.type!==void 0))c.value=b;else if(void 0!==FORMATS[a.type])c.value=FORMATS[a.type](b),c.type=a.type;else throw new ChunkError("Chunk value match type does not exists");if(a.regexp instanceof RegExp){var d=b.match(a.regexp);if(!d)throw new ChunkError("Chunk value does not match RegExp");else if(c.regexp=a.regexp,isObject(a.match)){var e=Object.keys(a.match).find(function(b){return a.match[b]===d[0]});if(void 0!==e)c.index=e;else throw new ChunkError("Chunk RegExp found value does not match listed values")}}else if(isObject(a.match)){var f=Object.keys(a.match).find(function(c){return a.match[c]===b});if(void 0!==f)c.index=f;else throw new ChunkError("Chunk value does not match listed values")}return"function"==typeof a.transform?(c.original=b,c.transform=a.transform,a.transform(c)):c}function _extractArgs(a,b){if(a.key!==void 0){var c=b.split(":");if(1<c.length){var d=c.shift(),e=c.join(":"),f=testValue(a,e);return f.key=a.key,f}throw new ChunkError("Chunk content does not match key/value format")}else return testValue(a,b)}function _createPath(a,b){var c=(a.key?a.key+":":"")+b;if(a.type!==void 0)try{FORMATS[a.type](b)}catch(a){throw new ChunkError("Value does not match path requirements")}if(a.regexp instanceof RegExp){var d=b.match(a.regexp);if(!d)throw new ChunkError("Value does not match path requirements");else if(Array.isArray(a.match)&&-1===a.match.indexOf(d[0]))throw new ChunkError("Value does not match path requirements")}else if(Array.isArray(a.match)&&-1===a.match.indexOf(b))throw new ChunkError("Value does not match path requirements");return c}var Chunk=function(){function a(b){_classCallCheck(this,a),this.original=b,this.rule=ruleToObject(b)}return _createClass(a,[{key:"extractArgs",value:function extractArgs(a){return _extractArgs(this.rule,""+a)}},{key:"createPath",value:function createPath(a){if(void 0!==this.rule.value)return this.rule.value;if("object"===_typeof(a)&&(a=a.value),~["string","number"].indexOf(_typeof(a)))return _createPath(this.rule,""+a);throw new Error("First parameter should be a string, a number or an object containing \"value\" field")}},{key:"setType",value:function setType(a){return this.rule.type=a,this}},{key:"setTransform",value:function setTransform(a){if("function"==typeof a)this.rule.transform=a;else throw new Error("First parameter should be a Function");return this}},{key:"setRegExp",value:function setRegExp(a){if(a instanceof RegExp)this.rule.regexp=a;else throw new TypeError("First parameter should be a RegExp instance");return this}},{key:"addMatcher",value:function addMatcher(a){return this.rule.match||(this.rule.match=[]),this.rule.match.push(a),this}},{key:"setMatchers",value:function setMatchers(a){if(Array.isArray(a))this.rule.match=a;else throw new TypeError("First parameter should be an Array");return this}},{key:"toString",value:function toString(){if("string"==typeof this.original)return this.original;var a=this.rule.match&&this.rule.math[0]||this.rule.type&&":"+this.rule.type||"*";return this.rule.key?"".concat(this.rule.key,":").concat(a):void 0===this.rule.value?a:this.rule.value}}],[{key:"addFormat",value:function addFormat(a,b){if("function"!=typeof b)throw new TypeError("Second parameter should be a Function");if(FORMATS[a])throw new TypeError("Type ".concat(a," already exists"));FORMATS[a]=b}}]),a}(),_default=Chunk;exports["default"]=_default;
}]]);

//# sourceMappingURL=data:application/json;charset=utf-8;base64,