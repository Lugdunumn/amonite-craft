(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";var _index=_interopRequireDefault(require("../index"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}window.Amonite=_index["default"];

},{"../index":2}],2:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.init=init,exports.initAll=initAll,Object.defineProperty(exports,"Component",{enumerable:!0,get:function get(){return _component["default"]}}),Object.defineProperty(exports,"Section",{enumerable:!0,get:function get(){return _section["default"]}}),Object.defineProperty(exports,"Page",{enumerable:!0,get:function get(){return _page["default"]}}),Object.defineProperty(exports,"define",{enumerable:!0,get:function get(){return _define.define}}),Object.defineProperty(exports,"CustomHTMLElement",{enumerable:!0,get:function get(){return _define.CustomHTMLElement}}),Object.defineProperty(exports,"ajax",{enumerable:!0,get:function get(){return _ajax["default"]}}),Object.defineProperty(exports,"Resource",{enumerable:!0,get:function get(){return _resource["default"]}}),Object.defineProperty(exports,"Router",{enumerable:!0,get:function get(){return _router["default"]}}),Object.defineProperty(exports,"Route",{enumerable:!0,get:function get(){return _route["default"]}}),exports["default"]=void 0;var _component=_interopRequireDefault(require("./libs/layout/component")),_section=_interopRequireDefault(require("./libs/layout/section")),_page=_interopRequireDefault(require("./libs/layout/page")),_define=require("./libs/layout/define"),_ajax=_interopRequireDefault(require("./libs/request/ajax")),_resource=_interopRequireDefault(require("./libs/request/resource")),_router=_interopRequireDefault(require("./libs/router/router")),_route=_interopRequireDefault(require("./libs/router/route"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function init(a){"function"==typeof a&&("complete"===document.readyState?a():window.addEventListener("load",a))}function initAll(a){"complete"===document.readyState?(_page["default"].setContainer(),_router["default"].listenPopstate(),"function"==typeof a&&a()):window.addEventListener("load",function(){_page["default"].setContainer(),_router["default"].listenPopstate(),"function"==typeof a&&a()})}var Amonite={Component:_component["default"],Section:_section["default"],Page:_page["default"],define:_define.define,CustomHTMLElement:_define.CustomHTMLElement,ajax:_ajax["default"],Resource:_resource["default"],Router:_router["default"],Route:_route["default"],init:init,initAll:initAll};exports["default"]=Amonite;

},{"./libs/layout/component":3,"./libs/layout/define":4,"./libs/layout/page":5,"./libs/layout/section":6,"./libs/request/ajax":7,"./libs/request/resource":8,"./libs/router/route":9,"./libs/router/router":10}],3:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(a,b){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a)){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{d||null==h["return"]||h["return"]()}finally{if(e)throw f}}return c}}function _arrayWithHoles(a){if(Array.isArray(a))return a}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function container(a,b,c){return a instanceof HTMLElement?a:"string"==typeof a?container(document.querySelector(a),b,c):"function"==typeof a?container(a.apply(b,c),b,c):null}function template(a,b,c){if(a instanceof HTMLElement)return a;if("function"==typeof a)return template(a.apply(b,c),b,c);var d=document.createElement("div");return d.setAttribute("component",b.constructor.name),"string"==typeof a&&(d.innerHTML=a),d}function elements(a,b,c){var d=b.template;if("function"==typeof a)return elements(a.apply(b,c),b,c);if("object"===_typeof(a)&&d instanceof HTMLElement){var e={};return Object.keys(a).forEach(function(b){a[b]instanceof HTMLElement&&(e[b]=[a[b]]),"string"==typeof a[b]?e[b]=_toConsumableArray(d.querySelectorAll(a[b])):a[b]&&a[b].forEach&&(e[b]=a[b])}),e}return{}}function events(a,b,c){var d=this,e=arguments;return"function"==typeof a?events(a.apply(b,c),b,c):void("object"===_typeof(a)&&Object.keys(a).forEach(function(c){var f=c.split(" ");if("string"==typeof a[c]&&1<f.length){var g=f.pop(),h=f.join(" ");a[c].split(",").forEach(function(a){g.split(",").forEach(function(c){h.split(",").forEach(function(d){var f,g=function(){b[a].apply(b,e)};c&&"function"==typeof b[a]&&((f=b.elements[d])instanceof HTMLElement?f.addEventListener(c,g):f&&f.forEach?f.forEach(function(a){a.addEventListener(c,g)}):b.template&&(f=b.template.querySelector(d))&&f.addEventListener(c,g))})})})}else if("object"===_typeof(a[c])){var i=f.join(" ");Object.keys(a[c]).forEach(function(f){var g=a[c][f];"string"==typeof g&&f.split(",").forEach(function(a){i.split(",").forEach(function(c){var f,h=function(){var a=_toConsumableArray(e);a.unshift(d),b[g].apply(b,a)};a&&"function"==typeof b[g]&&((f=b.elements[c])instanceof HTMLElement?f.addEventListener(a,h):f&&f.forEach?f.forEach(function(b){b.addEventListener(a,h)}):b.template&&(f=b.template.querySelector(c))&&f.addEventListener(a,h))})})})}}))}var Component=function(){function a(){_classCallCheck(this,a),Object.defineProperty(this,"_builder",{enumerable:!1,configurable:!1,value:{template:this.template,elements:this.elements,events:this.events}}),Object.defineProperty(this,"__events__",{enumerable:!1,configurable:!1,value:{}}),this.setTemplate.apply(this,[null].concat(Array.prototype.slice.call(arguments)))}return _createClass(a,[{key:"setTemplate",value:function setTemplate(){var a=Array.prototype.slice.call(arguments),b=a[0],c=a.slice(1),d=template(b||this._builder.template,this,c);return d instanceof HTMLElement&&(this.template=d,this.elements=elements(this._builder.elements,this,c),events(this._builder.events,this,c)),this}},{key:"setContainer",value:function setContainer(a){var b=container(a,this,arguments);return b instanceof HTMLElement&&(this.container=b,this.template instanceof HTMLElement&&this.container.appendChild(this.template)),this}},{key:"clearElement",value:function clearElement(a){var b,c,d;if(this.elements[a]&&(b=this.elements[a],c=_slicedToArray(b,1),d=c[0],b)){for(;d.firstChild;)d.removeChild(d.firstChild);return this}throw new Error("Element \"".concat(a,"\" is not an element of this component"))}},{key:"appendComponent",value:function appendComponent(b,c){var d,e,f;if(this.elements[b]&&(d=this.elements[b],e=_slicedToArray(d,1),f=e[0],d)){if(c instanceof a)return c.setContainer(f),this;throw new Error("Second parameter is not a Component object")}else throw new Error("Element \"".concat(b,"\" is not an element of this component"))}},{key:"fillComponent",value:function fillComponent(a,b){return this.clearElement(a).appendComponent(a,b)}},{key:"template",value:function(){return""}},{key:"elements",value:function(){return{}}},{key:"events",value:function(){return{}}},{key:"listen",value:function listen(a,b){var c=this;if("string"==typeof a){var d=a.split(/[\n\s,]+/g);if(1<d.length)return this.listen(_toConsumableArray(d),b)}else if(Array.isArray(a))return a.forEach(function(a){c.listen(a,b)}),this;if(Array.isArray(b))return b.forEach(function(b){c.listen(a,b)}),this;if("function"==typeof b){var e=this.__events__;Array.isArray(e[a])||(e[a]=[]),e[a].push(b)}return this}},{key:"dispatch",value:function dispatch(a,b){var c=this;if("string"==typeof a){var e=a.split(/[\n\s,]+/g);if(1<e.length)return this.listen(_toConsumableArray(e),b)}else if(Array.isArray(a))return a.forEach(function(a){c.listen(a,b)}),this;var d=this.__events__;return Array.isArray(d[a])||(d[a]=[]),d[a].forEach(function(a){Array.isArray(b)?a.apply(null,b):a()}),this}},{key:"detach",value:function detach(a,b){var c=this;if("string"==typeof a){var e=a.split(/[\n\s,]+/g);if(1<e.length)return this.listen(_toConsumableArray(e),b)}else if(Array.isArray(a))return a.forEach(function(a){c.listen(a,b)}),this;if(Array.isArray(b))return b.forEach(function(b){c.listen(a,b)}),this;var d=this.__events__;return Array.isArray(d[a])||(d[a]=[]),d[a]=void 0===b?[]:d[a].slice(d[a].indexOf(b)),this}},{key:"listenOnce",value:function listenOnce(a,b){var c=this,d=function(){c.detach(a,b),c.detach(a,d)};return this.listen(a,b),this.listen(a,d),this}}]),a}();exports["default"]=Component;

},{}],4:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.define=exports["default"]=define,exports.CustomHTMLElement=void 0;function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function getCustomChildren(a){return _toConsumableArray(a.querySelectorAll(Object.keys(DEFINES).join(",").toUpperCase()))}function test(a){var b=DEFINES[a.nodeName.toUpperCase()];if(-1===DEFINED.indexOf(a)){if(b){new b(a);var c=getCustomChildren(a);c.length?c.forEach(function(b){b.addEventListener("load",function(){c.filter(function(a){return-1===DEFINED.indexOf(a)}).length||(DEFINED.push(a),a.dispatchEvent(new Event("load")))})}):(DEFINED.push(a),a.dispatchEvent(new Event("load")))}a.childNodes.length&&a.childNodes.forEach(test)}}function onload(){var a=new MutationObserver(function(a){a.forEach(function(a){a.addedNodes.forEach(test)})});a.observe(document.querySelector("html"),{attributes:!0,childList:!0,characterData:!0,subtree:!0})}window.addEventListener("load",onload),"complete"===window.document.readyState&&onload();var DEFINES={},DEFINED=[];function define(a,b){if("string"!=typeof a)throw new Error("First parameter should be a string (to select items by node name in dom tree)");if("function"!=typeof b)throw new Error("Second parameter should be a class or a function (to construct item)");DEFINES[a.toUpperCase()]=b,_toConsumableArray(document.querySelectorAll(a.toUpperCase())).forEach(test)}var CustomHTMLElement=function a(){_classCallCheck(this,a)};exports.CustomHTMLElement=CustomHTMLElement;

},{}],5:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;var _component=_interopRequireDefault(require("./component")),_section=_interopRequireDefault(require("./section"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _possibleConstructorReturn(a,b){return b&&("object"===_typeof(b)||"function"==typeof b)?b:_assertThisInitialized(a)}function _getPrototypeOf(a){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)},_getPrototypeOf(a)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _inherits(a,b){if("function"!=typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),b&&_setPrototypeOf(a,b)}function _setPrototypeOf(a,b){return _setPrototypeOf=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a},_setPrototypeOf(a,b)}var Page=function(a){function b(){var a;return _classCallCheck(this,b),a=_possibleConstructorReturn(this,_getPrototypeOf(b).call(this,b.container)),a.template.setAttribute("page",a.template.getAttribute("component")),a.template.removeAttribute("component"),b.instances[a.constructor.name]=_assertThisInitialized(a),a}return _inherits(b,a),_createClass(b,[{key:"setSection",value:function setSection(a){return a instanceof _section["default"]&&this.fillComponent("section",a),this}},{key:"setPage",value:function setPage(a){if(b.page!==this){for(var c=b.container;c.firstChild;)c.removeChild(c.firstChild);this.setContainer(into),b.page=this}return this.setSection(a)}}],[{key:"setContainer",value:function setContainer(a){return"function"==typeof a?b.setContainer(a()):void("string"==typeof a&&(a=document.querySelector(a)),b.container=a instanceof HTMLElement?a:b.container||document.body,b.page&&b.page.setContainer(a))}},{key:"getCurrentPage",value:function getCurrentPage(){return b.page}},{key:"getPageByConstructor",value:function getPageByConstructor(a){var c=b.instances[a.name];return c instanceof b?c:new a}}]),b}(_component["default"]);exports["default"]=Page,Page.instances={},Page.container=null;

},{"./component":3,"./section":6}],6:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;var _component=_interopRequireDefault(require("./component")),_page=_interopRequireDefault(require("./page"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _possibleConstructorReturn(a,b){return b&&("object"===_typeof(b)||"function"==typeof b)?b:_assertThisInitialized(a)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _getPrototypeOf(a){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)},_getPrototypeOf(a)}function _inherits(a,b){if("function"!=typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),b&&_setPrototypeOf(a,b)}function _setPrototypeOf(a,b){return _setPrototypeOf=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a},_setPrototypeOf(a,b)}var Section=function(a){function b(){var a;return _classCallCheck(this,b),a=_possibleConstructorReturn(this,_getPrototypeOf(b).apply(this,arguments)),a.template.setAttribute("section",a.template.getAttribute("component")),a.template.removeAttribute("component"),a}return _inherits(b,a),_createClass(b,[{key:"setSection",value:function setSection(){var a=this.getWrapper();return a&&(a.setPage(this),this._builder.wrapper=a),this}},{key:"getWrapper",value:function getWrapper(){return this._builder.wrapper||(this._builder.wrapper=_page["default"].getPageByConstructor(this.wrapper())),this._builder.wrapper}},{key:"wrapper",value:function wrapper(){return null}}]),b}(_component["default"]);exports["default"]=Section;

},{"./component":3,"./page":5}],7:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ajax=exports["default"]=ajax,exports.ajaxParameters=ajaxParameters,exports.tryExec=tryExec;function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function ajax(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];var d=ajaxParameters.apply(null,b),e=new Promise(function(a,b){var c=new XMLHttpRequest;c.addEventListener("loadend",function(){a(c)}),c.addEventListener("error",function(){b(c)}),c.open(d.method,d.uri),"object"===_typeof(d.headers)&&null!==d.headers&&Object.keys(d.headers).forEach(function(a){var b=tryExec(d.headers[a]);"string"==typeof b&&c.setRequestHeader(a,b)}),"string"==typeof d.overrideMimeType&&c.overrideMimeType(d.overrideMimeType),c.send(d.data)});return Array.isArray(d.success)&&d.success.forEach(function(a){"function"==typeof a&&e.then(a)}),"function"==typeof d.success&&e.then(d.success),Array.isArray(d.failure)&&d.failure.forEach(function(a){"function"==typeof a&&e["catch"](a)}),"function"==typeof d.failure&&e["catch"](d.failure),e}function ajaxParameters(a,b,c,d,e,f,g){return"object"===_typeof(a)?ajaxParameters(a.method,a.uri||a.url||a.file||a.source,a.data||a.body||a.post,a.success||a.load,a.failure||a.error,a.headers,a.overrideMimeType):{method:tryExec.call(this,a,"GET",arguments),uri:tryExec.call(this,b,"",arguments),data:tryExec.call(this,c,null,arguments),success:d,failure:e,headers:tryExec.call(this,f,null,arguments),overrideMimeType:tryExec.call(this,g,null,arguments)}}function tryExec(a,b,c){return"function"==typeof a?a.apply(this,c):"string"==typeof a?a:b}

},{}],8:[function(require,module,exports){
"use strict";var _ajax=_interopRequireDefault(require("./ajax"));Object.defineProperty(exports,"__esModule",{value:!0}),exports.merge=merge,exports.Resource=exports["default"]=void 0;function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function merge(){for(var a={},b=[],c=[],d=arguments.length,e=Array(d),f=0;f<d;f++)e[f]=arguments[f];for(;e.length;){var g=e.shift();Array.isArray(g.success)&&b.concat(g.success),"function"==typeof g.success&&b.push(g.success),Array.isArray(g.failure)&&c.concat(g.failure),"function"==typeof g.failure&&c.push(g.failure),Object.assign(a,g)}return a.success=b,a.failure=c,a}function ajaxParameters(a,b,c,d,e,f,g){return"object"===_typeof(a)&&null!==a?ajaxParameters(a.method,a.uri||a.url||a.file||a.source,a.data||a.body||a.post,a.success||a.load,a.failure||a.error,a.headers,a.overrideMimeType):{method:a,uri:b,data:c,success:d,failure:e,headers:f,overrideMimeType:g}}var Resource=function(){function a(){_classCallCheck(this,a);for(var b=arguments.length,c=Array(b),d=0;d<b;d++)c[d]=arguments[d];this.commonBuilder=ajaxParameters.apply(null,c),this.methodsBuilder={}}return _createClass(a,[{key:"addMethod",value:function addMethod(a){for(var b=arguments,c=arguments.length,d=Array(1<c?c-1:0),e=1;e<c;e++)d[e-1]=arguments[e];var f=this;if(this[a])throw new Error("This resource already has a ".concat(a," method"));return this.methodsBuilder[a]=ajaxParameters.apply(null,d),this[a]=function(){var c=ajaxParameters.apply(null,b);return(0,_ajax["default"])(merge(f.commonBuilder,f.methodsBuilder[a],c))},this}}],[{key:"request",value:function request(){for(var a=arguments.length,b=Array(a),c=0;c<a;c++)b[c]=arguments[c];var d=ajaxParameters.apply(null,b);return(0,_ajax["default"])(d)}}]),a}();exports.Resource=exports["default"]=Resource;

},{"./ajax":7}],9:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.FORMATS=exports.Route=exports["default"]=void 0;function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(a,b){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a)){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{d||null==h["return"]||h["return"]()}finally{if(e)throw f}}return c}}function _arrayWithHoles(a){if(Array.isArray(a))return a}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}var FORMATS={number:function number(a){var b=parseFloat(a);if(isNaN(b))throw new Error("Bad type: expect argument to be a number.");return b},integer:function integer(a){var b=parseInt(a);if(isNaN(b))throw new Error("Bad type: expect argument to be an integer.");return b},float:function float(a){var b=parseFloat(a);if(isNaN(b))throw new Error("Bad type: expect argument to be a float.");return b},text:function text(a){try{var b=JSON.parse(a);if("string"==typeof b)return b}catch(a){}return a},object:function object(a){try{var b=JSON.parse(a);if("object"===_typeof(b))return b}catch(a){}throw new Error("Bad type: expect argument to be an object.")},boolean:function boolean(a){try{var c=JSON.parse(a);if("boolean"==typeof c)return c}catch(a){}throw new Error("Bad type: expect argument to be a boolean.")},any:function any(a){try{return JSON.parse(a)}catch(a){}return a},uuid:function uuid(a){if(a.match(/[\da-f]{8}-[\da-f]{4}-4[\da-f]{3}-[89ab][\da-f]{3}-[\da-f]{12}/))return a;throw new Error("Bad type: expect argument to be an uuid.")}};exports.FORMATS=FORMATS;var currentArgs,Route=function(){function a(b,c){if(_classCallCheck(this,a),"string"!=typeof b)throw new Error("First parameter should be a string.");if("function"!=typeof c)throw new Error("Second parameter should be a function.");this.path=b,this.controller=c}return _createClass(a,[{key:"go",value:function go(b,c){var d="object"===_typeof(b)?b:{},e=this.createPath(Object.assign({},currentArgs,d));return c&&e===a.getBrowserRequest()?this.run(b):a.setBrowserRequest(e),this}},{key:"run",value:function run(a){return currentArgs=a||this.getArgs(),this.controller(currentArgs)}},{key:"getArgs",value:function getArgs(){var b=a.getRequestObject(),c=this.getRequestObject();if("*"===c[c.length-1]){if(b.length<c.length-1)return null;}else if(b.length!==c.length)return null;return c.reduce(function(a,c,d){var e=b[d];if(null===a)return null;if("*"===c)return a;if("string"==typeof c)return c===e?a:null;if("object"===_typeof(c)){var f=c.key,g=c.value,h=c.regexp,i=c.type,j="object"===_typeof(e)?e:{value:e},k=j.key,l=j.value;if(k){if(k===f)if(i)try{return a[f]=FORMATS[i](l),a}catch(a){return null}else{if(h)return h.test(l)?(a[f]=l,a):null;if(l)return a[f]=l,a}}else if(g)if(i)try{return a[g]=FORMATS[i](l),a}catch(a){return null}else{if(h)return h.test(l)?(a[g]=l,a):null;if(l)return a[g]=l,a}}return null},{})}},{key:"isMatch",value:function isMatch(){return null!==this.getArgs()}},{key:"createPath",value:function createPath(a){return"object"!==_typeof(a)&&(a={}),this.getRequestObject().map(function(b){if("string"==typeof b)return"*"===b?"":b;var c=b.key,d=b.value;if(""===c){if(void 0===a[d])throw new Error("Can't build this path, not enough arguments (expect \"".concat(d,"\" field)"));return a[d]}if(""===d)return c+":"+(void 0===a[c]?"":a[c]);try{return c+":"+JSON.stringify(FORMATS[d](a[c]))}catch(a){throw new Error("Can't build this path, bad formatting arguments (expect \"".concat(c,"\" field)"))}}).join("/")}},{key:"getRequestObject",value:function getRequestObject(){return this.path.split("/").map(function(a){var b=a.split(":");if(1<b.length){var e=b.shift(),f=b.join(":"),g=f.match(/([^(]+)\((.+)\)/);if(g){var c=g,d=_slicedToArray(c,3);return f=d[1],g=d[2],FORMATS[g]?{key:e,value:f,type:g}:{key:e,value:f,regexp:new RegExp(g)}}return""===e?{value:f}:FORMATS[f]?{key:e,type:f}:{key:e,regexp:new RegExp(f)}}return a})}}],[{key:"getBrowserRequest",value:function getBrowserRequest(){return window.location.hash.substr(1)}},{key:"setBrowserRequest",value:function setBrowserRequest(a){window.location.hash=a}},{key:"getRequestObject",value:function getRequestObject(b){return"string"!=typeof b&&(b=a.getBrowserRequest()),b?b.split("/").map(function(a){var b=a.split(":");if(1<b.length){var c=b.shift(),d=b.join(":");return{key:c,value:d}}return a}):[]}}]),a}();exports.Route=exports["default"]=Route;

},{}],10:[function(require,module,exports){
"use strict";var _route=_interopRequireDefault(require("./route"));Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}var ROUTERS=[],defaultController=null,launched=!1;window.r=ROUTERS;var Router=function(){function a(b,c){_classCallCheck(this,a),this.baseUrl=b||"",this.firstCall=c||null,this.routes=[],ROUTERS.push(this)}return _createClass(a,[{key:"add",value:function add(b,c){if("string"==typeof b&&"function"==typeof c&&(b=new _route["default"](this.baseUrl+b,c)),b instanceof _route["default"]&&(this.routes.push(b),launched)){var d=b.getArgs();d&&(this.callFirst(),b.go(d),a.current=b)}return b}},{key:"test",value:function test(){return this.routes.find(function(a){var b=a.getArgs();if(null!==b)return a})}},{key:"callFirst",value:function callFirst(){"function"==typeof this.firstCall&&(this.firstCall(),this.firstCall=null)}}],[{key:"setDefault",value:function setDefault(a){defaultController=a}},{key:"listenPopstate",value:function listenPopstate(){window.addEventListener("popstate",popstate),launched||popstate()}},{key:"getAll",value:function getAll(){var a=ROUTERS.map(function(a){return a.routes.map(function(a){return a.path})}).flat();return defaultController&&a.unshift("*"),a}}]),a}();exports["default"]=Router;function popstate(){launched=!0;var a,b;ROUTERS.forEach(function(c){a||(a=c.test(),b=c)}),a?(b.callFirst(),a.run(),Router.current=a):"function"==typeof defaultController&&defaultController()}

},{"./route":9}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb25maWcvd2luZG93ZWQuanMiLCJpbmRleC5qcyIsImxpYnMvbGF5b3V0L2NvbXBvbmVudC5qcyIsImxpYnMvbGF5b3V0L2RlZmluZS5qcyIsImxpYnMvbGF5b3V0L3BhZ2UuanMiLCJsaWJzL2xheW91dC9zZWN0aW9uLmpzIiwibGlicy9yZXF1ZXN0L2FqYXguanMiLCJsaWJzL3JlcXVlc3QvcmVzb3VyY2UuanMiLCJsaWJzL3JvdXRlci9yb3V0ZS5qcyIsImxpYnMvcm91dGVyL3JvdXRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTthQ0FBLHVELHdFQUNBLE1BQU0sQ0FBQyxPQUFQLENBQWlCLGlCOzs7c21EQ1VqQixRQUFTLENBQUEsSUFBVCxDQUFlLENBQWYsQ0FBcUIsQ0FDQyxVQUFoQixRQUFPLENBQUEsQ0FEUSxHQUVXLFVBQXhCLEdBQUEsUUFBUSxDQUFDLFVBRkksQ0FHZixDQUFJLEVBSFcsQ0FLZixNQUFNLENBQUMsZ0JBQVAsQ0FBd0IsTUFBeEIsQ0FBZ0MsQ0FBaEMsQ0FMZSxDQVFwQixDQUVELFFBQVMsQ0FBQSxPQUFULENBQWtCLENBQWxCLENBQXdCLENBQ00sVUFBeEIsR0FBQSxRQUFRLENBQUMsVUFEUyxFQUVwQixpQkFBSyxZQUFMLEVBRm9CLENBR3BCLG1CQUFPLGNBQVAsRUFIb0IsQ0FJQSxVQUFoQixRQUFPLENBQUEsQ0FKUyxFQUtsQixDQUFJLEVBTGMsRUFRcEIsTUFBTSxDQUFDLGdCQUFQLENBQXdCLE1BQXhCLENBQWdDLFVBQU0sQ0FDcEMsaUJBQUssWUFBTCxFQURvQyxDQUVwQyxtQkFBTyxjQUFQLEVBRm9DLENBR2hCLFVBQWhCLFFBQU8sQ0FBQSxDQUh5QixFQUlsQyxDQUFJLEVBRVAsQ0FORCxDQVFILENBRUQsR0FBTSxDQUFBLE9BQU8sQ0FBRyxDQUNkLFNBQVMsQ0FBVCxxQkFEYyxDQUVkLE9BQU8sQ0FBUCxtQkFGYyxDQUdk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QixDLHVEQVF3QixDQUN2QixNQUFNLENBQUMsZ0JBQVAsQ0FBd0IsVUFBeEIsQ0FBb0MsUUFBcEMsQ0FEdUIsQ0FFbEIsUUFGa0IsRUFHckIsUUFBUSxFQUVYLEMsdUNBUWdCLENBQ2YsR0FBTSxDQUFBLENBQUksQ0FBRyxPQUFPLENBQUMsR0FBUixDQUFZLFNBQUMsQ0FBRCxDQUFZLENBQ25DLE1BQU8sQ0FBQSxDQUFNLENBQUMsTUFBUCxDQUFjLEdBQWQsQ0FBa0IsU0FBQyxDQUFELENBQVcsQ0FDbEMsTUFBTyxDQUFBLENBQUssQ0FBQyxJQUNkLENBRk0sQ0FHUixDQUpZLEVBSVYsSUFKVSxFQUFiLENBUUEsTUFISSxDQUFBLGlCQUdKLEVBRkUsQ0FBSSxDQUFDLE9BQUwsQ0FBYSxHQUFiLENBRUYsQ0FBTyxDQUNSLEMsbUNBVUgsUUFBUyxDQUFBLFFBQVQsRUFBcUIsQ0FDbkIsUUFBUSxHQURXLENBRW5CLEdBQUksQ0FBQSxDQUFKLENBQVcsQ0FBWCxDQUNBLE9BQU8sQ0FBQyxPQUFSLENBQWdCLFNBQUMsQ0FBRCxDQUFZLENBQ3JCLENBRHFCLEdBRXhCLENBQUssQ0FBRyxDQUFNLENBQUMsSUFBUCxFQUZnQixDQUd4QixDQUFLLENBQUcsQ0FIZ0IsQ0FLM0IsQ0FMRCxDQUhtQixDQVNmLENBVGUsRUFVakIsQ0FBSyxDQUFDLFNBQU4sRUFWaUIsQ0FXakIsQ0FBSyxDQUFDLEdBQU4sRUFYaUIsQ0FZakIsTUFBTSxDQUFDLE9BQVAsQ0FBaUIsQ0FaQSxFQWNtQixVQUE3QixRQUFPLENBQUEsaUJBZEcsRUFlakIsaUJBQWlCLEVBRXBCIiwiZmlsZSI6ImVzbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJpbXBvcnQgQW1vbml0ZSBmcm9tIFwiLi4vaW5kZXhcIjtcbndpbmRvdy5BbW9uaXRlID0gQW1vbml0ZTtcbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSBcIi4vbGlicy9sYXlvdXQvY29tcG9uZW50XCI7XG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi9saWJzL2xheW91dC9zZWN0aW9uXCI7XG5pbXBvcnQgUGFnZSBmcm9tIFwiLi9saWJzL2xheW91dC9wYWdlXCI7XG5pbXBvcnQgeyBkZWZpbmUsIEN1c3RvbUhUTUxFbGVtZW50IH0gZnJvbSBcIi4vbGlicy9sYXlvdXQvZGVmaW5lXCI7XG5cbmltcG9ydCBhamF4IGZyb20gXCIuL2xpYnMvcmVxdWVzdC9hamF4XCI7XG5pbXBvcnQgUmVzb3VyY2UgZnJvbSBcIi4vbGlicy9yZXF1ZXN0L3Jlc291cmNlXCI7XG5cbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vbGlicy9yb3V0ZXIvcm91dGVyXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vbGlicy9yb3V0ZXIvcm91dGVcIjtcblxuZnVuY3Rpb24gaW5pdCAodGhlbikge1xuICBpZiAodHlwZW9mIHRoZW4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgIHRoZW4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIHRoZW4pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0QWxsICh0aGVuKSB7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICBQYWdlLnNldENvbnRhaW5lcigpO1xuICAgIFJvdXRlci5saXN0ZW5Qb3BzdGF0ZSgpO1xuICAgIGlmICh0eXBlb2YgdGhlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGVuKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG4gICAgICBQYWdlLnNldENvbnRhaW5lcigpO1xuICAgICAgUm91dGVyLmxpc3RlblBvcHN0YXRlKCk7XG4gICAgICBpZiAodHlwZW9mIHRoZW4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aGVuKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuY29uc3QgQW1vbml0ZSA9IHtcbiAgQ29tcG9uZW50LFxuICBTZWN0aW9uLFxuICBQYWdlLFxuICBkZWZpbmUsXG4gIEN1c3RvbUhUTUxFbGVtZW50LFxuXG4gIGFqYXgsXG4gIFJlc291cmNlLFxuXG4gIFJvdXRlcixcbiAgUm91dGUsXG5cbiAgaW5pdCxcbiAgaW5pdEFsbFxufTtcblxuZXhwb3J0IHtcbiAgQ29tcG9uZW50LFxuICBTZWN0aW9uLFxuICBQYWdlLFxuICBkZWZpbmUsXG4gIEN1c3RvbUhUTUxFbGVtZW50LFxuXG4gIGFqYXgsXG4gIFJlc291cmNlLFxuXG4gIFJvdXRlcixcbiAgUm91dGUsXG5cbiAgaW5pdCxcbiAgaW5pdEFsbCxcblxuICBBbW9uaXRlIGFzIGRlZmF1bHRcbn07XG4iLCJmdW5jdGlvbiBjb250YWluZXIgKGVsLCBzZWxmLCBhcmdzKSB7XG4gIGlmIChlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIGVsID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKSwgc2VsZiwgYXJncylcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgZWwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBjb250YWluZXIoZWwuYXBwbHkoc2VsZiwgYXJncyksIHNlbGYsIGFyZ3MpXG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG5mdW5jdGlvbiB0ZW1wbGF0ZSAoZWwsIHNlbGYsIGFyZ3MpIHtcbiAgaWYgKGVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgZWwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiB0ZW1wbGF0ZShlbC5hcHBseShzZWxmLCBhcmdzKSwgc2VsZiwgYXJncylcbiAgfVxuICBlbHNlIHtcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG4gICAgZGl2LnNldEF0dHJpYnV0ZShcImNvbXBvbmVudFwiLCBzZWxmLmNvbnN0cnVjdG9yLm5hbWUpXG4gICAgaWYgKHR5cGVvZiBlbCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgZGl2LmlubmVySFRNTCA9IGVsXG4gICAgfVxuICAgIHJldHVybiBkaXZcbiAgfVxufVxuXG5mdW5jdGlvbiBlbGVtZW50cyAoZWwsIHNlbGYsIGFyZ3MpIHtcbiAgY29uc3QgaW50byA9IHNlbGYudGVtcGxhdGVcbiAgaWYgKHR5cGVvZiBlbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRzKGVsLmFwcGx5KHNlbGYsIGFyZ3MpLCBzZWxmLCBhcmdzKVxuICB9XG4gIGVsc2UgaWYgKCh0eXBlb2YgZWwgPT09IFwib2JqZWN0XCIpICYmICgoaW50bykgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fVxuICAgIE9iamVjdC5rZXlzKGVsKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICBpZiAoZWxbbmFtZV0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICByZXN1bHRbbmFtZV0gPSBbZWxbbmFtZV1dXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGVsW25hbWVdID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJlc3VsdFtuYW1lXSA9IFsuLi5pbnRvLnF1ZXJ5U2VsZWN0b3JBbGwoZWxbbmFtZV0pXVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZWxbbmFtZV0gJiYgZWxbbmFtZV0uZm9yRWFjaCkge1xuICAgICAgICByZXN1bHRbbmFtZV0gPSBlbFtuYW1lXVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiB7fVxuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50cyAoZWwsIHNlbGYsIGFyZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGV2ZW50cyhlbC5hcHBseShzZWxmLCBhcmdzKSwgc2VsZiwgYXJncylcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgZWwgPT09IFwib2JqZWN0XCIpIHtcbiAgICBPYmplY3Qua2V5cyhlbCkuZm9yRWFjaCgocGFpcikgPT4ge1xuICAgICAgY29uc3Qgc3BsaXQgPSBwYWlyLnNwbGl0KFwiIFwiKVxuICAgICAgaWYgKCh0eXBlb2YgZWxbcGFpcl0gPT09IFwic3RyaW5nXCIpICYmIChzcGxpdC5sZW5ndGggPiAxKSkge1xuICAgICAgICBjb25zdCBldnMgPSBzcGxpdC5wb3AoKVxuICAgICAgICBjb25zdCBzZWxlY3RvcnMgPSBzcGxpdC5qb2luKFwiIFwiKVxuICAgICAgICBlbFtwYWlyXS5zcGxpdChcIixcIikuZm9yRWFjaCgobWV0aG9kKSA9PiB7XG4gICAgICAgICAgZXZzLnNwbGl0KFwiLFwiKS5mb3JFYWNoKChldmVudE5hbWUpID0+IHtcbiAgICAgICAgICAgIHNlbGVjdG9ycy5zcGxpdChcIixcIikuZm9yRWFjaCgoc2VsZWN0b3IpID0+IHtcbiAgICAgICAgICAgICAgbGV0IG5vZGVcbiAgICAgICAgICAgICAgY29uc3QgZm4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZlttZXRob2RdLmFwcGx5KHNlbGYsIGFyZ3VtZW50cylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lICYmICh0eXBlb2Ygc2VsZlttZXRob2RdID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKChub2RlID0gc2VsZi5lbGVtZW50c1tzZWxlY3Rvcl0pIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZuKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChub2RlICYmIG5vZGUuZm9yRWFjaCkge1xuICAgICAgICAgICAgICAgICAgbm9kZS5mb3JFYWNoKChuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG4uYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGZuKVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VsZi50ZW1wbGF0ZSAmJiAobm9kZSA9IHNlbGYudGVtcGxhdGUucXVlcnlTZWxlY3RvcihzZWxlY3RvcikpKSB7XG4gICAgICAgICAgICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmbilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBlbFtwYWlyXSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBjb25zdCBzZWxlY3RvcnMgPSBzcGxpdC5qb2luKFwiIFwiKVxuICAgICAgICBPYmplY3Qua2V5cyhlbFtwYWlyXSkuZm9yRWFjaCgoZXZzKSA9PiB7XG4gICAgICAgICAgY29uc3QgbWV0aG9kID0gZWxbcGFpcl1bZXZzXVxuICAgICAgICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBldnMuc3BsaXQoXCIsXCIpLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xuICAgICAgICAgICAgICBzZWxlY3RvcnMuc3BsaXQoXCIsXCIpLmZvckVhY2goKHNlbGVjdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG5vZGVcbiAgICAgICAgICAgICAgICBjb25zdCBmbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IF9hcmdzID0gWy4uLmFyZ3VtZW50c11cbiAgICAgICAgICAgICAgICAgIF9hcmdzLnVuc2hpZnQodGhpcylcbiAgICAgICAgICAgICAgICAgIHNlbGZbbWV0aG9kXS5hcHBseShzZWxmLCBfYXJncylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSAmJiAodHlwZW9mIHNlbGZbbWV0aG9kXSA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgICAgICAgICAgICAgICAgaWYgKChub2RlID0gc2VsZi5lbGVtZW50c1tzZWxlY3Rvcl0pIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZm4pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbHNlIGlmIChub2RlICYmIG5vZGUuZm9yRWFjaCkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLmZvckVhY2goKG4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBuLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmbilcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYudGVtcGxhdGUgJiYgKG5vZGUgPSBzZWxmLnRlbXBsYXRlLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpKSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBmbilcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cblxuLyoqXG4gKiAgQGNsYXNzIDxDb21wb25lbnQ+IGlzIHVzZWQgdG8gYnVpbGQgRE9NIGVsZW1lbnRzLCBnZW5lcmF0aW5nIGRhdGEsIHRlbXBsYXRlICYgZXZlbnRzLlxuICogICAgQSBjb21wb25lbnQgY2FuIGNvbnRhaW4gb3RoZXIgY29tcG9uZW50cy5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnQge1xuXG4gIC8qKlxuICAgKiBAbWV0aG9kIDxjb25zdHJ1Y3Rvcj4gYnVpbGQgdGhpcyBvYmplY3RcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxTdHJpbmd8RnVuY3Rpb259IGNvbnRhaW5lciB3aWxsIGNvbnRhaW4gdGhpcyBjb21wb25lbnRcbiAgICogQHBhcmFtIHsqfSBhcmd1bWVudHMuLi4gYXJlIHBhc3NlZCBpbiB0ZW1wbGF0ZSwgZWxlbWVudHMgYW5kIGV2ZW50cyBmdW5jdGlvbnNcbiAgICogQHJldHVybiB7Q29tcG9uZW50fSBzZWxmXG4gICAqL1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJfYnVpbGRlclwiLCB7XG4gICAgICBcImVudW1lcmFibGVcIjogZmFsc2UsXG4gICAgICBcImNvbmZpZ3VyYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmFsdWVcIjoge1xuICAgICAgICB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZSxcbiAgICAgICAgZWxlbWVudHM6IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIGV2ZW50czogdGhpcy5ldmVudHNcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX19ldmVudHNfX1wiLCB7XG4gICAgICBcImVudW1lcmFibGVcIjogZmFsc2UsXG4gICAgICBcImNvbmZpZ3VyYWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidmFsdWVcIjoge31cbiAgICB9KVxuXG4gICAgdGhpcy5zZXRUZW1wbGF0ZSguLi5bbnVsbCwgLi4uYXJndW1lbnRzXSlcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgPHNldFRlbXBsYXRlPiBidWlsZCB0aGUgRE9NIG9mIHRoaXMgQ29tcG9uZW50LCB0aGVuIGxpc3QgZWxlbWVudHMsXG4gICAqICAgIGZpbmFsbHkgbGluayBlbGVtZW50cyB3aXRoIGV2ZW50cyBmdW5jdGlvbnNcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxGdW5jdGlvbnxTdHJpbmd9IGRvbSBpcyB0aGUgSFRNTCBvZiB0aGlzIGNvbXBvbmVudFxuICAgKiBAcGFyYW0geyp9IGFyZ3VtZW50cy4uLiBhcmUgcGFzc2VkIGluIHRlbXBsYXRlLCBlbGVtZW50cyBhbmQgZXZlbnRzIGZ1bmN0aW9uc1xuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9IHNlbGZcbiAgICovXG5cbiAgc2V0VGVtcGxhdGUgKCkge1xuICAgIGNvbnN0IFtkb20sIC4uLmFyZ3NdID0gWy4uLmFyZ3VtZW50c10sXG4gICAgICB0cGwgPSB0ZW1wbGF0ZShkb20gfHwgdGhpcy5fYnVpbGRlci50ZW1wbGF0ZSwgdGhpcywgYXJncylcbiAgICBpZiAodHBsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIHRoaXMudGVtcGxhdGUgPSB0cGxcbiAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cyh0aGlzLl9idWlsZGVyLmVsZW1lbnRzLCB0aGlzLCBhcmdzKVxuICAgICAgZXZlbnRzKHRoaXMuX2J1aWxkZXIuZXZlbnRzLCB0aGlzLCBhcmdzKVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvKipcbiAgICogQG1ldGhvZCA8c2V0Q29udGFpbmVyPiBzZXQgZmlyc3QgcGFyYW1ldGVyIGFzIHBhcmVudCBvZiB0aGlzIGNvbXBvbmVudFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fFN0cmluZ3xGdW5jdGlvbn0gZWxlbWVudCB3aWxsIGNvbnRhaW4gdGhpcyBjb21wb25lbnRcbiAgICogQHBhcmFtIHsqfSBhcmd1bWVudHMuLi4gYXJlIHBhc3NlZCBpbiB0ZW1wbGF0ZSwgZWxlbWVudHMgYW5kIGV2ZW50cyBmdW5jdGlvbnNcbiAgICogQHJldHVybiB7Q29tcG9uZW50fSBzZWxmXG4gICAqL1xuXG4gIHNldENvbnRhaW5lciAoZWxlbWVudCkge1xuICAgIGNvbnN0IGNvbnQgPSBjb250YWluZXIoZWxlbWVudCwgdGhpcywgYXJndW1lbnRzKVxuICAgIGlmIChjb250IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gY29udFxuICAgICAgaWYgKHRoaXMudGVtcGxhdGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnRlbXBsYXRlKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBDSElMRCBDT01QT05FTlRTIE1BTkFHRVJcblxuICAvKipcbiAgICogQG1ldGhvZCA8Y2xlYXJFbGVtZW50PiBjbGVhciBhbiBIVE1MIGVsZW1lbnQgb2YgdGhpcyBDb21wb25lbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgaXMgdGhlIG5hbWUgb2YgdGhlIEhUTUwgZWxlbWVudFxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9IHNlbGZcbiAgICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBuYW1lIGRvZXMgbm90IG1hdGNoIGFuIGVsZW1lbnRcbiAgICovXG5cbiAgY2xlYXJFbGVtZW50IChuYW1lKSB7XG4gICAgbGV0IGVsZW1lbnRcbiAgICBpZiAodGhpcy5lbGVtZW50c1tuYW1lXSAmJiAoW2VsZW1lbnRdID0gdGhpcy5lbGVtZW50c1tuYW1lXSkpIHtcbiAgICAgIHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEVsZW1lbnQgXCIke25hbWV9XCIgaXMgbm90IGFuIGVsZW1lbnQgb2YgdGhpcyBjb21wb25lbnRgKVxuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgPGFwcGVuZENvbXBvbmVudD4gYXBwZW5kIGEgQ29tcG9uZW50IGluIHRoaXMgQ29tcG9uZW50IEhUTUwgZWxlbWVudFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBpcyB0aGUgbmFtZSBvZiB0aGUgSFRNTCBlbGVtZW50XG4gICAqIEBwYXJhbSB7Q29tcG9uZW50fSBjb21wb25lbnQgaXMgdGhlIENvbXBvbmVudCB0byBhcHBlbmQgaW4gdGhlIEhUTUwgZWxlbWVudFxuICAgKiBAcmV0dXJuIHtDb21wb25lbnR9IHNlbGZcbiAgICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBuYW1lIGRvZXMgbm90IG1hdGNoIGFuIGVsZW1lbnQgb3IgaWYgdGhlIGNvbXBvbmVudFxuICAgKiAgICBpcyBub3QgYSBDb21wb25lbnQgaW5zdGFuY2UuXG4gICAqL1xuXG4gIGFwcGVuZENvbXBvbmVudCAobmFtZSwgY29tcG9uZW50KSB7XG4gICAgbGV0IGVsZW1lbnRcbiAgICBpZiAodGhpcy5lbGVtZW50c1tuYW1lXSAmJiAoW2VsZW1lbnRdID0gdGhpcy5lbGVtZW50c1tuYW1lXSkpIHtcbiAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBDb21wb25lbnQpIHtcbiAgICAgICAgY29tcG9uZW50LnNldENvbnRhaW5lcihlbGVtZW50KVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlY29uZCBwYXJhbWV0ZXIgaXMgbm90IGEgQ29tcG9uZW50IG9iamVjdFwiKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRWxlbWVudCBcIiR7bmFtZX1cIiBpcyBub3QgYW4gZWxlbWVudCBvZiB0aGlzIGNvbXBvbmVudGApXG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogQG1ldGhvZCA8ZmlsbENvbXBvbmVudD4gc2V0IGNvbXBvbmVudCBhcyBvbmx5IGNoaWxkIG9mIEhUTUwgZWxlbWVudCBvZiB0aGlzXG4gICAqICAgIGJ5IGNsZWFyaW5nIHRoZW4gYXBwZW5kaW5nIENvbXBvbmVudC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgaXMgdGhlIG5hbWUgb2YgdGhlIEhUTUwgZWxlbWVudFxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH0gY29tcG9uZW50IGlzIHRoZSBDb21wb25lbnQgdG8gYXBwZW5kIGluIHRoZSBIVE1MIGVsZW1lbnRcbiAgICogQHJldHVybiB7Q29tcG9uZW50fSBzZWxmXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgbmFtZSBkb2VzIG5vdCBtYXRjaCBhbiBlbGVtZW50IG9yIGlmIHRoZSBjb21wb25lbnRcbiAgICogICAgaXMgbm90IGEgQ29tcG9uZW50IGluc3RhbmNlLlxuICAgKi9cblxuICBmaWxsQ29tcG9uZW50IChuYW1lLCBjb21wb25lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5jbGVhckVsZW1lbnQobmFtZSkuYXBwZW5kQ29tcG9uZW50KG5hbWUsIGNvbXBvbmVudClcbiAgfVxuXG5cbiAgLy8gVEVNUExBVEUgQlVJTERFUlNcblxuICAvKipcbiAgICogQG1ldGhvZCA8dGVtcGxhdGU+IHNob3VsZCBiZSBvdmVycmlkZW4gYW5kIHNob3VsZCByZXR1cm4gdGV4dCBpbiBIVE1MXG4gICAqICAgIGZvcm1hdCBvciBhbiBIVE1MRWxlbWVudC5cbiAgICogQHBhcmFtIHsqfSBhcmd1bWVudHMuLi4gYXJlIHRyYW5zZmVyZWQgZnJvbSA8Y29uc3RydWN0b3I+XG4gICAqIEByZXR1cm4ge1N0cmluZ3xIVE1MRWxlbWVudHxmdW5jdGlvbn1cbiAgICovXG5cbiAgdGVtcGxhdGUgKCkge1xuICAgIHJldHVybiBcIlwiXG4gIH1cblxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIDxlbGVtZW50cz4gc2hvdWxkIGJlIG92ZXJyaWRlbiBhbmQgc2hvdWxkIHJldHVybiBvYmplY3Qgd2hlcmUga2V5c1xuICAgKiAgICBhcmUgdGhlIG5hbWUsIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgc2VsZWN0b3IgaW4gdGhpcyBjb21wb25lbnQgKG5vdFxuICAgKiAgICBpdHMgY2hpbGRyZW4hKS5cbiAgICogQHBhcmFtIHsqfSBhcmd1bWVudHMuLi4gYXJlIHRyYW5zZmVyZWQgZnJvbSA8Y29uc3RydWN0b3I+XG4gICAqIEByZXR1cm4ge09iamVjdHxmdW5jdGlvbn1cbiAgICogQHdhcm4gdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBzZWxlY3QgY2hpbGQgY29tcG9uZW50cyBlbGVtZW50cy5cbiAgICovXG5cbiAgZWxlbWVudHMgKCkge1xuICAgIHJldHVybiB7fVxuICB9XG5cblxuICAvKipcbiAgICogQG1ldGhvZCA8ZWxlbWVudHM+IHNob3VsZCBiZSBvdmVycmlkZW4gYW5kIHNob3VsZCByZXR1cm4gb2JqZWN0IHdoZXJlIGtleXNcbiAgICogICAgYXJlIHRoZSBuYW1lIHNwYWNlZCB3aXRoIGV2ZW50LCBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGNvbXBvbmVudCBtZXRob2RzXG4gICAqICAgIHRvIGNhbGwgd2hlbiBldmVudCBpcyB0cmlnZ2VyZWQgKG5vdCBpdHMgY2hpbGRyZW4hKS5cbiAgICogQHBhcmFtIHsqfSBhcmd1bWVudHMuLi4gYXJlIHRyYW5zZmVyZWQgZnJvbSA8Y29uc3RydWN0b3I+XG4gICAqIEByZXR1cm4ge09iamVjdHxmdW5jdGlvbn1cbiAgICovXG5cbiAgZXZlbnRzICgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuXG5cbiAgLy8gRVhURVJOQUwgRVZFTlRTXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgPGxpc3Rlbj4gbGlzdGVuIGFuIGV2ZW50ICR7ZXZlbnROYW1lfSBoYXBwZW5pbmcgYW5kIHJlZ2lzdGVyIHRoZVxuICAgKiAgICBmdW5jdGlvbiAke2ZufSB0byBleGVjdXRlIGl0IHdoZW4gZXZlbnQgaGFwcGVuLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0gZXZlbnROYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb258QXJyYXl9IGZuXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH0gc2VsZlxuICAgKi9cblxuICBsaXN0ZW4gKGV2ZW50TmFtZSwgZm4pIHtcbiAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgIGlmICh0eXBlb2YgZXZlbnROYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCB0ID0gZXZlbnROYW1lLnNwbGl0KC9bXFxuXFxzLF0rL2cpXG4gICAgICBpZiAodC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlbihbLi4udF0sIGZuKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGV2ZW50TmFtZSkpIHtcbiAgICAgIGV2ZW50TmFtZS5mb3JFYWNoKChldikgPT4ge1xuICAgICAgICBzZWxmLmxpc3RlbihldiwgZm4pXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm4pKSB7XG4gICAgICBmbi5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgIHNlbGYubGlzdGVuKGV2ZW50TmFtZSwgZilcbiAgICAgIH0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29uc3QgZXZzID0gdGhpc1tcIl9fZXZlbnRzX19cIl1cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShldnNbZXZlbnROYW1lXSkpIHtcbiAgICAgICAgZXZzW2V2ZW50TmFtZV0gPSBbXVxuICAgICAgfVxuICAgICAgZXZzW2V2ZW50TmFtZV0ucHVzaChmbilcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgPGRpc3BhdGNoPiB0cmlnZ2VyIGFuIGV2ZW50ICR7ZXZlbnROYW1lfSBoYXBwZW5pbmcgYW5kIGV4ZWN1dGUgdGhlXG4gICAqICAgIHJlZ2lzdGVyZWQgZnVuY3Rpb25zLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0gZXZlbnROYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGFyZ3NcbiAgICogQHJldHVybiB7Q29tcG9uZW50fSBzZWxmXG4gICAqL1xuXG4gIGRpc3BhdGNoIChldmVudE5hbWUsIGFyZ3MpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgIGlmICh0eXBlb2YgZXZlbnROYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCB0ID0gZXZlbnROYW1lLnNwbGl0KC9bXFxuXFxzLF0rL2cpXG4gICAgICBpZiAodC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlbihbLi4udF0sIGFyZ3MpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnROYW1lKSkge1xuICAgICAgZXZlbnROYW1lLmZvckVhY2goKGV2KSA9PiB7XG4gICAgICAgIHNlbGYubGlzdGVuKGV2LCBhcmdzKVxuICAgICAgfSlcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgY29uc3QgZXZzID0gdGhpc1tcIl9fZXZlbnRzX19cIl1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXZzW2V2ZW50TmFtZV0pKSB7XG4gICAgICBldnNbZXZlbnROYW1lXSA9IFtdXG4gICAgfVxuICAgIGV2c1tldmVudE5hbWVdLmZvckVhY2goKGZuKSA9PiB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdzKSkge1xuICAgICAgICBmbi5hcHBseShudWxsLCBhcmdzKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZuKClcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIDxkZXRhY2g+IHJlbW92ZSB0aGUgcmVnaXN0ZXJlZCBmdW5jdGlvbiAke2ZufSBsaXN0ZW5lZCBieSBldmVudFxuICAgKiAgICAke2V2ZW50TmFtZX0sIG9yIGFsbCBvZiBpdHMgZnVuY3Rpb25zIGlmICR7Zm59IGlzIHVuZGVmaW5lZFxuICAgKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0gZXZlbnROYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb258QXJyYXl9IGZuXG4gICAqIEByZXR1cm4ge0NvbXBvbmVudH0gc2VsZlxuICAgKi9cblxuICBkZXRhY2ggKGV2ZW50TmFtZSwgZm4pIHtcbiAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgIGlmICh0eXBlb2YgZXZlbnROYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCB0ID0gZXZlbnROYW1lLnNwbGl0KC9bXFxuXFxzLF0rL2cpXG4gICAgICBpZiAodC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlbihbLi4udF0sIGZuKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGV2ZW50TmFtZSkpIHtcbiAgICAgIGV2ZW50TmFtZS5mb3JFYWNoKChldikgPT4ge1xuICAgICAgICBzZWxmLmxpc3RlbihldiwgZm4pXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm4pKSB7XG4gICAgICBmbi5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgIHNlbGYubGlzdGVuKGV2ZW50TmFtZSwgZilcbiAgICAgIH0pXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGNvbnN0IGV2cyA9IHRoaXNbXCJfX2V2ZW50c19fXCJdXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGV2c1tldmVudE5hbWVdKSkge1xuICAgICAgZXZzW2V2ZW50TmFtZV0gPSBbXVxuICAgIH1cbiAgICBpZiAoZm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXZzW2V2ZW50TmFtZV0gPSBbXVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGV2c1tldmVudE5hbWVdID0gZXZzW2V2ZW50TmFtZV0uc2xpY2UoZXZzW2V2ZW50TmFtZV0uaW5kZXhPZihmbikpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIDxsaXN0ZW5PbmNlPiBsaXN0ZW4gZXZlbnQgJHtldmVudE5hbWV9IGhhcHBlbmluZyBmb3IgZXhlY3V0aW5nXG4gICAqICAgIGZ1bmN0aW9uICR7Zm59IG9ubHkgb25lIHRpbWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBldmVudE5hbWVcbiAgICogQHBhcmFtIHtmdW5jdGlvbnxBcnJheX0gZm5cbiAgICogQHJldHVybiB7Q29tcG9uZW50fSBzZWxmXG4gICAqL1xuXG4gIGxpc3Rlbk9uY2UgKGV2ZW50TmFtZSwgZm4pIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcyxcbiAgICAgIGRlbCA9ICgpID0+IHtcbiAgICAgICAgc2VsZi5kZXRhY2goZXZlbnROYW1lLCBmbilcbiAgICAgICAgc2VsZi5kZXRhY2goZXZlbnROYW1lLCBkZWwpXG4gICAgICB9XG4gICAgdGhpcy5saXN0ZW4oZXZlbnROYW1lLCBmbilcbiAgICB0aGlzLmxpc3RlbihldmVudE5hbWUsIGRlbClcbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG4iLCJmdW5jdGlvbiBnZXRDdXN0b21DaGlsZHJlbiAobm9kZSkge1xuICByZXR1cm4gWy4uLm5vZGUucXVlcnlTZWxlY3RvckFsbChPYmplY3Qua2V5cyhERUZJTkVTKS5qb2luKFwiLFwiKS50b1VwcGVyQ2FzZSgpKV1cbn1cblxuZnVuY3Rpb24gdGVzdCAobm9kZSkge1xuICBjb25zdCBEZWYgPSBERUZJTkVTW25vZGUubm9kZU5hbWUudG9VcHBlckNhc2UoKV1cbiAgaWYgKERFRklORUQuaW5kZXhPZihub2RlKSAhPT0gLTEpIHtcbiAgICByZXR1cm5cbiAgfVxuICBlbHNlIGlmIChEZWYpIHtcbiAgICBuZXcgRGVmKG5vZGUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgY29uc3QgY2hpbGRyZW4gPSBnZXRDdXN0b21DaGlsZHJlbihub2RlKVxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgIGNoaWxkLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgICAgICAgICBpZiAoIWNoaWxkcmVuLmZpbHRlcigoX2NoaWxkKSA9PiB7IHJldHVybiBERUZJTkVELmluZGV4T2YoX2NoaWxkKSA9PT0gLTEgfSkubGVuZ3RoKSB7XG4gICAgICAgICAgICBERUZJTkVELnB1c2gobm9kZSlcbiAgICAgICAgICAgIG5vZGUuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJsb2FkXCIpKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgREVGSU5FRC5wdXNoKG5vZGUpXG4gICAgICBub2RlLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwibG9hZFwiKSlcbiAgICB9XG4gIH1cblxuICBpZiAobm9kZS5jaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgIG5vZGUuY2hpbGROb2Rlcy5mb3JFYWNoKHRlc3QpXG4gIH1cbn1cblxuZnVuY3Rpb24gb25sb2FkICgpIHtcbiAgY29uc3QgbW8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7XG4gICAgbXV0YXRpb25zLmZvckVhY2goKG11dGF0aW9uKSA9PiB7XG4gICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzLmZvckVhY2godGVzdClcbiAgICB9KVxuICB9KVxuXG4gIGNvbnN0IGNuZiA9IHtcbiAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgIHN1YnRyZWU6IHRydWVcbiAgfVxuXG4gIG1vLm9ic2VydmUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImh0bWxcIiksIGNuZilcbn1cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIG9ubG9hZClcbmlmICh3aW5kb3cuZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gIG9ubG9hZCgpXG59XG5cblxuY29uc3QgREVGSU5FUyA9IHt9XG5jb25zdCBERUZJTkVEID0gW11cblxuLyoqXG4gKiBAZnVuY3Rpb24gPGRlZmluZT4gcnVuIGEgZnVuY3Rpb24gJHtidWlsZGVyfSBlYWNoICR7bm9kZU5hbWV9IGZpcnN0IGluc2VydGlvblxuICogICAgaW4gY3VycmVudCBIVE1MIERvY3VtZW50LlxuICogQHBhcmFtIHtTdHJpbmd9IG5vZGVOYW1lIGlzIHRoZSBub2RlTmFtZSBvZiB5b3VyIEhUTUxFbGVtZW50LCBwbGVhc2UgdXNlIGNvcnJlY3Qgc3BlbGxpbmdcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGJ1aWxkZXIgaXMgdGhlIGZ1bmN0aW9uIHJ1biB3aGVuIGFuIEhUTUxFbGVtZW50IHRoYXQgbWF0Y2hcbiAqICAgIG5vZGVOYW1lIGlzIGluc2VydGVkIGluIGN1cnJlbnQgSFRNTCBEb2N1bWVudC9cbiAqL1xuXG5mdW5jdGlvbiBkZWZpbmUgKG5vZGVOYW1lLCBidWlsZGVyKSB7XG4gIGlmICh0eXBlb2Ygbm9kZU5hbWUgIT09IFwic3RyaW5nXCIpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmlyc3QgcGFyYW1ldGVyIHNob3VsZCBiZSBhIHN0cmluZyAodG8gc2VsZWN0IGl0ZW1zIGJ5IG5vZGUgbmFtZSBpbiBkb20gdHJlZSlcIilcbiAgaWYgKHR5cGVvZiBidWlsZGVyICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU2Vjb25kIHBhcmFtZXRlciBzaG91bGQgYmUgYSBjbGFzcyBvciBhIGZ1bmN0aW9uICh0byBjb25zdHJ1Y3QgaXRlbSlcIilcbiAgREVGSU5FU1tub2RlTmFtZS50b1VwcGVyQ2FzZSgpXSA9IGJ1aWxkZXI7XG4gIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKG5vZGVOYW1lLnRvVXBwZXJDYXNlKCkpXS5mb3JFYWNoKHRlc3QpXG59XG5cblxuLyoqXG4gKiBAY2xhc3MgPEN1c3RvbUhUTUxFbGVtZW50PiBpcyBhbiBhYnN0cmFjdCBjbGFzcyBmb3IgaGVscGluZyBkZXZcbiAqL1xuXG5jbGFzcyBDdXN0b21IVE1MRWxlbWVudCB7XG59XG5cbmV4cG9ydCB7IGRlZmluZSBhcyBkZWZhdWx0LCBkZWZpbmUsIEN1c3RvbUhUTUxFbGVtZW50IH1cbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSBcIi4vY29tcG9uZW50XCJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuL3NlY3Rpb25cIlxuXG4vKipcbiAqIEBjbGFzcyA8UGFnZT4gaXMgYSBDb21wb25lbnQgd2hpY2ggaXMgc2V0IGFzIG9ubHkgY2hpbGQgb2YgRG9jdW1lbnQgYm9keSBhdFxuICogICAgdGltZS4gQSBzZWN0aW9uIGlzIGRlZmluZWQgd2l0aCBhIFBhZ2UsIHNvIHdoZW4gYSBzZWN0aW9uIGlzIGNhbGxlZCwgdGhlXG4gKiAgICBwYWdlIHdyYXAgdGhlIG9ubHkgY2hpbGQgc2VjdGlvbiBpbiB0aGUgcGFnZS4gSXQgc2ltcGxpZnkgdGhlIGNvbnN0cnVjdGlvblxuICogICAgb2YgdGhlIERPTS5cbiAqIEB3YXJuIFBhZ2UuZWxlbWVudHMgc2hvdWxkIGNvbnRhaW4gXCJzZWN0aW9uXCIgZWxlbWVudFxuICogQGFkdmlzZSBBIHNpbmdsZSBjaGlsZCBjbGFzcyBvZiBQYWdlIGluc3RhbmNlIHNob3VsZCBleGlzdHMgc28gcGxlYXNlXG4gKiAgICBjYWxsIFBhZ2UuZ2V0UGFnZUJ5Q29uc3RydWN0b3IocGFnZSkgaW4gc2VjdGlvbi5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdlIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICAvKipcbiAgICogQG1ldGhvZCA8Y29uc3RydWN0b3I+IGF0IGNvbnN0cnVjdGlvbiBvZiB0aGlzIFBhZ2UsIHRoZSBwYWdlIGZpbGwgdGhlXG4gICAqICAgIERvY3VtZW50IGJvZHkgYXMgb25seSBjaGlsZC5cbiAgICogQHJldHVybiB7UGFnZX0gc2VsZlxuICAgKi9cblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoUGFnZS5jb250YWluZXIpXG4gICAgdGhpcy50ZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoXCJwYWdlXCIsIHRoaXMudGVtcGxhdGUuZ2V0QXR0cmlidXRlKFwiY29tcG9uZW50XCIpKVxuICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQXR0cmlidXRlKFwiY29tcG9uZW50XCIpXG4gICAgUGFnZS5pbnN0YW5jZXNbdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXSA9IHRoaXNcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgPHNldFNlY3Rpb24+IGZpbGwgdGhpcyBwYWdlIHdpdGggYSBTZWN0aW9uXG4gICAqIEBwYXJhbSB7U2VjdGlvbn0gc2VjdGlvblxuICAgKiBAcmV0dXJuIHtQYWdlfSBzZWxmXG4gICAqL1xuXG4gIHNldFNlY3Rpb24gKHNlY3Rpb24pIHtcbiAgICBpZiAoc2VjdGlvbiBpbnN0YW5jZW9mIFNlY3Rpb24pIHtcbiAgICAgIHRoaXMuZmlsbENvbXBvbmVudChcInNlY3Rpb25cIiwgc2VjdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgPHNldFBhZ2U+IHNldCB0aGlzIHBhZ2UgYXMgb25seSBwYWdlIHdyYXBwZXIgb24gdGhpcyBEb2N1bWVudCBib2R5XG4gICAqICAgIGFuZCBzZXQgYSBzZWN0aW9uIGlmIHNldCBpbiBwYXJhbWV0ZXIuXG4gICAqIEBwYXJhbSB7U2VjdGlvbn0gc2VjdGlvblxuICAgKi9cblxuICBzZXRQYWdlIChzZWN0aW9uKSB7XG4gICAgaWYgKFBhZ2UucGFnZSAhPT0gdGhpcykge1xuICAgICAgY29uc3QgaW50byA9IFBhZ2UuY29udGFpbmVyXG4gICAgICB3aGlsZSAoaW50by5maXJzdENoaWxkKVxuICAgICAgICBpbnRvLnJlbW92ZUNoaWxkKGludG8uZmlyc3RDaGlsZClcbiAgICAgIHRoaXMuc2V0Q29udGFpbmVyKGludG8pXG4gICAgICBQYWdlLnBhZ2UgPSB0aGlzXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNldFNlY3Rpb24oc2VjdGlvbilcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvbiA8c2V0Q29udGFpbmVyPiBzZXQgdGhlIGNvbnRhaW5lciB3aGVyZSBldmVyeSBwYWdlcyBzaG91bGQgYmVcbiAgICogICAgZmlsbGVkIGluLlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fEZ1bmN0aW9ufFN0cmluZ30gaW50b1xuICAgKi9cblxuICBzdGF0aWMgc2V0Q29udGFpbmVyIChpbnRvKSB7XG4gICAgaWYgKHR5cGVvZiBpbnRvID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiBQYWdlLnNldENvbnRhaW5lcihpbnRvKCkpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW50byA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgaW50byA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaW50bylcbiAgICB9XG4gICAgaWYgKGludG8gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgUGFnZS5jb250YWluZXIgPSBpbnRvXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgUGFnZS5jb250YWluZXIgPSBQYWdlLmNvbnRhaW5lciB8fCBkb2N1bWVudC5ib2R5XG4gICAgfVxuXG4gICAgaWYgKFBhZ2UucGFnZSkge1xuICAgICAgUGFnZS5wYWdlLnNldENvbnRhaW5lcihpbnRvKVxuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvbiA8Z2V0Q3VycmVudFBhZ2U+IHJldHVybnMgbGFzdCBwYWdlIHNldCBpbiBib2R5XG4gICAqIEByZXR1cm4ge1BhZ2V9XG4gICAqL1xuXG4gIHN0YXRpYyBnZXRDdXJyZW50UGFnZSAoKSB7XG4gICAgcmV0dXJuIFBhZ2UucGFnZVxuICB9XG5cblxuICAvKipcbiAgICogQGZ1bmN0aW9uIDxnZXRQYWdlQnlDb25zdHJ1Y3Rvcj4gcmV0dXJucyBhIFBhZ2UgaW5zdGFuY2Ugb2YgJHtDb25zdHJ9IGlmIGl0XG4gICAqICAgIGV4aXN0cyBvciBhIG5ldyBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtQYWdlfSBDb25zdHJcbiAgICogQHJldHVybiB7UGFnZX1cbiAgICovXG5cbiAgc3RhdGljIGdldFBhZ2VCeUNvbnN0cnVjdG9yIChDb25zdHIpIHtcbiAgICBjb25zdCBpbnN0ID0gUGFnZS5pbnN0YW5jZXNbQ29uc3RyLm5hbWVdXG4gICAgaWYgKGluc3QgaW5zdGFuY2VvZiBQYWdlKSB7XG4gICAgICByZXR1cm4gaW5zdFxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQ29uc3RyKClcbiAgICB9XG4gIH1cbn1cblxuUGFnZS5pbnN0YW5jZXMgPSB7fVxuUGFnZS5jb250YWluZXIgPSBudWxsXG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gXCIuL2NvbXBvbmVudFwiXG5pbXBvcnQgUGFnZSBmcm9tIFwiLi9wYWdlXCJcblxuLyoqXG4gKiBAY2xhc3MgPFNlY3Rpb24+IGlzIGEgQ29tcG9uZW50IHdoaWNoIHNob3VsZCBiZSBvbmx5IGNoaWxkIG9mIGEgcGFnZSAod2hpY2hcbiAqICAgIGlzIHRoZSBvbmx5IGNoaWxkIG9mIERvY3VtZW50IGJvZHkpIGF0IHRpbWUuXG4gKiBAd2FybiBTZWN0aW9uLndyYXBwZXIoKSBzaG91bGQgcmV0dXJuIGEgUGFnZSBjb25zdHJ1Y3RvciwgZWxzZSBub3RoaW5nIGlzXG4gKiAgICBkaXNwbGF5ZWQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XG5cblxuICAvKipcbiAgICogQG1ldGhvZCA8Y29uc3RydWN0b3I+XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIGlzIHRyYW5zZmVyZWQgdG8gU2VjdGlvbi50ZW1wbGF0ZSwgU2VjdGlvbi5lbGVtZW50c1xuICAgKiAgICBhbmQgU2VjdGlvbi5ldmVudHMuXG4gICAqIEByZXR1cm4ge1NlY3Rpb259IHNlbGZcbiAgICovXG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cylcbiAgICB0aGlzLnRlbXBsYXRlLnNldEF0dHJpYnV0ZShcInNlY3Rpb25cIiwgdGhpcy50ZW1wbGF0ZS5nZXRBdHRyaWJ1dGUoXCJjb21wb25lbnRcIikpXG4gICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVBdHRyaWJ1dGUoXCJjb21wb25lbnRcIilcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgPHNldFNlY3Rpb24+IHNldCB0aGlzIHNlY3Rpb24gaW4gRG9jdW1lbnQgYXMgb25seSBjaGlsZCBvZiBhIFBhZ2VcbiAgICogICAgYW5kIFBhZ2UgaW5zdGFuY2UgYXMgb25seSBjaGlsZCBvZiBEb2N1bWVudCBib2R5LlxuICAgKiBAcmV0dXJuIHtTZWN0aW9ufSBzZWxmXG4gICAqL1xuXG4gIHNldFNlY3Rpb24gKCkge1xuICAgIGNvbnN0IHBhZ2UgPSB0aGlzLmdldFdyYXBwZXIoKVxuICAgIGlmIChwYWdlKSB7XG4gICAgICBwYWdlLnNldFBhZ2UodGhpcylcbiAgICAgIHRoaXMuX2J1aWxkZXIud3JhcHBlciA9IHBhZ2VcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgPGdldFdyYXBwZXI+IHJldHVybnMgc2VjdGlvbiB3cmFwcGVyIGNvbXBvbmVudCwgYSBQYWdlIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge1BhZ2V9IGEgY29tcG9uZW50IHdoaWNoIHdyYXAgdGhpcyBzZWN0aW9uXG4gICAqL1xuXG4gIGdldFdyYXBwZXIgKCkge1xuICAgIGlmICghdGhpcy5fYnVpbGRlci53cmFwcGVyKSB7XG4gICAgICB0aGlzLl9idWlsZGVyLndyYXBwZXIgPSBQYWdlLmdldFBhZ2VCeUNvbnN0cnVjdG9yKHRoaXMud3JhcHBlcigpKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYnVpbGRlci53cmFwcGVyXG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCA8d3JhcHBlcj4gc2hvdWxkIGJlIG92ZXJyaWRlbiBhbmQgc2hvdWxkIHJldHVybiBhIFBhZ2UgY2hpbGQgY2xhc3NcbiAgICogICAgY29uc3RydWN0b3IuXG4gICAqIEByZXR1cm4ge1BhZ2V9IHdoaWNoIHdpbGwgd3JhcCB0aGlzIHNlY3Rpb25cbiAgICovXG5cbiAgd3JhcHBlciAoKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuIiwiLyoqXG4gKiAgQGZ1bmN0aW9uIDxhamF4PiBleGVjdXRlIGEgcmVxdWVzdCB0byBzZXJ2ZXJcbiAqICBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbnxvYmplY3R9IG1ldGhvZCBvciBidWlsZGVyXG4gKiAgQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IHVyaSB0byByZXNvdXJjZVxuICogIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufSBkYXRhIHRvIHNlbmQgaW4gcmVxdWVzdCBib2R5XG4gKiAgQHBhcmFtIHtmdW5jdGlvbnxBcnJheS48ZnVuY3Rpb24+fSBzdWNjZXNzIGZ1bmN0aW9uc1xuICogIEBwYXJhbSB7ZnVuY3Rpb258QXJyYXkuPGZ1bmN0aW9uPn0gZmFpbHVyZSBmdW5jdGlvbnNcbiAqICBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gaGVhZGVycyB0byBzZW5kIHRvIHJlcXVlc3QgaGVhZGVyc1xuICogIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufSBvdmVycmlkZU1pbWVUeXBlIHRvIGVuZm9yY2UgcmVzcG9uc2UgcmVhZGluZyBmb3JtYXRcbiAqICBAcmV0dXJuIHtQcm9taXNlfVxuICovXG5cbmZ1bmN0aW9uIGFqYXggKC4uLmFyZ3MpIHtcbiAgY29uc3QgYnVpbGRlciA9IGFqYXhQYXJhbWV0ZXJzLmFwcGx5KG51bGwsIGFyZ3MpXG5cbiAgY29uc3QgcHJvbSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZW5kXCIsICgpID0+IHtcbiAgICAgIHJlc29sdmUoeGhyKVxuICAgIH0pXG4gICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCAoKSA9PiB7XG4gICAgICByZWplY3QoeGhyKVxuICAgIH0pXG5cbiAgICB4aHIub3BlbihidWlsZGVyLm1ldGhvZCwgYnVpbGRlci51cmkpXG5cbiAgICBpZiAodHlwZW9mIGJ1aWxkZXIuaGVhZGVycyA9PT0gXCJvYmplY3RcIiAmJiBidWlsZGVyLmhlYWRlcnMgIT09IG51bGwpIHtcbiAgICAgIE9iamVjdC5rZXlzKGJ1aWxkZXIuaGVhZGVycykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHN0ciA9IHRyeUV4ZWMoYnVpbGRlci5oZWFkZXJzW2tleV0pXG4gICAgICAgIGlmICh0eXBlb2Ygc3RyID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBzdHIpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBidWlsZGVyLm92ZXJyaWRlTWltZVR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHhoci5vdmVycmlkZU1pbWVUeXBlKGJ1aWxkZXIub3ZlcnJpZGVNaW1lVHlwZSlcbiAgICB9XG5cbiAgICB4aHIuc2VuZChidWlsZGVyLmRhdGEpXG4gIH0pXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYnVpbGRlci5zdWNjZXNzKSkge1xuICAgIGJ1aWxkZXIuc3VjY2Vzcy5mb3JFYWNoKChmbikgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBwcm9tLnRoZW4oZm4pXG4gICAgfSlcbiAgfVxuICBpZiAodHlwZW9mIGJ1aWxkZXIuc3VjY2VzcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcHJvbS50aGVuKGJ1aWxkZXIuc3VjY2VzcylcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGJ1aWxkZXIuZmFpbHVyZSkpIHtcbiAgICBidWlsZGVyLmZhaWx1cmUuZm9yRWFjaCgoZm4pID0+IHtcbiAgICAgIGlmICh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgcHJvbS5jYXRjaChmbilcbiAgICB9KVxuICB9XG4gIGlmICh0eXBlb2YgYnVpbGRlci5mYWlsdXJlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBwcm9tLmNhdGNoKGJ1aWxkZXIuZmFpbHVyZSlcbiAgfVxuXG4gIHJldHVybiBwcm9tXG59XG5cblxuLyoqXG4gKiAgQGZ1bmN0aW9uIDxhamF4UGFyYW1ldGVycz4gZXhlY3V0ZSBwYXJhbWV0ZXJzIGFuZCByZXR1cm5zIGluIGdvb2QgZm9ybWF0XG4gKiAgQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb258b2JqZWN0fSBtZXRob2Qgb3IgYnVpbGRlclxuICogIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufSB1cmkgdG8gcmVzb3VyY2VcbiAqICBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gZGF0YSB0byBzZW5kIGluIHJlcXVlc3QgYm9keVxuICogIEBwYXJhbSB7ZnVuY3Rpb258QXJyYXkuPGZ1bmN0aW9uPn0gc3VjY2VzcyBmdW5jdGlvbnNcbiAqICBAcGFyYW0ge2Z1bmN0aW9ufEFycmF5LjxmdW5jdGlvbj59IGZhaWx1cmUgZnVuY3Rpb25zXG4gKiAgQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IGhlYWRlcnMgdG8gc2VuZCB0byByZXF1ZXN0IGhlYWRlcnNcbiAqICBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gb3ZlcnJpZGVNaW1lVHlwZSB0byBlbmZvcmNlIHJlc3BvbnNlIHJlYWRpbmcgZm9ybWF0XG4gKiAgQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFqYXhQYXJhbWV0ZXJzIChtZXRob2QsIHVyaSwgZGF0YSwgc3VjY2VzcywgZmFpbHVyZSwgaGVhZGVycywgb3ZlcnJpZGVNaW1lVHlwZSkge1xuICBpZiAodHlwZW9mIG1ldGhvZCA9PT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBhamF4UGFyYW1ldGVycyhcbiAgICAgIG1ldGhvZC5tZXRob2QsXG4gICAgICBtZXRob2QudXJpIHx8IG1ldGhvZC51cmwgfHwgbWV0aG9kLmZpbGUgfHwgbWV0aG9kLnNvdXJjZSxcbiAgICAgIG1ldGhvZC5kYXRhIHx8IG1ldGhvZC5ib2R5IHx8IG1ldGhvZC5wb3N0LFxuICAgICAgbWV0aG9kLnN1Y2Nlc3MgfHwgbWV0aG9kLmxvYWQsXG4gICAgICBtZXRob2QuZmFpbHVyZSB8fCBtZXRob2QuZXJyb3IsXG4gICAgICBtZXRob2QuaGVhZGVycyxcbiAgICAgIG1ldGhvZC5vdmVycmlkZU1pbWVUeXBlXG4gICAgKVxuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICBtZXRob2Q6IHRyeUV4ZWMuY2FsbCh0aGlzLCBtZXRob2QsIFwiR0VUXCIsIGFyZ3VtZW50cyksXG4gICAgICB1cmk6IHRyeUV4ZWMuY2FsbCh0aGlzLCB1cmksIFwiXCIsIGFyZ3VtZW50cyksXG4gICAgICBkYXRhOiB0cnlFeGVjLmNhbGwodGhpcywgZGF0YSwgbnVsbCwgYXJndW1lbnRzKSxcbiAgICAgIHN1Y2Nlc3MsXG4gICAgICBmYWlsdXJlLFxuICAgICAgaGVhZGVyczogdHJ5RXhlYy5jYWxsKHRoaXMsIGhlYWRlcnMsIG51bGwsIGFyZ3VtZW50cyksXG4gICAgICBvdmVycmlkZU1pbWVUeXBlOiB0cnlFeGVjLmNhbGwodGhpcywgb3ZlcnJpZGVNaW1lVHlwZSwgbnVsbCwgYXJndW1lbnRzKVxuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogIEBmdW5jdGlvbiA8dHJ5RXhlYz4gZXhlY3V0ZSB7Zm59IGlmIGl0IGlzIGEgZnVuY3Rpb24gb3JcbiAqICAgIHJldHVybiB7Zm59IGlmIGl0IGlzIGEgc3RyaW5nIG9yXG4gKiAgICByZXR1cm4ge2RlZn0uXG4gKiAgQHJldHVybiB7c3RyaW5nfCp9XG4gKi9cblxuZnVuY3Rpb24gdHJ5RXhlYyAoZm4sIGRlZiwgYXJncykge1xuICBpZiAodHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncylcbiAgfVxuICBpZiAodHlwZW9mIGZuID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGZuXG4gIH1cbiAgcmV0dXJuIGRlZlxufVxuXG5leHBvcnQgeyBhamF4IGFzIGRlZmF1bHQsIGFqYXgsIGFqYXhQYXJhbWV0ZXJzLCB0cnlFeGVjIH1cbiIsImltcG9ydCBhamF4IGZyb20gXCIuL2FqYXhcIlxuXG5mdW5jdGlvbiBtZXJnZSAoLi4uYXJncykge1xuICBjb25zdCByZXN1bHQgPSB7fSwgc3VjY2VzcyA9IFtdLCBmYWlsdXJlID0gW11cbiAgd2hpbGUgKGFyZ3MubGVuZ3RoKSB7XG4gICAgY29uc3QgYnVpbGRlciA9IGFyZ3Muc2hpZnQoKVxuICAgIGlmIChBcnJheS5pc0FycmF5KGJ1aWxkZXIuc3VjY2VzcykpIHN1Y2Nlc3MuY29uY2F0KGJ1aWxkZXIuc3VjY2VzcylcbiAgICBpZiAodHlwZW9mIGJ1aWxkZXIuc3VjY2VzcyA9PT0gXCJmdW5jdGlvblwiKSBzdWNjZXNzLnB1c2goYnVpbGRlci5zdWNjZXNzKVxuICAgIGlmIChBcnJheS5pc0FycmF5KGJ1aWxkZXIuZmFpbHVyZSkpIGZhaWx1cmUuY29uY2F0KGJ1aWxkZXIuZmFpbHVyZSlcbiAgICBpZiAodHlwZW9mIGJ1aWxkZXIuZmFpbHVyZSA9PT0gXCJmdW5jdGlvblwiKSBmYWlsdXJlLnB1c2goYnVpbGRlci5mYWlsdXJlKVxuICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCBidWlsZGVyKVxuICB9XG4gIHJlc3VsdC5zdWNjZXNzID0gc3VjY2Vzc1xuICByZXN1bHQuZmFpbHVyZSA9IGZhaWx1cmVcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5cbi8qKlxuICogIEBmdW5jdGlvbiA8YWpheFBhcmFtZXRlcnM+IGV4ZWN1dGUgcGFyYW1ldGVycyBhbmQgcmV0dXJucyBpbiBnb29kIGZvcm1hdFxuICogIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufG9iamVjdH0gbWV0aG9kIG9yIGJ1aWxkZXJcbiAqICBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gdXJpIHRvIHJlc291cmNlXG4gKiAgQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IGRhdGEgdG8gc2VuZCBpbiByZXF1ZXN0IGJvZHlcbiAqICBAcGFyYW0ge2Z1bmN0aW9ufEFycmF5LjxmdW5jdGlvbj59IHN1Y2Nlc3MgZnVuY3Rpb25zXG4gKiAgQHBhcmFtIHtmdW5jdGlvbnxBcnJheS48ZnVuY3Rpb24+fSBmYWlsdXJlIGZ1bmN0aW9uc1xuICogIEBwYXJhbSB7b2JqZWN0fGZ1bmN0aW9ufSBoZWFkZXJzIHRvIHNlbmQgdG8gcmVxdWVzdCBoZWFkZXJzXG4gKiAgQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IG92ZXJyaWRlTWltZVR5cGUgdG8gZW5mb3JjZSByZXNwb25zZSByZWFkaW5nIGZvcm1hdFxuICogIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBhamF4UGFyYW1ldGVycyAobWV0aG9kLCB1cmksIGRhdGEsIHN1Y2Nlc3MsIGZhaWx1cmUsIGhlYWRlcnMsIG92ZXJyaWRlTWltZVR5cGUpIHtcbiAgaWYgKHR5cGVvZiBtZXRob2QgPT09IFwib2JqZWN0XCIgJiYgbWV0aG9kICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGFqYXhQYXJhbWV0ZXJzKFxuICAgICAgbWV0aG9kLm1ldGhvZCxcbiAgICAgIG1ldGhvZC51cmkgfHwgbWV0aG9kLnVybCB8fCBtZXRob2QuZmlsZSB8fCBtZXRob2Quc291cmNlLFxuICAgICAgbWV0aG9kLmRhdGEgfHwgbWV0aG9kLmJvZHkgfHwgbWV0aG9kLnBvc3QsXG4gICAgICBtZXRob2Quc3VjY2VzcyB8fCBtZXRob2QubG9hZCxcbiAgICAgIG1ldGhvZC5mYWlsdXJlIHx8IG1ldGhvZC5lcnJvcixcbiAgICAgIG1ldGhvZC5oZWFkZXJzLFxuICAgICAgbWV0aG9kLm92ZXJyaWRlTWltZVR5cGVcbiAgICApXG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHVyaSxcbiAgICAgIGRhdGEsXG4gICAgICBzdWNjZXNzLFxuICAgICAgZmFpbHVyZSxcbiAgICAgIGhlYWRlcnMsXG4gICAgICBvdmVycmlkZU1pbWVUeXBlXG4gICAgfVxuICB9XG59XG5cblxuLyoqXG4gKiAgQGNsYXNzIDxSZXNvdXJjZT4gc3RvcmUgbWV0aG9kcyBvbiBhIGNvbW1vbiBkaXN0YW50IFwicmVzb3VyY2VcIi4gQSBkaXN0YW50XG4gKiAgICByZXNvdXJjZSBpcyBhIHN0cmVhbSB3aXRoIHNhbWUgb3JpZ2luIGFuZCAoYWxtb3N0KSBzYW1lIGFjZXNzIG1ldGhvZHMsXG4gKiAgICBsaWtlIGEgZGF0YSBzZXJ2ZXIuXG4gKiAgICBMb29rIGNhcmVmdWxseSwgdGhlIGNvbnN0cnVjdG9yLCB0aGUgYWRkTWV0aG9kIGFuZCBlYWNoIG1ldGhvZHMgYXJlIGNhbGxlZFxuICogICAgd2l0aCBzYW1lIHBhcmFtZXRlcnMsIGV4Y2VwdCBhZGRNZXRob2Qgd2hpY2ggaGFzIGEgXCJuYW1lXCIgYXQgZmlyc3RcbiAqICAgIHBhcmFtZXRlci4gVGhlc2VzIHBhcmFtZXRlcnMgYXJlIG1lcmdlZCB0byBjcmVhdGUgdGhlIGZpbmFsIGJ1aWxkZXIgZm9yXG4gKiAgICB0aGUgcmVxdWVzdC5cbiAqL1xuXG5jbGFzcyBSZXNvdXJjZSB7XG5cbiAgLyoqXG4gICAqICBAbWV0aG9kIDxjb25zdHJ1Y3Rvcj5cbiAgICogIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufG9iamVjdH0gbWV0aG9kIG9yIGJ1aWxkZXJcbiAgICogIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufSB1cmkgdG8gcmVzb3VyY2VcbiAgICogIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufSBkYXRhIHRvIHNlbmQgaW4gcmVxdWVzdCBib2R5XG4gICAqICBAcGFyYW0ge2Z1bmN0aW9ufEFycmF5LjxmdW5jdGlvbj59IHN1Y2Nlc3MgZnVuY3Rpb25zXG4gICAqICBAcGFyYW0ge2Z1bmN0aW9ufEFycmF5LjxmdW5jdGlvbj59IGZhaWx1cmUgZnVuY3Rpb25zXG4gICAqICBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gaGVhZGVycyB0byBzZW5kIHRvIHJlcXVlc3QgaGVhZGVyc1xuICAgKiAgQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IG92ZXJyaWRlTWltZVR5cGUgdG8gZW5mb3JjZSByZXNwb25zZSByZWFkaW5nIGZvcm1hdFxuICAgKiAgQHJldHVybiB7UmVzb3VyY2V9IHNlbGZcbiAgICovXG5cbiAgY29uc3RydWN0b3IgKC4uLmFyZ3MpIHtcbiAgICB0aGlzLmNvbW1vbkJ1aWxkZXIgPSBhamF4UGFyYW1ldGVycy5hcHBseShudWxsLCBhcmdzKVxuICAgIHRoaXMubWV0aG9kc0J1aWxkZXIgPSB7fVxuICB9XG5cbiAgLyoqXG4gICAqICBAbWV0aG9kIDxhZGRNZXRob2Q+IHJlZ2lzdGVyIGEgbmV3IG1ldGhvZCBvZiB0aGlzIHJlc291cmNlLCB3aGljaCBjb3VsZCBiZSBjYWxsZWRcbiAgICogICAgICB3aXRoIHJlc291cmNlLiR7bmFtZX0obWV0aG9kLCB1cmksIGRhdGEsIHN1Y2Nlc3MsIGZhaWx1cmUsIGhlYWRlcnMsIG92ZXJyaWRlTWltZVR5cGUpLlxuICAgKiAgQHBhcmFtIHtzdHJpbmd9IG5hbWUgdXNlZCB0byBjYWxsIHRoZSBtZXRob2QuXG4gICAqICBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbnxvYmplY3R9IG1ldGhvZCBvciBidWlsZGVyXG4gICAqICBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gdXJpIHRvIHJlc291cmNlXG4gICAqICBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gZGF0YSB0byBzZW5kIGluIHJlcXVlc3QgYm9keVxuICAgKiAgQHBhcmFtIHtmdW5jdGlvbnxBcnJheS48ZnVuY3Rpb24+fSBzdWNjZXNzIGZ1bmN0aW9uc1xuICAgKiAgQHBhcmFtIHtmdW5jdGlvbnxBcnJheS48ZnVuY3Rpb24+fSBmYWlsdXJlIGZ1bmN0aW9uc1xuICAgKiAgQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IGhlYWRlcnMgdG8gc2VuZCB0byByZXF1ZXN0IGhlYWRlcnNcbiAgICogIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufSBvdmVycmlkZU1pbWVUeXBlIHRvIGVuZm9yY2UgcmVzcG9uc2UgcmVhZGluZyBmb3JtYXRcbiAgICogIEByZXR1cm4ge1Jlc291cmNlfSBzZWxmXG4gICAqL1xuXG4gIGFkZE1ldGhvZCAobmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgaWYgKHRoaXNbbmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhpcyByZXNvdXJjZSBhbHJlYWR5IGhhcyBhICR7bmFtZX0gbWV0aG9kYClcbiAgICB9XG5cbiAgICB0aGlzLm1ldGhvZHNCdWlsZGVyW25hbWVdID0gYWpheFBhcmFtZXRlcnMuYXBwbHkobnVsbCwgYXJncylcbiAgICB0aGlzW25hbWVdID0gKCkgPT4ge1xuICAgICAgY29uc3QgYnVpbGRlciA9IGFqYXhQYXJhbWV0ZXJzLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICAgIHJldHVybiBhamF4KG1lcmdlKHNlbGYuY29tbW9uQnVpbGRlciwgc2VsZi5tZXRob2RzQnVpbGRlcltuYW1lXSwgYnVpbGRlcikpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8qKlxuICAgKiAgQGZ1bmN0aW9uIDxyZXF1ZXN0PiBzZW5kIGEgcmVxdWVzdFxuICAgKiAgQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb258b2JqZWN0fSBtZXRob2Qgb3IgYnVpbGRlclxuICAgKiAgQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IHVyaSB0byByZXNvdXJjZVxuICAgKiAgQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IGRhdGEgdG8gc2VuZCBpbiByZXF1ZXN0IGJvZHlcbiAgICogIEBwYXJhbSB7ZnVuY3Rpb258QXJyYXkuPGZ1bmN0aW9uPn0gc3VjY2VzcyBmdW5jdGlvbnNcbiAgICogIEBwYXJhbSB7ZnVuY3Rpb258QXJyYXkuPGZ1bmN0aW9uPn0gZmFpbHVyZSBmdW5jdGlvbnNcbiAgICogIEBwYXJhbSB7b2JqZWN0fGZ1bmN0aW9ufSBoZWFkZXJzIHRvIHNlbmQgdG8gcmVxdWVzdCBoZWFkZXJzXG4gICAqICBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gb3ZlcnJpZGVNaW1lVHlwZSB0byBlbmZvcmNlIHJlc3BvbnNlIHJlYWRpbmcgZm9ybWF0XG4gICAqICBAcmV0dXJuIHtQcm9taXNlLjxYTUxIdHRwUmVxdWVzdD4uPFhNTEh0dHBSZXF1ZXN0Pn1cbiAgICovXG5cbiAgc3RhdGljIHJlcXVlc3QgKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBidWlsZGVyID0gYWpheFBhcmFtZXRlcnMuYXBwbHkobnVsbCwgYXJncylcbiAgICByZXR1cm4gYWpheChidWlsZGVyKVxuICB9XG59XG5cbmV4cG9ydCB7IFJlc291cmNlIGFzIGRlZmF1bHQsIFJlc291cmNlLCBtZXJnZSB9XG4iLCJjb25zdCBGT1JNQVRTID0ge1xuICBudW1iZXI6IChzdHIpID0+IHtcbiAgICBjb25zdCBuID0gcGFyc2VGbG9hdChzdHIpXG4gICAgaWYgKGlzTmFOKG4pKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHR5cGU6IGV4cGVjdCBhcmd1bWVudCB0byBiZSBhIG51bWJlci5cIilcbiAgICByZXR1cm4gblxuICB9LFxuICBpbnRlZ2VyOiAoc3RyKSA9PiB7XG4gICAgY29uc3QgbiA9IHBhcnNlSW50KHN0cilcbiAgICBpZiAoaXNOYU4obikpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgdHlwZTogZXhwZWN0IGFyZ3VtZW50IHRvIGJlIGFuIGludGVnZXIuXCIpXG4gICAgcmV0dXJuIG5cbiAgfSxcbiAgZmxvYXQ6IChzdHIpID0+IHtcbiAgICBjb25zdCBuID0gcGFyc2VGbG9hdChzdHIpXG4gICAgaWYgKGlzTmFOKG4pKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHR5cGU6IGV4cGVjdCBhcmd1bWVudCB0byBiZSBhIGZsb2F0LlwiKVxuICAgIHJldHVybiBuXG4gIH0sXG4gIHRleHQ6IChzdHIpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcyA9IEpTT04ucGFyc2Uoc3RyKVxuICAgICAgaWYgKHR5cGVvZiBzID09PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4gc1xuICAgIH1cbiAgICBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gc3RyXG4gIH0sXG4gIG9iamVjdDogKHN0cikgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBvID0gSlNPTi5wYXJzZShzdHIpXG4gICAgICBpZiAodHlwZW9mIG8gPT09IFwib2JqZWN0XCIpXG4gICAgICAgIHJldHVybiBvXG4gICAgfVxuICAgIGNhdGNoIChlKSB7fVxuICAgIHRocm93IG5ldyBFcnJvcihcIkJhZCB0eXBlOiBleHBlY3QgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LlwiKVxuICB9LFxuICBib29sZWFuOiAoc3RyKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGIgPSBKU09OLnBhcnNlKHN0cilcbiAgICAgIGlmICh0eXBlb2YgYiA9PT0gXCJib29sZWFuXCIpXG4gICAgICAgIHJldHVybiBiXG4gICAgfVxuICAgIGNhdGNoIChlKSB7fVxuICAgIHRocm93IG5ldyBFcnJvcihcIkJhZCB0eXBlOiBleHBlY3QgYXJndW1lbnQgdG8gYmUgYSBib29sZWFuLlwiKVxuICB9LFxuICBhbnk6IChzdHIpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKVxuICAgIH1cbiAgICBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gc3RyXG4gIH0sXG4gIHV1aWQ6IChzdHIpID0+IHtcbiAgICBpZiAoc3RyLm1hdGNoKC9bXFxkYS1mXXs4fS1bXFxkYS1mXXs0fS00W1xcZGEtZl17M30tWzg5YWJdW1xcZGEtZl17M30tW1xcZGEtZl17MTJ9LykpXG4gICAgICByZXR1cm4gc3RyXG4gICAgZWxzZVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHR5cGU6IGV4cGVjdCBhcmd1bWVudCB0byBiZSBhbiB1dWlkLlwiKVxuICB9XG59XG5cbmxldCBjdXJyZW50QXJnc1xuXG5cbi8qKlxuICogQGNsYXNzIDxSb3V0ZT4gaWYgYSByb3V0ZSBtYXRjaGVzIGN1cnJlbnQgcGF0aCwgcmV0dXJuIGFyZ3Mgd2l0aCBnZXRBcmdzKCkuXG4gKiAgICBJZiBhcmdzIGFyZSByZXR1cm5lZCwgdGhlbiBleGVjdXRlIGdvKGFyZ3MpLlxuICovXG5cbmNsYXNzIFJvdXRlIHtcblxuICAvKipcbiAgICogQG1ldGhvZCA8Y29uc3RydWN0b3I+IHNldCBwYXRoIGFuZCBpdHMgY29udHJvbGxlciBpZiByb3V0ZSBtYXRjaFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aCBmb3JtYXQgXCIva2V5OnR5cGUva2V5Oi86dHlwZS8qXCJcbiAgICogQHBhcmFtIHt9XG4gICAqL1xuXG4gIGNvbnN0cnVjdG9yIChwYXRoLCBjb250cm9sbGVyKSB7XG4gICAgaWYgKHR5cGVvZiBwYXRoICE9PSBcInN0cmluZ1wiKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmlyc3QgcGFyYW1ldGVyIHNob3VsZCBiZSBhIHN0cmluZy5cIilcbiAgICBpZiAodHlwZW9mIGNvbnRyb2xsZXIgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlY29uZCBwYXJhbWV0ZXIgc2hvdWxkIGJlIGEgZnVuY3Rpb24uXCIpXG4gICAgdGhpcy5wYXRoID0gcGF0aFxuICAgIHRoaXMuY29udHJvbGxlciA9IGNvbnRyb2xsZXJcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgPGdvPiByZWRpcmVjdCB0byB0aGlzIGNvbnRyb2xsZXIgcGFzc2luZyBieSBVUkxcbiAgICogQHBhcmFtIHsqfSBhcmdzIG5ldyBhcmd1bWVudHMgZm9yIHRoaXMgY29udHJvbGxlciwgbWVyZ2VkIHdpdGggY3VycmVudCBhcmd1bWVudHNcbiAgICogQHJldHVybiB7Um91dGV9IHNlbGZcbiAgICovXG5cbiAgZ28gKGFyZ3MsIGZvcmNlKSB7XG4gICAgY29uc3QgcGFyYW1zID0gKHR5cGVvZiBhcmdzID09PSBcIm9iamVjdFwiKSA/IGFyZ3MgOiB7fVxuICAgIGNvbnN0IHBhdGggPSB0aGlzLmNyZWF0ZVBhdGgoT2JqZWN0LmFzc2lnbih7fSwgY3VycmVudEFyZ3MsIHBhcmFtcykpXG4gICAgaWYgKGZvcmNlICYmIHBhdGggPT09IFJvdXRlLmdldEJyb3dzZXJSZXF1ZXN0KCkpIHtcbiAgICAgIHRoaXMucnVuKGFyZ3MpXG4gICAgfSBlbHNlIHtcbiAgICAgIFJvdXRlLnNldEJyb3dzZXJSZXF1ZXN0KHBhdGgpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIDxydW4+IHJ1biB0aGlzIGNvbnRyb2xsZXIgYW55d2F5IHdpdGggdGhlc2UgYXJndW1lbnRzLlxuICAgKiBAcGFyYW0geyp9IGFyZ3MgaWYgZmFsc3ksIHRyeSB0byByZXR1cm4gcm91dGUuZ2V0QXJncygpLlxuICAgKiBAcmV0dXJuIHsqfSByZXR1cm5lZCBieSBjb250cm9sbGVyLlxuICAgKi9cblxuICBydW4gKGFyZ3MpIHtcbiAgICBjdXJyZW50QXJncyA9IGFyZ3MgfHwgdGhpcy5nZXRBcmdzKClcbiAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyKGN1cnJlbnRBcmdzKVxuICB9XG5cblxuICAvKipcbiAgICogQG1ldGhvZCA8Z2V0QXJncz4gcmV0dXJuIGFuIG9iamVjdCBvZiBjb3JyZXNwb25kaW5nIHBhcmFtZXRlcnMgaW4gYnJvd3NlclxuICAgKiAgICBwYXRoIG9yIG51bGwgb2JqZWN0IGlmIGl0IGRvZXMgbm90IG1hdGNoLlxuICAgKiBAcmV0dXJuIHtPYmplY3R8bnVsbH0gbnVsbCBpZiBpdCBkb2VzIG5vdCBtYXRjaC5cbiAgICovXG5cbiAgZ2V0QXJncyAoKSB7XG4gICAgY29uc3QgY3VycmVudCA9IFJvdXRlLmdldFJlcXVlc3RPYmplY3QoKSxcbiAgICAgIHNlbGYgPSB0aGlzLmdldFJlcXVlc3RPYmplY3QoKVxuXG4gICAgaWYgKHNlbGZbc2VsZi5sZW5ndGggLSAxXSA9PT0gXCIqXCIpIHtcbiAgICAgIGlmIChjdXJyZW50Lmxlbmd0aCA8IHNlbGYubGVuZ3RoIC0gMSkge1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudC5sZW5ndGggIT09IHNlbGYubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHJldHVybiBzZWxmLnJlZHVjZSgoYXJncywgY2h1bmssIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCB0bXAgPSBjdXJyZW50W2luZGV4XVxuICAgICAgaWYgKGFyZ3MgPT09IG51bGwpIHJldHVybiBudWxsXG4gICAgICBlbHNlIGlmIChjaHVuayA9PT0gXCIqXCIpIHJldHVybiBhcmdzXG4gICAgICBlbHNlIGlmICh0eXBlb2YgY2h1bmsgPT09IFwic3RyaW5nXCIpIHJldHVybiAoY2h1bmsgPT09IHRtcCkgPyBhcmdzIDogbnVsbFxuICAgICAgZWxzZSBpZiAodHlwZW9mIGNodW5rID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGNvbnN0IHsga2V5OiBleHBlY3RlZEtleSwgdmFsdWU6IGV4cGVjdGVkVmFsdWUsIHJlZ2V4cCwgdHlwZSB9ID0gY2h1bmtcbiAgICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSAodHlwZW9mIHRtcCA9PT0gXCJvYmplY3RcIikgPyB0bXAgOiB7IHZhbHVlOiB0bXAgfVxuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gZXhwZWN0ZWRLZXkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXJnc1tleHBlY3RlZEtleV0gPSBGT1JNQVRTW3R5cGVdKHZhbHVlKVxuICAgICAgICAgICAgICAgIHJldHVybiBhcmdzXG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlZ2V4cCkge1xuICAgICAgICAgICAgICBpZiAocmVnZXhwLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tleHBlY3RlZEtleV0gPSB2YWx1ZVxuICAgICAgICAgICAgICAgIHJldHVybiBhcmdzXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICBhcmdzW2V4cGVjdGVkS2V5XSA9IHZhbHVlXG4gICAgICAgICAgICAgIHJldHVybiBhcmdzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV4cGVjdGVkVmFsdWUpIHtcbiAgICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYXJnc1tleHBlY3RlZFZhbHVlXSA9IEZPUk1BVFNbdHlwZV0odmFsdWUpXG4gICAgICAgICAgICAgIHJldHVybiBhcmdzXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChyZWdleHApIHtcbiAgICAgICAgICAgIGlmIChyZWdleHAudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgYXJnc1tleHBlY3RlZFZhbHVlXSA9IHZhbHVlXG4gICAgICAgICAgICAgIHJldHVybiBhcmdzXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGFyZ3NbZXhwZWN0ZWRWYWx1ZV0gPSB2YWx1ZVxuICAgICAgICAgICAgcmV0dXJuIGFyZ3NcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsXG4gICAgfSwge30pXG4gIH1cblxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIDxpc01hdGNoPiByZXR1cm4gaWYgY3VycmVudCByb3V0ZSBtYXRjaGVzIGJyb3dzZXIgcGF0aFxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cblxuICBpc01hdGNoICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBcmdzKCkgIT09IG51bGxcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgPGNyZWF0ZVBhdGg+IGNyZWF0ZSBhIHBhdGggc3RyaW5nIHdpdGggYXJndW1lbnRzLCBpbiBvcmRlciB0b1xuICAgKiAgICBjcmVhdGUgYSBsaW5rIHRvIGNhbGwgdGhpcyByb3V0ZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IGFyZ3NcbiAgICogQHJldHVybiB7U3RyaW5nfSBwYXRoXG4gICAqL1xuXG4gIGNyZWF0ZVBhdGggKGFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3MgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGFyZ3MgPSB7fVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3RPYmplY3QoKS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gKGl0ZW0gPT09IFwiKlwiKSA/IFwiXCIgOiBpdGVtXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSBpdGVtXG5cbiAgICAgICAgaWYgKGtleSA9PT0gXCJcIikge1xuICAgICAgICAgIGlmIChhcmdzW3ZhbHVlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGJ1aWxkIHRoaXMgcGF0aCwgbm90IGVub3VnaCBhcmd1bWVudHMgKGV4cGVjdCBcIiR7dmFsdWV9XCIgZmllbGQpYClcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbdmFsdWVdXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICByZXR1cm4ga2V5ICsgXCI6XCIgKyAoYXJnc1trZXldID09PSB1bmRlZmluZWQgPyBcIlwiIDogYXJnc1trZXldKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5ICsgXCI6XCIgKyBKU09OLnN0cmluZ2lmeShGT1JNQVRTW3ZhbHVlXShhcmdzW2tleV0pKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBidWlsZCB0aGlzIHBhdGgsIGJhZCBmb3JtYXR0aW5nIGFyZ3VtZW50cyAoZXhwZWN0IFwiJHtrZXl9XCIgZmllbGQpYClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KS5qb2luKFwiL1wiKVxuICB9XG5cblxuICAvKipcbiAgICogQG1ldGhvZCA8Z2V0UmVxdWVzdE9iamVjdD4gdHJhbnNsYXRlcyBhIHBhdGggdG8gYW4gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgZm9ybWF0IFwiL2tleTp0eXBlL2tleTovOnR5cGUvKlwiXG4gICAqIEByZXR1cm4ge0FycmF5LjxPYmplY3QsKj59XG4gICAqL1xuXG4gIGdldFJlcXVlc3RPYmplY3QgKCkge1xuICAgIHJldHVybiB0aGlzLnBhdGguc3BsaXQoXCIvXCIpLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgY29uc3Qgc3BsaXQgPSBpdGVtLnNwbGl0KFwiOlwiKVxuXG4gICAgICBpZiAoc3BsaXQubGVuZ3RoID4gMSkge1xuICAgICAgICBsZXQga2V5ID0gc3BsaXQuc2hpZnQoKSxcbiAgICAgICAgICB2YWx1ZSA9IHNwbGl0LmpvaW4oXCI6XCIpLFxuICAgICAgICAgIHJlZ2V4cCA9IHZhbHVlLm1hdGNoKC8oW14oXSspXFwoKC4rKVxcKS8pO1xuXG4gICAgICAgIGlmIChyZWdleHApIHtcbiAgICAgICAgICBbLCB2YWx1ZSwgcmVnZXhwXSA9IHJlZ2V4cFxuICAgICAgICAgIGlmIChGT1JNQVRTW3JlZ2V4cF0pIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgIHR5cGU6IHJlZ2V4cFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICByZWdleHA6IG5ldyBSZWdFeHAocmVnZXhwKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IFwiXCIpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKEZPUk1BVFNbdmFsdWVdKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIHR5cGU6IHZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgcmVnZXhwOiBuZXcgUmVnRXhwKHZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cblxuICAvKipcbiAgICogQGZ1bmN0aW9uIDxnZXRCcm93c2VyUmVxdWVzdD4gcmV0dXJucyB0aGUgY3VycmVudCBicm93c2VyIHBhdGhcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cblxuICBzdGF0aWMgZ2V0QnJvd3NlclJlcXVlc3QgKCkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSlcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvbiA8c2V0QnJvd3NlclJlcXVlc3Q+IHNldCB0aGUgY3VycmVudCBicm93c2VyIHBhdGhcbiAgICovXG5cbiAgc3RhdGljIHNldEJyb3dzZXJSZXF1ZXN0IChzdHIpIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHN0clxuICB9XG5cblxuICAvKipcbiAgICogQGZ1bmN0aW9uIDxnZXRSZXF1ZXN0T2JqZWN0PiB0cmFuc2xhdGVzIGEgcGF0aCB0byBhbiBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBmb3JtYXQgXCIva2V5OnR5cGUva2V5Oi86dHlwZS8qXCJcbiAgICogQHJldHVybiB7QXJyYXkuPE9iamVjdCwqPn1cbiAgICovXG5cbiAgc3RhdGljIGdldFJlcXVlc3RPYmplY3QgKHVybCkge1xuICAgIGlmICh0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiKVxuICAgICAgdXJsID0gUm91dGUuZ2V0QnJvd3NlclJlcXVlc3QoKVxuXG4gICAgaWYgKCF1cmwpIHJldHVybiBbXVxuXG4gICAgcmV0dXJuIHVybC5zcGxpdChcIi9cIikubWFwKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBzcGxpdCA9IGl0ZW0uc3BsaXQoXCI6XCIpXG4gICAgICBpZiAoc3BsaXQubGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBrZXkgPSBzcGxpdC5zaGlmdCgpLFxuICAgICAgICAgIHZhbHVlID0gc3BsaXQuam9pbihcIjpcIilcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1cbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCB7IFJvdXRlIGFzIGRlZmF1bHQsIFJvdXRlLCBGT1JNQVRTIH1cbiIsImltcG9ydCBSb3V0ZSBmcm9tIFwiLi9yb3V0ZVwiXG5cbmNvbnN0IFJPVVRFUlMgPSBbXVxubGV0IGRlZmF1bHRDb250cm9sbGVyID0gbnVsbFxubGV0IGxhdW5jaGVkID0gZmFsc2Vcblxud2luZG93LnIgPSBST1VURVJTXG5cbi8qKlxuICogQGNsYXNzIDxSb3V0ZXI+IHN0b2NrIHJvdXRlcywgYWRkIHByZWZpeCBpbiB0aGVpciBwYXRocywgdGVzdHMgdGhlbSwgYW5kXG4gKiAgICBleGVjdXRlcyB0aGVpciBjb250cm9sbGVycyBpZiBvbmUgbWF0Y2hlcy5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3V0ZXIge1xuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgPGNvbnN0cnVjdG9yPiBzZXQgcHJlZml4IG9mIGVhY2ggdXJsc1xuICAgKiBAcmV0dXJuIHtSb3V0ZXJ9IHNlbGZcbiAgICovXG5cbiAgY29uc3RydWN0b3IgKGJhc2VVcmwsIGZpcnN0Q2FsbCkge1xuICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmwgfHwgXCJcIlxuICAgIHRoaXMuZmlyc3RDYWxsID0gZmlyc3RDYWxsIHx8IG51bGxcbiAgICB0aGlzLnJvdXRlcyA9IFtdXG4gICAgUk9VVEVSUy5wdXNoKHRoaXMpXG4gIH1cblxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIDxhZGQ+IGFkZCBhIHJvdXRlIGluIHRoaXMgcm91dGVyXG4gICAqIEBwYXJhbSB7Um91dGV8c3RyaW5nfSByb3V0ZSBvciBwYXRoXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnRyb2xsZXIgdG8gZXhlY3V0ZSB3aGVuIHBhdGggbWF0Y2hlc1xuICAgKiBAcmV0dXJuIHtSb3V0ZX0gY3JlYXRlZFxuICAgKi9cblxuICBhZGQgKHJvdXRlLCBjb250cm9sbGVyKSB7XG4gICAgaWYgKHR5cGVvZiByb3V0ZSA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgY29udHJvbGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByb3V0ZSA9IG5ldyBSb3V0ZSh0aGlzLmJhc2VVcmwgKyByb3V0ZSwgY29udHJvbGxlcilcbiAgICB9XG4gICAgaWYgKHJvdXRlIGluc3RhbmNlb2YgUm91dGUpIHtcbiAgICAgIHRoaXMucm91dGVzLnB1c2gocm91dGUpXG4gICAgICBpZiAobGF1bmNoZWQpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHJvdXRlLmdldEFyZ3MoKVxuICAgICAgICBpZiAoYXJncykge1xuICAgICAgICAgIHRoaXMuY2FsbEZpcnN0KClcbiAgICAgICAgICByb3V0ZS5nbyhhcmdzKVxuICAgICAgICAgIFJvdXRlci5jdXJyZW50ID0gcm91dGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcm91dGVcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBtZXRob2QgPHRlc3Q+IGVhY2ggcm91dGVzIG9mIHRoaXMgcm91dGVyIGFuZCByZXR1cm4gYSBwYXRoIGlmIGl0IG1hdGNoZXNcbiAgICogQHJldHVybiB7Um91dGV8bnVsbH0gbnVsbCBpZiBub3QgZm91bmRcbiAgICovXG5cbiAgdGVzdCAoKSB7XG4gICAgcmV0dXJuIHRoaXMucm91dGVzLmZpbmQoKHJvdXRlKSA9PiB7XG4gICAgICBjb25zdCBhcmdzID0gcm91dGUuZ2V0QXJncygpXG4gICAgICBpZiAoYXJncyAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcm91dGVcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cblxuICAvKipcbiAgICogQG1ldGhvZCA8Y2FsbEZpcnN0PiBpcyBjYWxsZWQgb25lIHRpbWUgd2hlbiBhIHJvdXRlIG9mIHRoaXMgcm91dGVyIGlzIGZvdW5kLlxuICAgKi9cblxuICBjYWxsRmlyc3QgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5maXJzdENhbGwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhpcy5maXJzdENhbGwoKVxuICAgICAgdGhpcy5maXJzdENhbGwgPSBudWxsXG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogQGZ1bmN0aW9uIDxzZXREZWZhdWx0PiBzZXQgdGhlIGNvbnRyb2xsZXIgdG8gY2FsbCB3aGVuIG5vIGFueSByb3V0ZSBmb3VuZC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY29udHJvbGxlclxuICAgKi9cblxuICBzdGF0aWMgc2V0RGVmYXVsdCAoY29udHJvbGxlcikge1xuICAgIGRlZmF1bHRDb250cm9sbGVyID0gY29udHJvbGxlclxuICB9XG5cblxuICAvKipcbiAgICogQGZ1bmN0aW9uIDxsaXN0ZW5Qb3BzdGF0ZT4gc2V0IGV2ZW50IGluIHRoZSB3aW5kb3cgdG8gdHJpZ2dlciB0aGUgcm91dGVkXG4gICAqICAgIGNvbnRyb2xsZXJcbiAgICovXG5cbiAgc3RhdGljIGxpc3RlblBvcHN0YXRlICgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIHBvcHN0YXRlKVxuICAgIGlmICghbGF1bmNoZWQpIHtcbiAgICAgIHBvcHN0YXRlKClcbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb24gPGdldEFsbD4gcmV0dXJucyBhIGxpc3Qgb2YgYWxsIHJvdXRlcyBhdmFpbGFibGVcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuXG4gIHN0YXRpYyBnZXRBbGwgKCkge1xuICAgIGNvbnN0IGxpc3QgPSBST1VURVJTLm1hcCgocm91dGVyKSA9PiB7XG4gICAgICByZXR1cm4gcm91dGVyLnJvdXRlcy5tYXAoKHJvdXRlKSA9PiB7XG4gICAgICAgIHJldHVybiByb3V0ZS5wYXRoXG4gICAgICB9KVxuICAgIH0pLmZsYXQoKVxuICAgIGlmIChkZWZhdWx0Q29udHJvbGxlcikge1xuICAgICAgbGlzdC51bnNoaWZ0KFwiKlwiKVxuICAgIH1cbiAgICByZXR1cm4gbGlzdFxuICB9XG59XG5cblxuLyoqXG4gKiBAZnVuY3Rpb24gPHBvcHN0YXRlPiBpcyB0cmlnZ2VyZWQgd2hlbiBwYWdlIGlzIGxvYWRlZCBvciBuYXZpZ2F0aW9uIGNoYW5nZXMuXG4gKiBBbHNvIHNldHMgUm91dGVyLmN1cnJlbnQgaWYgYSBSb3V0ZSBpcyBmb3VuZCwgZWxzZSBzZXRzIGRlZmF1bHQgY29udHJvbGxlclxuICogaWYgaXQgZXhpc3RzLlxuICovXG5cbmZ1bmN0aW9uIHBvcHN0YXRlICgpIHtcbiAgbGF1bmNoZWQgPSB0cnVlXG4gIGxldCByb3V0ZSwgZm91bmRcbiAgUk9VVEVSUy5mb3JFYWNoKChyb3V0ZXIpID0+IHtcbiAgICBpZiAoIXJvdXRlKSB7XG4gICAgICByb3V0ZSA9IHJvdXRlci50ZXN0KClcbiAgICAgIGZvdW5kID0gcm91dGVyXG4gICAgfVxuICB9KVxuICBpZiAocm91dGUpIHtcbiAgICBmb3VuZC5jYWxsRmlyc3QoKVxuICAgIHJvdXRlLnJ1bigpXG4gICAgUm91dGVyLmN1cnJlbnQgPSByb3V0ZVxuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZhdWx0Q29udHJvbGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZGVmYXVsdENvbnRyb2xsZXIoKVxuICB9XG59XG4iXSwicHJlRXhpc3RpbmdDb21tZW50IjoiLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSmpiMjVtYVdjdmQybHVaRzkzWldRdWFuTWlMQ0pwYm1SbGVDNXFjeUlzSW14cFluTXZiR0Y1YjNWMEwyTnZiWEJ2Ym1WdWRDNXFjeUlzSW14cFluTXZiR0Y1YjNWMEwyUmxabWx1WlM1cWN5SXNJbXhwWW5NdmJHRjViM1YwTDNCaFoyVXVhbk1pTENKc2FXSnpMMnhoZVc5MWRDOXpaV04wYVc5dUxtcHpJaXdpYkdsaWN5OXlaWEYxWlhOMEwyRnFZWGd1YW5NaUxDSnNhV0p6TDNKbGNYVmxjM1F2Y21WemIzVnlZMlV1YW5NaUxDSnNhV0p6TDNKdmRYUmxjaTl5YjNWMFpTNXFjeUlzSW14cFluTXZjbTkxZEdWeUwzSnZkWFJsY2k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRoUTBGQkxIVkVMSGRGUVVOQkxFMUJRVTBzUTBGQlF5eFBRVUZRTEVOQlFXbENMR2xDT3pzN2MyMUVRMVZxUWl4UlFVRlRMRU5CUVVFc1NVRkJWQ3hEUVVGbExFTkJRV1lzUTBGQmNVSXNRMEZEUXl4VlFVRm9RaXhSUVVGUExFTkJRVUVzUTBGRVVTeEhRVVZYTEZWQlFYaENMRWRCUVVFc1VVRkJVU3hEUVVGRExGVkJSa2tzUTBGSFppeERRVUZKTEVWQlNGY3NRMEZMWml4TlFVRk5MRU5CUVVNc1owSkJRVkFzUTBGQmQwSXNUVUZCZUVJc1EwRkJaME1zUTBGQmFFTXNRMEZNWlN4RFFWRndRaXhEUVVWRUxGRkJRVk1zUTBGQlFTeFBRVUZVTEVOQlFXdENMRU5CUVd4Q0xFTkJRWGRDTEVOQlEwMHNWVUZCZUVJc1IwRkJRU3hSUVVGUkxFTkJRVU1zVlVGRVV5eEZRVVZ3UWl4cFFrRkJTeXhaUVVGTUxFVkJSbTlDTEVOQlIzQkNMRzFDUVVGUExHTkJRVkFzUlVGSWIwSXNRMEZKUVN4VlFVRm9RaXhSUVVGUExFTkJRVUVzUTBGS1V5eEZRVXRzUWl4RFFVRkpMRVZCVEdNc1JVRlJjRUlzVFVGQlRTeERRVUZETEdkQ1FVRlFMRU5CUVhkQ0xFMUJRWGhDTEVOQlFXZERMRlZCUVUwc1EwRkRjRU1zYVVKQlFVc3NXVUZCVEN4RlFVUnZReXhEUVVWd1F5eHRRa0ZCVHl4alFVRlFMRVZCUm05RExFTkJSMmhDTEZWQlFXaENMRkZCUVU4c1EwRkJRU3hEUVVoNVFpeEZRVWxzUXl4RFFVRkpMRVZCUlZBc1EwRk9SQ3hEUVZGSUxFTkJSVVFzUjBGQlRTeERRVUZCTEU5QlFVOHNRMEZCUnl4RFFVTmtMRk5CUVZNc1EwRkJWQ3h4UWtGRVl5eERRVVZrTEU5QlFVOHNRMEZCVUN4dFFrRkdZeXhEUVVka0xFbEJRVWtzUTBGQlNpeG5Ra0ZJWXl4RFFVbGtMRTFCUVUwc1EwRkJUaXhqUVVwakxFTkJTMlFzYVVKQlFXbENMRU5CUVdwQ0xIbENRVXhqTEVOQlQyUXNTVUZCU1N4RFFVRktMR2RDUVZCakxFTkJVV1FzVVVGQlVTeERRVUZTTEc5Q1FWSmpMRU5CVldRc1RVRkJUU3hEUVVGT0xHdENRVlpqTEVOQlYyUXNTMEZCU3l4RFFVRk1MR2xDUVZoakxFTkJZV1FzU1VGQlNTeERRVUZLTEVsQlltTXNRMEZqWkN4UFFVRlBMRU5CUVZBc1QwRmtZeXhEUVVGb1FpeERPenM3YlhoRVEzWkRRU3hSUVVGVExFTkJRVUVzVTBGQlZDeERRVUZ2UWl4RFFVRndRaXhEUVVGM1FpeERRVUY0UWl4RFFVRTRRaXhEUVVFNVFpeERRVUZ2UXl4UFFVTTVRaXhEUVVGQkxFTkJRVVVzVjBGQldTeERRVUZCTEZkQlJHZENMRU5CUlhwQ0xFTkJSbmxDTEVOQlNWZ3NVVUZCWkN4UlFVRlBMRU5CUVVFc1EwRkthMElzUTBGTGVrSXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhoUVVGVUxFTkJRWFZDTEVOQlFYWkNMRU5CUVVRc1EwRkJOa0lzUTBGQk4wSXNRMEZCYlVNc1EwRkJia01zUTBGTVowSXNRMEZQV0N4VlFVRmtMRkZCUVU4c1EwRkJRU3hEUVZCclFpeERRVkY2UWl4VFFVRlRMRU5CUVVNc1EwRkJSU3hEUVVGRExFdEJRVWdzUTBGQlV5eERRVUZVTEVOQlFXVXNRMEZCWml4RFFVRkVMRU5CUVhWQ0xFTkJRWFpDTEVOQlFUWkNMRU5CUVRkQ0xFTkJVbWRDTEVOQlYzcENMRWxCUlZZc1EwRkZSQ3hSUVVGVExFTkJRVUVzVVVGQlZDeERRVUZ0UWl4RFFVRnVRaXhEUVVGMVFpeERRVUYyUWl4RFFVRTJRaXhEUVVFM1FpeERRVUZ0UXl4RFFVTnFReXhIUVVGSkxFTkJRVVVzVjBGQldTeERRVUZCTEZkQlFXeENMRU5CUTBVc1RVRkJUeXhEUVVGQkxFTkJRVkFzUTBGRlJ5eEhRVUZyUWl4VlFVRmtMRkZCUVU4c1EwRkJRU3hEUVVGWUxFTkJRMGdzVFVGQlR5eERRVUZCTEZGQlFWRXNRMEZCUXl4RFFVRkZMRU5CUVVNc1MwRkJTQ3hEUVVGVExFTkJRVlFzUTBGQlpTeERRVUZtTEVOQlFVUXNRMEZCZFVJc1EwRkJka0lzUTBGQk5rSXNRMEZCTjBJc1EwRkJaaXhEUVVkQkxFZEJRVTBzUTBGQlFTeERRVUZITEVOQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVZRc1EwRkJkVUlzUzBGQmRrSXNRMEZCV2l4RFFVdEJMRTFCU2tFc1EwRkJRU3hEUVVGSExFTkJRVU1zV1VGQlNpeERRVUZwUWl4WFFVRnFRaXhEUVVFNFFpeERRVUZKTEVOQlFVTXNWMEZCVEN4RFFVRnBRaXhKUVVFdlF5eERRVWxCTEVOQlNHdENMRkZCUVdRc1VVRkJUeXhEUVVGQkxFTkJSMWdzUjBGR1JTeERRVUZITEVOQlFVTXNVMEZCU2l4RFFVRm5RaXhEUVVWc1FpeEZRVUZQTEVOQlJWWXNRMEZGUkN4UlFVRlRMRU5CUVVFc1VVRkJWQ3hEUVVGdFFpeERRVUZ1UWl4RFFVRjFRaXhEUVVGMlFpeERRVUUyUWl4RFFVRTNRaXhEUVVGdFF5eERRVU5xUXl4SFFVRk5MRU5CUVVFc1EwRkJTU3hEUVVGSExFTkJRVWtzUTBGQlF5eFJRVUZzUWl4RFFVTkJMRWRCUVd0Q0xGVkJRV1FzVVVGQlR5eERRVUZCTEVOQlFWZ3NRMEZEUlN4TlFVRlBMRU5CUVVFc1VVRkJVU3hEUVVGRExFTkJRVVVzUTBGQlF5eExRVUZJTEVOQlFWTXNRMEZCVkN4RFFVRmxMRU5CUVdZc1EwRkJSQ3hEUVVGMVFpeERRVUYyUWl4RFFVRTJRaXhEUVVFM1FpeERRVUZtTEVOQlJVY3NSMEZCYlVJc1VVRkJaQ3hYUVVGUExFTkJRVkFzUTBGQlJDeEZRVUU0UWl4RFFVRkVMRmRCUVd0Q0xFTkJRVUVzVjBGQmJrUXNRMEZCYVVVc1EwRkRjRVVzUjBGQlRTeERRVUZCTEVOQlFVMHNRMEZCUnl4RlFVRm1MRU5CV1VFc1RVRllRU3hEUVVGQkxFMUJRVTBzUTBGQlF5eEpRVUZRTEVOQlFWa3NRMEZCV2l4RlFVRm5RaXhQUVVGb1FpeERRVUYzUWl4VFFVRkRMRU5CUVVRc1EwRkJWU3hEUVVNMVFpeERRVUZGTEVOQlFVTXNRMEZCUkN4RFFVRkdMRlZCUVc5Q0xFTkJRVUVzVjBGRVVTeEhRVVU1UWl4RFFVRk5MRU5CUVVNc1EwRkJSQ3hEUVVGT0xFTkJRV1VzUTBGQlF5eERRVUZGTEVOQlFVTXNRMEZCUkN4RFFVRklMRU5CUm1Vc1JVRkpVaXhSUVVGd1FpeFJRVUZQTEVOQlFVRXNRMEZCUlN4RFFVRkRMRU5CUVVRc1EwRktiVUlzUTBGTE9VSXNRMEZCVFN4RFFVRkRMRU5CUVVRc1EwRkJUaXh2UWtGQmJVSXNRMEZCU1N4RFFVRkRMR2RDUVVGTUxFTkJRWE5DTEVOQlFVVXNRMEZCUXl4RFFVRkVMRU5CUVhoQ0xFTkJRVzVDTEVOQlREaENMRU5CVDNaQ0xFTkJRVVVzUTBGQlF5eERRVUZFTEVOQlFVWXNSVUZCV1N4RFFVRkZMRU5CUVVNc1EwRkJSQ3hEUVVGR0xFTkJRVk1zVDBGUVJTeEhRVkU1UWl4RFFVRk5MRU5CUVVNc1EwRkJSQ3hEUVVGT0xFTkJRV1VzUTBGQlJTeERRVUZETEVOQlFVUXNRMEZTWVN4RFFWVnFReXhEUVZaRUxFTkJWMEVzUTBGQlR5eERRVU5TTEVOQlJVTXNUVUZCVHl4RlFVVldMRU5CUlVRc1VVRkJVeXhEUVVGQkxFMUJRVlFzUTBGQmFVSXNRMEZCYWtJc1EwRkJjVUlzUTBGQmNrSXNRMEZCTWtJc1EwRkJNMElzUTBGQmFVTXNPRUpCUTJJc1ZVRkJaQ3hSUVVGUExFTkJRVUVzUTBGRWIwSXNRMEZGZEVJc1RVRkJUU3hEUVVGRExFTkJRVVVzUTBGQlF5eExRVUZJTEVOQlFWTXNRMEZCVkN4RFFVRmxMRU5CUVdZc1EwRkJSQ3hEUVVGMVFpeERRVUYyUWl4RFFVRTJRaXhEUVVFM1FpeERRVVpuUWl4TlFVbFNMRkZCUVdRc1YwRkJUeXhEUVVGUUxFTkJTbk5DTEVWQlN6ZENMRTFCUVUwc1EwRkJReXhKUVVGUUxFTkJRVmtzUTBGQldpeEZRVUZuUWl4UFFVRm9RaXhEUVVGM1FpeFRRVUZETEVOQlFVUXNRMEZCVlN4RFFVTm9ReXhIUVVGTkxFTkJRVUVzUTBGQlN5eERRVUZITEVOQlFVa3NRMEZCUXl4TFFVRk1MRU5CUVZjc1IwRkJXQ3hEUVVGa0xFTkJRMEVzUjBGQmVVSXNVVUZCY0VJc1VVRkJUeXhEUVVGQkxFTkJRVVVzUTBGQlF5eERRVUZFTEVOQlFWWXNSVUZCYTBRc1EwRkJaaXhEUVVGQkxFTkJRVXNzUTBGQlF5eE5RVUUzUXl4RFFVRXdSQ3hKUVVOc1JDeERRVUZCTEVOQlFVY3NRMEZCUnl4RFFVRkxMRU5CUVVNc1IwRkJUaXhGUVVRMFF5eERRVVZzUkN4RFFVRlRMRU5CUVVjc1EwRkJTeXhEUVVGRExFbEJRVTRzUTBGQlZ5eEhRVUZZTEVOQlJuTkRMRU5CUjNoRUxFTkJRVVVzUTBGQlF5eERRVUZFTEVOQlFVWXNRMEZCVXl4TFFVRlVMRU5CUVdVc1IwRkJaaXhGUVVGdlFpeFBRVUZ3UWl4RFFVRTBRaXhUUVVGRExFTkJRVVFzUTBGQldTeERRVU4wUXl4RFFVRkhMRU5CUVVNc1MwRkJTaXhEUVVGVkxFZEJRVllzUlVGQlpTeFBRVUZtTEVOQlFYVkNMRk5CUVVNc1EwRkJSQ3hEUVVGbExFTkJRM0JETEVOQlFWTXNRMEZCUXl4TFFVRldMRU5CUVdkQ0xFZEJRV2hDTEVWQlFYRkNMRTlCUVhKQ0xFTkJRVFpDTEZOQlFVTXNRMEZCUkN4RFFVRmpMRWxCUTNKRExFTkJRVUVzUTBGRWNVTXNRMEZGYmtNc1EwRkJSU3hEUVVGSExGVkJRVTBzUTBGRFppeERRVUZKTEVOQlFVTXNRMEZCUkN4RFFVRktMRU5CUVdFc1MwRkJZaXhEUVVGdFFpeERRVUZ1UWl4RFFVRjVRaXhEUVVGNlFpeERRVU5FTEVOQlNuZERMRU5CUzNKRExFTkJRVk1zUlVGQk5rSXNWVUZCZUVJc1VVRkJUeXhEUVVGQkxFTkJRVWtzUTBGQlF5eERRVUZFTEVOQlRGa3NSMEZOYmtNc1EwRkJReXhEUVVGSkxFTkJRVWNzUTBGQlNTeERRVUZETEZGQlFVd3NRMEZCWXl4RFFVRmtMRU5CUVZJc1YwRkJORU1zUTBGQlFTeFhRVTVVTEVOQlQzSkRMRU5CUVVrc1EwRkJReXhuUWtGQlRDeERRVUZ6UWl4RFFVRjBRaXhEUVVGcFF5eERRVUZxUXl4RFFWQnhReXhEUVZNNVFpeERRVUZKTEVWQlFVa3NRMEZCU1N4RFFVRkRMRTlCVkdsQ0xFTkJWWEpETEVOQlFVa3NRMEZCUXl4UFFVRk1MRU5CUVdFc1UwRkJReXhEUVVGRUxFTkJRVThzUTBGRGJFSXNRMEZCUXl4RFFVRkRMR2RDUVVGR0xFTkJRVzFDTEVOQlFXNUNMRU5CUVRoQ0xFTkJRVGxDTEVOQlEwUXNRMEZHUkN4RFFWWnhReXhEUVdNNVFpeERRVUZKTEVOQlFVTXNVVUZCVEN4SFFVRnJRaXhEUVVGSkxFTkJRVWNzUTBGQlNTeERRVUZETEZGQlFVd3NRMEZCWXl4aFFVRmtMRU5CUVRSQ0xFTkJRVFZDTEVOQlFYcENMRU5CWkRoQ0xFVkJaWEpETEVOQlFVa3NRMEZCUXl4blFrRkJUQ3hEUVVGelFpeERRVUYwUWl4RFFVRnBReXhEUVVGcVF5eERRV1p4UXl4RFFXdENNVU1zUTBGc1FrUXNRMEZ0UWtRc1EwRndRa1FzUTBGeFFrUXNRMEYwUWtRc1EwRjFRa1FzUTBFeFFrUXNTVUV5UWtzc1NVRkJkMElzVVVGQmNFSXNWMEZCVHl4RFFVRkZMRU5CUVVNc1EwRkJSQ3hEUVVGVUxFTkJRVW9zUTBGQmEwTXNRMEZEY2tNc1IwRkJUU3hEUVVGQkxFTkJRVk1zUTBGQlJ5eERRVUZMTEVOQlFVTXNTVUZCVGl4RFFVRlhMRWRCUVZnc1EwRkJiRUlzUTBGRFFTeE5RVUZOTEVOQlFVTXNTVUZCVUN4RFFVRlpMRU5CUVVVc1EwRkJReXhEUVVGRUxFTkJRV1FzUlVGQmMwSXNUMEZCZEVJc1EwRkJPRUlzVTBGQlF5eERRVUZFTEVOQlFWTXNRMEZEY2tNc1IwRkJUU3hEUVVGQkxFTkJRVTBzUTBGQlJ5eERRVUZGTEVOQlFVTXNRMEZCUkN4RFFVRkdMRU5CUVZNc1EwRkJWQ3hEUVVGbUxFTkJRM05DTEZGQlFXeENMRkZCUVU4c1EwRkJRU3hEUVVZd1FpeEZRVWR1UXl4RFFVRkhMRU5CUVVNc1MwRkJTaXhEUVVGVkxFZEJRVllzUlVGQlpTeFBRVUZtTEVOQlFYVkNMRk5CUVVNc1EwRkJSQ3hEUVVGbExFTkJRM0JETEVOQlFWTXNRMEZCUXl4TFFVRldMRU5CUVdkQ0xFZEJRV2hDTEVWQlFYRkNMRTlCUVhKQ0xFTkJRVFpDTEZOQlFVTXNRMEZCUkN4RFFVRmpMRWxCUTNKRExFTkJRVUVzUTBGRWNVTXNRMEZGYmtNc1EwRkJSU3hEUVVGSExGVkJRVTBzUTBGRFppeEhRVUZOTEVOQlFVRXNRMEZCU3l4dlFrRkJUeXhEUVVGUUxFTkJRVmdzUTBGRFFTeERRVUZMTEVOQlFVTXNUMEZCVGl4RFFVRmpMRU5CUVdRc1EwRkdaU3hEUVVkbUxFTkJRVWtzUTBGQlF5eERRVUZFTEVOQlFVb3NRMEZCWVN4TFFVRmlMRU5CUVcxQ0xFTkJRVzVDTEVOQlFYbENMRU5CUVhwQ0xFTkJRMFFzUTBGT2QwTXNRMEZQY2tNc1EwRkJVeXhGUVVFMlFpeFZRVUY0UWl4UlFVRlBMRU5CUVVFc1EwRkJTU3hEUVVGRExFTkJRVVFzUTBGUVdTeEhRVkZ1UXl4RFFVRkRMRU5CUVVrc1EwRkJSeXhEUVVGSkxFTkJRVU1zVVVGQlRDeERRVUZqTEVOQlFXUXNRMEZCVWl4WFFVRTBReXhEUVVGQkxGZEJVbFFzUTBGVGNrTXNRMEZCU1N4RFFVRkRMR2RDUVVGTUxFTkJRWE5DTEVOQlFYUkNMRU5CUVdsRExFTkJRV3BETEVOQlZIRkRMRU5CVnpsQ0xFTkJRVWtzUlVGQlNTeERRVUZKTEVOQlFVTXNUMEZZYVVJc1EwRlpja01zUTBGQlNTeERRVUZETEU5QlFVd3NRMEZCWVN4VFFVRkRMRU5CUVVRc1EwRkJUeXhEUVVOc1FpeERRVUZETEVOQlFVTXNaMEpCUVVZc1EwRkJiVUlzUTBGQmJrSXNRMEZCT0VJc1EwRkJPVUlzUTBGRFJDeERRVVpFTEVOQlduRkRMRU5CWjBJNVFpeERRVUZKTEVOQlFVTXNVVUZCVEN4SFFVRnJRaXhEUVVGSkxFTkJRVWNzUTBGQlNTeERRVUZETEZGQlFVd3NRMEZCWXl4aFFVRmtMRU5CUVRSQ0xFTkJRVFZDTEVOQlFYcENMRU5CYUVJNFFpeEZRV2xDY2tNc1EwRkJTU3hEUVVGRExHZENRVUZNTEVOQlFYTkNMRU5CUVhSQ0xFTkJRV2xETEVOQlFXcERMRU5CYWtKeFF5eERRVzlDTVVNc1EwRndRa1FzUTBGeFFrUXNRMEYwUWtRc1EwRjNRa2dzUTBFelFrUXNRMEUwUWtRc1EwRkRSaXhEUVRWRVJDeERRVXcyUWl4RFFXMUZhRU1zUXl4SFFWRnZRaXhEUVVGQkxGTXNXVUZUYmtJc1dVRkJaU3g1UWtGRFlpeE5RVUZOTEVOQlFVTXNZMEZCVUN4RFFVRnpRaXhKUVVGMFFpeERRVUUwUWl4VlFVRTFRaXhEUVVGM1F5eERRVU4wUXl4aFFVUnpReXhEUVVWMFF5eGxRVVp6UXl4RFFVZDBReXhOUVVGVExFTkJRMUFzVVVGQlVTeERRVUZGTEV0QlFVc3NVVUZFVWl4RFFVVlFMRkZCUVZFc1EwRkJSU3hMUVVGTExGRkJSbElzUTBGSFVDeE5RVUZOTEVOQlFVVXNTMEZCU3l4TlFVaE9MRU5CU0RaQ0xFTkJRWGhETEVOQlJHRXNRMEZYWWl4TlFVRk5MRU5CUVVNc1kwRkJVQ3hEUVVGelFpeEpRVUYwUWl4RFFVRTBRaXhaUVVFMVFpeERRVUV3UXl4RFFVTjRReXhoUVVSM1F5eERRVVY0UXl4bFFVWjNReXhEUVVkNFF5eE5RVUZUTEVWQlNDdENMRU5CUVRGRExFTkJXR0VzUTBGcFFtSXNTMEZCU3l4WFFVRk1MR0ZCUVhGQ0xFbEJRWEpDTEc5RFFVRTRRaXhUUVVFNVFpeEhRVU5FTEVNc2MwVkJWMk1zYTBOQlEyTXNVMEZFWkN4RlFVTk9MRU5CUkUwc1RVRkRSU3hEUVVSR0xGbEJSVmdzUTBGR1Z5eERRVVZNTEZGQlFWRXNRMEZCUXl4RFFVRkhMRVZCUVVrc1MwRkJTeXhSUVVGTUxFTkJRV01zVVVGQmRFSXNRMEZCWjBNc1NVRkJhRU1zUTBGQmMwTXNRMEZCZEVNc1EwRkdTQ3hEUVZGaUxFMUJURWtzUTBGQlFTeERRVUZITEZkQlFWa3NRMEZCUVN4WFFVdHVRaXhIUVVwRkxFdEJRVXNzVVVGQlRDeERRVUZuUWl4RFFVbHNRaXhEUVVoRkxFdEJRVXNzVVVGQlRDeERRVUZuUWl4UlFVRlJMRU5CUVVNc1MwRkJTeXhSUVVGTUxFTkJRV01zVVVGQlppeERRVUY1UWl4SlFVRjZRaXhEUVVFclFpeERRVUV2UWl4RFFVY3hRaXhEUVVaRkxFMUJRVTBzUTBGQlF5eExRVUZMTEZGQlFVd3NRMEZCWXl4TlFVRm1MRU5CUVhWQ0xFbEJRWFpDTEVOQlFUWkNMRU5CUVRkQ0xFTkJSVklzUlVGQlR5eEpRVU5TTEVNc2EwUkJWV0VzUXl4RFFVRlRMRU5CUTNKQ0xFZEJRVTBzUTBGQlFTeERRVUZKTEVOQlFVY3NVMEZCVXl4RFFVRkRMRU5CUVVRc1EwRkJWU3hKUVVGV0xFTkJRV2RDTEZOQlFXaENMRU5CUVhSQ0xFTkJUMEVzVFVGT1NTeERRVUZCTEVOQlFVa3NWMEZCV1N4RFFVRkJMRmRCVFhCQ0xFZEJURVVzUzBGQlN5eFRRVUZNTEVOQlFXbENMRU5CUzI1Q0xFTkJTazBzUzBGQlN5eFJRVUZNTEZkQlFYbENMRU5CUVVFc1YwRkpMMElzUlVGSVNTeExRVUZMTEZOQlFVd3NRMEZCWlN4WFFVRm1MRU5CUVRKQ0xFdEJRVXNzVVVGQmFFTXNRMEZIU2l4RlFVRlBMRWxCUTFJc1F5eHJSRUZaWVN4RExFTkJRVTBzVTBGRFpDeERRVVJqTEVOQlJXeENMRWRCUVVrc1MwRkJTeXhSUVVGTUxFTkJRV01zUTBGQlpDeE5RVUZ2UXl4TFFVRkxMRkZCUVV3c1EwRkJZeXhEUVVGa0xFTkJRWEJETEhWQ1FVRjVRaXhEUVVGNlFpeFJRVUZLTEVOQlFUaEVMRTFCUTNKRUxFTkJRVThzUTBGQlF5eFZRVVEyUXl4RlFVVXhSQ3hEUVVGUExFTkJRVU1zVjBGQlVpeERRVUZ2UWl4RFFVRlBMRU5CUVVNc1ZVRkJOVUlzUlVGRFJpeE5RVUZQTEV0QlExSXNRMEZGUXl4TFFVRk5MRWxCUVVrc1EwRkJRU3hMUVVGS0xIRkNRVUZ6UWl4RFFVRjBRaXd5UTBGRlZDeERMSGRFUVZsblFpeERMRU5CUVUwc1F5eERRVUZYTEZOQlF6VkNMRU5CUkRSQ0xFTkJSV2hETEVkQlFVa3NTMEZCU3l4UlFVRk1MRU5CUVdNc1EwRkJaQ3hOUVVGdlF5eExRVUZMTEZGQlFVd3NRMEZCWXl4RFFVRmtMRU5CUVhCRExIVkNRVUY1UWl4RFFVRjZRaXhSUVVGS0xFTkJRVGhFTEVOQlF6VkVMRWRCUVVrc1EwRkJVeXhYUVVGWkxFTkJRVUVzUTBGQmVrSXNRMEZGUlN4TlFVUkJMRU5CUVVFc1EwRkJVeXhEUVVGRExGbEJRVllzUTBGQmRVSXNRMEZCZGtJc1EwRkRRU3hEUVVGUExFbEJRVkFzUTBGSFFTeExRVUZOTEVsQlFVa3NRMEZCUVN4TFFVRktMRU5CUVZVc05FTkJRVllzUTBGRlZDeERRVkpFTEVsQlZVVXNUVUZCVFN4SlFVRkpMRU5CUVVFc1MwRkJTaXh4UWtGQmMwSXNRMEZCZEVJc01rTkJSVlFzUXl4dlJFRmhZeXhETEVOQlFVMHNReXhEUVVGWExFTkJRemxDTEUxQlFVOHNUVUZCU3l4WlFVRk1MRU5CUVd0Q0xFTkJRV3hDTEVWQlFYZENMR1ZCUVhoQ0xFTkJRWGRETEVOQlFYaERMRU5CUVRoRExFTkJRVGxETEVOQlExSXNReXhyUTBGWlZ5eERRVU5XTEUxQlFVOHNSVUZEVWl4RExHdERRVmxYTEVOQlExWXNUVUZCVHl4RlFVTlNMRU1zWjBOQlYxTXNRMEZEVWl4TlFVRlBMRVZCUTFJc1F5eHpRMEZoVHl4RExFTkJRVmNzUXl4RFFVRkpMRU5CUTNKQ0xFZEJRVTBzUTBGQlFTeERRVUZKTEVOQlFVY3NTVUZCWWl4RFFVTkJMRWRCUVhsQ0xGRkJRWEpDTEZGQlFVOHNRMEZCUVN4RFFVRllMRU5CUVcxRExFTkJRMnBETEVkQlFVMHNRMEZCUVN4RFFVRkRMRU5CUVVjc1EwRkJVeXhEUVVGRExFdEJRVllzUTBGQlowSXNWMEZCYUVJc1EwRkJWaXhEUVVOQkxFZEJRV1VzUTBGQldDeERRVUZCTEVOQlFVTXNRMEZCUXl4TlFVRk9MRU5CUTBVc1RVRkJUeXhOUVVGTExFMUJRVXdzYjBKQlFXZENMRU5CUVdoQ0xFVkJRVzlDTEVOQlFYQkNMRU5CUlZZc1EwRk1SQ3hKUVUxTExFbEJRVWtzUzBGQlN5eERRVUZETEU5QlFVNHNRMEZCWXl4RFFVRmtMRU5CUVVvc1EwRkpTQ3hOUVVoQkxFTkJRVUVzUTBGQlV5eERRVUZETEU5QlFWWXNRMEZCYTBJc1UwRkJReXhEUVVGRUxFTkJRVkVzUTBGRGVFSXNRMEZCU1N4RFFVRkRMRTFCUVV3c1EwRkJXU3hEUVVGYUxFTkJRV2RDTEVOQlFXaENMRU5CUTBRc1EwRkdSQ3hEUVVkQkxFTkJRVThzU1VGQlVDeERRVVZHTEVkQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU0c1EwRkJZeXhEUVVGa0xFTkJRVW9zUTBGSlJTeE5RVWhCTEVOQlFVRXNRMEZCUlN4RFFVRkRMRTlCUVVnc1EwRkJWeXhUUVVGRExFTkJRVVFzUTBGQlR5eERRVU5vUWl4RFFVRkpMRU5CUVVNc1RVRkJUQ3hEUVVGWkxFTkJRVm9zUTBGQmRVSXNRMEZCZGtJc1EwRkRSQ3hEUVVaRUxFTkJSMEVzUTBGQlR5eEpRVUZRTEVOQlIwWXNSMEZCYTBJc1ZVRkJaQ3hSUVVGUExFTkJRVUVzUTBGQldDeERRVUU0UWl4RFFVTTFRaXhIUVVGTkxFTkJRVUVzUTBGQlJ5eERRVUZITEdWQlFWb3NRMEZEU3l4TFFVRkxMRU5CUVVNc1QwRkJUaXhEUVVGakxFTkJRVWNzUTBGQlF5eERRVUZFTEVOQlFXcENMRU5CUm5WQ0xFZEJSekZDTEVOQlFVY3NRMEZCUXl4RFFVRkVMRU5CUVVnc1EwRkJhVUlzUlVGSVV5eEZRVXMxUWl4RFFVRkhMRU5CUVVNc1EwRkJSQ3hEUVVGSUxFTkJRV1VzU1VGQlppeERRVUZ2UWl4RFFVRndRaXhEUVVORUxFTkJRMFFzVFVGQlR5eExRVU5TTEVNc01FTkJWMU1zUXl4RFFVRlhMRU1zUTBGQlRTeERRVU42UWl4SFFVRk5MRU5CUVVFc1EwRkJTU3hEUVVGSExFbEJRV0lzUTBGRFFTeEhRVUY1UWl4UlFVRnlRaXhSUVVGUExFTkJRVUVzUTBGQldDeERRVUZ0UXl4RFFVTnFReXhIUVVGTkxFTkJRVUVzUTBGQlF5eERRVUZITEVOQlFWTXNRMEZCUXl4TFFVRldMRU5CUVdkQ0xGZEJRV2hDTEVOQlFWWXNRMEZEUVN4SFFVRmxMRU5CUVZnc1EwRkJRU3hEUVVGRExFTkJRVU1zVFVGQlRpeERRVU5GTEUxQlFVOHNUVUZCU3l4TlFVRk1MRzlDUVVGblFpeERRVUZvUWl4RlFVRnZRaXhEUVVGd1FpeERRVVZXTEVOQlRFUXNTVUZOU3l4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGT0xFTkJRV01zUTBGQlpDeERRVUZLTEVOQlNVZ3NUVUZJUVN4RFFVRkJMRU5CUVZNc1EwRkJReXhQUVVGV0xFTkJRV3RDTEZOQlFVTXNRMEZCUkN4RFFVRlJMRU5CUTNoQ0xFTkJRVWtzUTBGQlF5eE5RVUZNTEVOQlFWa3NRMEZCV2l4RFFVRm5RaXhEUVVGb1FpeERRVU5FTEVOQlJrUXNRMEZIUVN4RFFVRlBMRWxCUVZBc1EwRkhSaXhIUVVGTkxFTkJRVUVzUTBGQlJ5eERRVUZITEdWQlFWb3NRMEZaUVN4TlFWaExMRU5CUVVFc1MwRkJTeXhEUVVGRExFOUJRVTRzUTBGQll5eERRVUZITEVOQlFVTXNRMEZCUkN4RFFVRnFRaXhEUVZkTUxFZEJWa1VzUTBGQlJ5eERRVUZETEVOQlFVUXNRMEZCU0N4RFFVRnBRaXhGUVZWdVFpeEZRVkpCTEVOQlFVY3NRMEZCUXl4RFFVRkVMRU5CUVVnc1EwRkJaU3hQUVVGbUxFTkJRWFZDTEZOQlFVTXNRMEZCUkN4RFFVRlJMRU5CUTNwQ0xFdEJRVXNzUTBGQlF5eFBRVUZPTEVOQlFXTXNRMEZCWkN4RFFVUjVRaXhEUVVVelFpeERRVUZGTEVOQlFVTXNTMEZCU0N4RFFVRlRMRWxCUVZRc1EwRkJaU3hEUVVGbUxFTkJSakpDTEVOQlN6TkNMRU5CUVVVc1JVRkZUQ3hEUVZCRUxFTkJVVUVzUTBGQlR5eEpRVU5TTEVNc2MwTkJWMDhzUXl4RFFVRlhMRU1zUTBGQlNTeERRVU55UWl4SFFVRk5MRU5CUVVFc1EwRkJTU3hEUVVGSExFbEJRV0lzUTBGRFFTeEhRVUY1UWl4UlFVRnlRaXhSUVVGUExFTkJRVUVzUTBGQldDeERRVUZ0UXl4RFFVTnFReXhIUVVGTkxFTkJRVUVzUTBGQlF5eERRVUZITEVOQlFWTXNRMEZCUXl4TFFVRldMRU5CUVdkQ0xGZEJRV2hDTEVOQlFWWXNRMEZEUVN4SFFVRmxMRU5CUVZnc1EwRkJRU3hEUVVGRExFTkJRVU1zVFVGQlRpeERRVU5GTEUxQlFVOHNUVUZCU3l4TlFVRk1MRzlDUVVGblFpeERRVUZvUWl4RlFVRnZRaXhEUVVGd1FpeERRVVZXTEVOQlRFUXNTVUZOU3l4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGT0xFTkJRV01zUTBGQlpDeERRVUZLTEVOQlNVZ3NUVUZJUVN4RFFVRkJMRU5CUVZNc1EwRkJReXhQUVVGV0xFTkJRV3RDTEZOQlFVTXNRMEZCUkN4RFFVRlJMRU5CUTNoQ0xFTkJRVWtzUTBGQlF5eE5RVUZNTEVOQlFWa3NRMEZCV2l4RFFVRm5RaXhEUVVGb1FpeERRVU5FTEVOQlJrUXNRMEZIUVN4RFFVRlBMRWxCUVZBc1EwRkZSaXhIUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZPTEVOQlFXTXNRMEZCWkN4RFFVRktMRU5CU1VVc1RVRklRU3hEUVVGQkxFTkJRVVVzUTBGQlF5eFBRVUZJTEVOQlFWY3NVMEZCUXl4RFFVRkVMRU5CUVU4c1EwRkRhRUlzUTBGQlNTeERRVUZETEUxQlFVd3NRMEZCV1N4RFFVRmFMRU5CUVhWQ0xFTkJRWFpDTEVOQlEwUXNRMEZHUkN4RFFVZEJMRU5CUVU4c1NVRkJVQ3hEUVVkR0xFZEJRVTBzUTBGQlFTeERRVUZITEVOQlFVY3NaVUZCV2l4RFFWVkJMRTFCVkVzc1EwRkJRU3hMUVVGTExFTkJRVU1zVDBGQlRpeERRVUZqTEVOQlFVY3NRMEZCUXl4RFFVRkVMRU5CUVdwQ0xFTkJVMHdzUjBGU1JTeERRVUZITEVOQlFVTXNRMEZCUkN4RFFVRklMRU5CUVdsQ0xFVkJVVzVDTEVWQlRFVXNRMEZCUnl4RFFVRkRMRU5CUVVRc1EwRkxUQ3hEUVU1SkxGTkJRVUVzUTBGTlNpeERRVXh0UWl4RlFVdHVRaXhEUVVadFFpeERRVUZITEVOQlFVTXNRMEZCUkN4RFFVRklMRU5CUVdVc1MwRkJaaXhEUVVGeFFpeERRVUZITEVOQlFVTXNRMEZCUkN4RFFVRklMRU5CUVdVc1QwRkJaaXhEUVVGMVFpeERRVUYyUWl4RFFVRnlRaXhEUVVWdVFpeERRVUZQTEVsQlExSXNReXc0UTBGWFZ5eERMRU5CUVZjc1F5eERRVUZKTEVOQlEzcENMRWRCUVUwc1EwRkJRU3hEUVVGSkxFTkJRVWNzU1VGQllpeERRVU5GTEVOQlFVY3NRMEZCUnl4VlFVRk5MRU5CUTFZc1EwRkJTU3hEUVVGRExFMUJRVXdzUTBGQldTeERRVUZhTEVOQlFYVkNMRU5CUVhaQ0xFTkJSRlVzUTBGRlZpeERRVUZKTEVOQlFVTXNUVUZCVEN4RFFVRlpMRU5CUVZvc1EwRkJkVUlzUTBGQmRrSXNRMEZEUkN4RFFVcElMRU5CVDBFc1RVRkdRU3hOUVVGTExFMUJRVXdzUTBGQldTeERRVUZhTEVOQlFYVkNMRU5CUVhaQ0xFTkJSVUVzUTBGRVFTeExRVUZMTEUxQlFVd3NRMEZCV1N4RFFVRmFMRU5CUVhWQ0xFTkJRWFpDTEVOQlEwRXNRMEZCVHl4SlFVTlNMRU03T3p0MWMwSkRPV0pJTEZGQlFWTXNRMEZCUVN4cFFrRkJWQ3hEUVVFMFFpeERRVUUxUWl4RFFVRnJReXhEUVVOb1F5d3dRa0ZCVnl4RFFVRkpMRU5CUVVNc1owSkJRVXdzUTBGQmMwSXNUVUZCVFN4RFFVRkRMRWxCUVZBc1EwRkJXU3hQUVVGYUxFVkJRWEZDTEVsQlFYSkNMRU5CUVRCQ0xFZEJRVEZDTEVWQlFTdENMRmRCUVM5Q0xFVkJRWFJDTEVOQlFWZ3NRMEZEUkN4RFFVVkVMRkZCUVZNc1EwRkJRU3hKUVVGVUxFTkJRV1VzUTBGQlppeERRVUZ4UWl4RFFVTnVRaXhIUVVGTkxFTkJRVUVzUTBGQlJ5eERRVUZITEU5QlFVOHNRMEZCUXl4RFFVRkpMRU5CUVVNc1VVRkJUQ3hEUVVGakxGZEJRV1FzUlVGQlJDeERRVUZ1UWl4RFFVTkJMRWRCUVRoQ0xFTkJRVU1zUTBGQk0wSXNSMEZCUVN4UFFVRlBMRU5CUVVNc1QwRkJVaXhEUVVGblFpeERRVUZvUWl4RFFVRktMRVZCUjBzc1IwRkJTU3hEUVVGS0xFTkJRVk1zUTBGRFdpeEhRVUZKTEVOQlFVRXNRMEZCU2l4RFFVRlJMRU5CUVZJc1EwRkVXU3hEUVVWYUxFZEJRVTBzUTBGQlFTeERRVUZSTEVOQlFVY3NhVUpCUVdsQ0xFTkJRVU1zUTBGQlJDeERRVUZzUXl4RFFVTkpMRU5CUVZFc1EwRkJReXhOUVVoRUxFTkJTVllzUTBGQlVTeERRVUZETEU5QlFWUXNRMEZCYVVJc1UwRkJReXhEUVVGRUxFTkJRVmNzUTBGRE1VSXNRMEZCU3l4RFFVRkRMR2RDUVVGT0xFTkJRWFZDTEUxQlFYWkNMRU5CUVN0Q0xGVkJRVTBzUTBGRE9VSXNRMEZCVVN4RFFVRkRMRTFCUVZRc1EwRkJaMElzVTBGQlF5eERRVUZFTEVOQlFWa3NRMEZCUlN4TlFVRnRReXhEUVVGRExFTkJRVGRDTEVkQlFVRXNUMEZCVHl4RFFVRkRMRTlCUVZJc1EwRkJaMElzUTBGQmFFSXNRMEZCWjBNc1EwRkJja1VzUlVGQmRVVXNUVUZFZWtNc1IwRkZha01zVDBGQlR5eERRVUZETEVsQlFWSXNRMEZCWVN4RFFVRmlMRU5CUm1sRExFTkJSMnBETEVOQlFVa3NRMEZCUXl4aFFVRk1MRU5CUVcxQ0xFZEJRVWtzUTBGQlFTeExRVUZLTEVOQlFWVXNUVUZCVml4RFFVRnVRaXhEUVVocFF5eERRVXR3UXl4RFFVeEVMRU5CVFVRc1EwRlFSQ3hEUVVwVkxFVkJZMVlzVDBGQlR5eERRVUZETEVsQlFWSXNRMEZCWVN4RFFVRmlMRU5CWkZVc1EwRmxWaXhEUVVGSkxFTkJRVU1zWVVGQlRDeERRVUZ0UWl4SFFVRkpMRU5CUVVFc1MwRkJTaXhEUVVGVkxFMUJRVllzUTBGQmJrSXNRMEZtVlN4RFFXbENZaXhEUVVWSExFTkJRVWtzUTBGQlF5eFZRVUZNTEVOQlFXZENMRTFCZEVKd1FpeEZRWFZDUlN4RFFVRkpMRU5CUVVNc1ZVRkJUQ3hEUVVGblFpeFBRVUZvUWl4RFFVRjNRaXhKUVVGNFFpeERRWFpDUml4RFFYbENSQ3hEUVVWRUxGRkJRVk1zUTBGQlFTeE5RVUZVTEVWQlFXMUNMRWxCUTFnc1EwRkJRU3hEUVVGRkxFTkJRVWNzUjBGQlNTeERRVUZCTEdkQ1FVRktMRU5CUVhGQ0xGTkJRVU1zUTBGQlJDeERRVUZsTEVOQlF6ZERMRU5CUVZNc1EwRkJReXhQUVVGV0xFTkJRV3RDTEZOQlFVTXNRMEZCUkN4RFFVRmpMRU5CUXpsQ0xFTkJRVkVzUTBGQlF5eFZRVUZVTEVOQlFXOUNMRTlCUVhCQ0xFTkJRVFJDTEVsQlFUVkNMRU5CUTBRc1EwRkdSQ3hEUVVkRUxFTkJTbFVzUTBGRVRTeERRV05xUWl4RFFVRkZMRU5CUVVNc1QwRkJTQ3hEUVVGWExGRkJRVkVzUTBGQlF5eGhRVUZVTEVOQlFYVkNMRTFCUVhaQ0xFTkJRVmdzUTBGUVdTeERRVU5XTEZWQlFWVXNSMEZFUVN4RFFVVldMRk5CUVZNc1IwRkdReXhEUVVkV0xHRkJRV0VzUjBGSVNDeERRVWxXTEU5QlFVOHNSMEZLUnl4RFFVOWFMRU5CUTBRc1EwRkZSQ3hOUVVGTkxFTkJRVU1zWjBKQlFWQXNRMEZCZDBJc1RVRkJlRUlzUTBGQlowTXNUVUZCYUVNc1F5eERRVU50UXl4VlFVRXZRaXhIUVVGQkxFMUJRVTBzUTBGQlF5eFJRVUZRTEVOQlFXZENMRlVzUlVGRGJFSXNUVUZCVFN4RkxFbEJTVVlzUTBGQlFTeFBRVUZQTEVOQlFVY3NSU3hEUVVOV0xFOUJRVThzUTBGQlJ5eEZMRU5CVldoQ0xGRkJRVk1zUTBGQlFTeE5RVUZVTEVOQlFXbENMRU5CUVdwQ0xFTkJRVEpDTEVOQlFUTkNMRU5CUVc5RExFTkJRMnhETEVkQlFYZENMRkZCUVhCQ0xGRkJRVThzUTBGQlFTeERRVUZZTEVOQlEwVXNTMEZCVFN4SlFVRkpMRU5CUVVFc1MwRkJTaXhEUVVGVkxDdEZRVUZXTEVOQlFVNHNRMEZEUml4SFFVRjFRaXhWUVVGdVFpeFJRVUZQTEVOQlFVRXNRMEZCV0N4RFFVTkZMRXRCUVUwc1NVRkJTU3hEUVVGQkxFdEJRVW9zUTBGQlZTeHpSVUZCVml4RFFVRk9MRU5CUTBZc1QwRkJUeXhEUVVGRExFTkJRVkVzUTBGQlF5eFhRVUZVTEVWQlFVUXNRMEZCVUN4RFFVRnJReXhEUVV4QkxFTkJUV3hETEcxQ1FVRkpMRkZCUVZFc1EwRkJReXhuUWtGQlZDeERRVUV3UWl4RFFVRlJMRU5CUVVNc1YwRkJWQ3hGUVVFeFFpeERRVUZLTEVWQlFYVkVMRTlCUVhaRUxFTkJRU3RFTEVsQlFTOUVMRU5CUTBRc1F5eEhRVTlMTEVOQlFVRXNhVUk3T3p0cGRFUkRjRVZsTEVOQlFVRXNTU3hoUVZGdVFpeFpRVUZsTEhGSFFVTlFMRU5CUVVrc1EwRkJReXhUUVVSRkxFZEJSV0lzUlVGQlN5eFJRVUZNTEVOQlFXTXNXVUZCWkN4RFFVRXlRaXhOUVVFelFpeERRVUZ0UXl4RlFVRkxMRkZCUVV3c1EwRkJZeXhaUVVGa0xFTkJRVEpDTEZkQlFUTkNMRU5CUVc1RExFTkJSbUVzUTBGSFlpeEZRVUZMTEZGQlFVd3NRMEZCWXl4bFFVRmtMRU5CUVRoQ0xGZEJRVGxDTEVOQlNHRXNRMEZKWWl4RFFVRkpMRU5CUVVNc1UwRkJUQ3hEUVVGbExFVkJRVXNzVjBGQlRDeERRVUZwUWl4SlFVRm9ReXd5UWtGS1lTeEZRVXRrTEVNc2EwWkJVMWNzUXl4RFFVRlRMRU5CU1c1Q0xFMUJTRWtzUTBGQlFTeERRVUZQTEZkQlFWa3NiMEpCUjNaQ0xFVkJSa1VzUzBGQlN5eGhRVUZNTEVOQlFXMUNMRk5CUVc1Q0xFTkJRVGhDTEVOQlFUbENMRU5CUlVZc1EwRkJUeXhKUVVOU0xFTXNkME5CVTFFc1F5eERRVUZUTEVOQlEyaENMRWRCUVVrc1EwRkJTU3hEUVVGRExFbEJRVXdzUjBGQll5eEpRVUZzUWl4RFFVRjNRaXhMUVVOMFFpeEhRVUZOTEVOQlFVRXNRMEZCU1N4RFFVRkhMRU5CUVVrc1EwRkJReXhUUVVSSkxFTkJSV1lzUTBGQlNTeERRVUZETEZWQlJsVXNSVUZIY0VJc1EwRkJTU3hEUVVGRExGZEJRVXdzUTBGQmFVSXNRMEZCU1N4RFFVRkRMRlZCUVhSQ0xFVkJRMFlzUzBGQlN5eFpRVUZNTEVOQlFXdENMRWxCUVd4Q0xFTkJTbk5DTEVOQlMzUkNMRU5CUVVrc1EwRkJReXhKUVVGTUxFTkJRVmtzU1VGRFlpeERRVU5FTEUxQlFVOHNUVUZCU3l4VlFVRk1MRU5CUVdkQ0xFTkJRV2hDTEVOQlExSXNReXh2UkVGVGIwSXNReXhEUVVGTkxFOUJRMHdzVlVGQmFFSXNVVUZCVHl4RFFVRkJMRU5CUkdNc1EwRkZhRUlzUTBGQlNTeERRVUZETEZsQlFVd3NRMEZCYTBJc1EwRkJTU3hGUVVGMFFpeERRVVpuUWl4TlFVbE1MRkZCUVdoQ0xGRkJRVThzUTBGQlFTeERRVXBqTEVkQlMzWkNMRU5CUVVrc1EwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQlZDeERRVUYxUWl4RFFVRjJRaXhEUVV4blFpeEZRVkYyUWl4RFFVRkpMRU5CUVVNc1UwRlNhMElzUTBGUGNrSXNRMEZCU1N4WFFVRlpMRU5CUVVFc1YwRlFTeXhEUVZGT0xFTkJVazBzUTBGWFRpeERRVUZKTEVOQlFVTXNVMEZCVEN4RlFVRnJRaXhSUVVGUkxFTkJRVU1zU1VGWWNrSXNRMEZqY2tJc1EwRkJTU3hEUVVGRExFbEJaR2RDTEVWQlpYWkNMRU5CUVVrc1EwRkJReXhKUVVGTUxFTkJRVlVzV1VGQlZpeERRVUYxUWl4RFFVRjJRaXhEUVdaMVFpeERRV2xDTVVJc1F5eDFSRUZSZDBJc1EwRkRka0lzVFVGQlR5eERRVUZCTEVOQlFVa3NRMEZCUXl4SlFVTmlMRU1zYTBWQlZUUkNMRU1zUTBGQlVTeERRVU51UXl4SFFVRk5MRU5CUVVFc1EwRkJTU3hEUVVGSExFTkJRVWtzUTBGQlF5eFRRVUZNTEVOQlFXVXNRMEZCVFN4RFFVRkRMRWxCUVhSQ0xFTkJRV0lzUTBGRWJVTXNUVUZGTDBJc1EwRkJRU3hEUVVGSkxGZEJRVmtzUTBGQlFTeERRVVpsTEVOQlJ6RkNMRU5CU0RCQ0xFTkJUVEZDTEVkQlFVa3NRMEZCUVN4RFFVVmtMRU1zVDBGdVJ5dENMSEZDTERCQ1FYTkhiRU1zU1VGQlNTeERRVUZETEZOQlFVd3NRMEZCYVVJc1JTeERRVU5xUWl4SlFVRkpMRU5CUVVNc1UwRkJUQ3hEUVVGcFFpeEpPenM3TW5ORVF6RkhTU3hEUVVGQkxFOHNZVUZWYmtJc1dVRkJaU3h6UjBGRFNpeFRRVVJKTEVkQlJXSXNSVUZCU3l4UlFVRk1MRU5CUVdNc1dVRkJaQ3hEUVVFeVFpeFRRVUV6UWl4RFFVRnpReXhGUVVGTExGRkJRVXdzUTBGQll5eFpRVUZrTEVOQlFUSkNMRmRCUVROQ0xFTkJRWFJETEVOQlJtRXNRMEZIWWl4RlFVRkxMRkZCUVV3c1EwRkJZeXhsUVVGa0xFTkJRVGhDTEZkQlFUbENMRU5CU0dFc1JVRkpaQ3hETEcxR1FWTmhMRU5CUTFvc1IwRkJUU3hEUVVGQkxFTkJRVWtzUTBGQlJ5eExRVUZMTEZWQlFVd3NSVUZCWWl4RFFVdEJMRTFCU2trc1EwRkJRU3hEUVVsS0xFZEJTRVVzUTBGQlNTeERRVUZETEU5QlFVd3NRMEZCWVN4SlFVRmlMRU5CUjBZc1EwRkdSU3hMUVVGTExGRkJRVXdzUTBGQll5eFBRVUZrTEVOQlFYZENMRU5CUlRGQ0xFVkJRVThzU1VGRFVpeERMQ3REUVZGaExFTkJTVm9zVFVGSVN5eE5RVUZMTEZGQlFVd3NRMEZCWXl4UFFVZHVRaXhIUVVaRkxFdEJRVXNzVVVGQlRDeERRVUZqTEU5QlFXUXNRMEZCZDBJc2FVSkJRVXNzYjBKQlFVd3NRMEZCTUVJc1MwRkJTeXhQUVVGTUxFVkJRVEZDTEVOQlJURkNMRVZCUVU4c1MwRkJTeXhSUVVGTUxFTkJRV01zVDBGRGRFSXNReXg1UTBGUlZTeERRVU5VTEUxQlFVOHNTMEZEVWl4RExFOUJja1JyUXl4eFFqczdPeXRhUTBWeVF5eFJRVUZUTEVOQlFVRXNTVUZCVkN4RlFVRjNRaXcwUWtGQlRpeERRVUZOTEhOQ1FVRk9MRU5CUVUwc2IwSkJRMmhDTEVOQlFVRXNRMEZCVHl4RFFVRkhMR05CUVdNc1EwRkJReXhMUVVGbUxFTkJRWEZDTEVsQlFYSkNMRU5CUVRKQ0xFTkJRVE5DTEVOQlJFMHNRMEZIYUVJc1EwRkJTU3hEUVVGSExFZEJRVWtzUTBGQlFTeFBRVUZLTEVOQlFWa3NVMEZCUXl4RFFVRkVMRU5CUVZVc1EwRkJWaXhEUVVGeFFpeERRVU0xUXl4SFFVRk5MRU5CUVVFc1EwRkJSeXhEUVVGSExFZEJRVWtzUTBGQlFTeGpRVUZvUWl4RFFVVkJMRU5CUVVjc1EwRkJReXhuUWtGQlNpeERRVUZ4UWl4VFFVRnlRaXhEUVVGblF5eFZRVUZOTEVOQlEzQkRMRU5CUVU4c1EwRkJReXhEUVVGRUxFTkJRMUlzUTBGR1JDeERRVWcwUXl4RFFVMDFReXhEUVVGSExFTkJRVU1zWjBKQlFVb3NRMEZCY1VJc1QwRkJja0lzUTBGQk9FSXNWVUZCVFN4RFFVTnNReXhEUVVGTkxFTkJRVU1zUTBGQlJDeERRVU5RTEVOQlJrUXNRMEZPTkVNc1EwRlZOVU1zUTBGQlJ5eERRVUZETEVsQlFVb3NRMEZCVXl4RFFVRlBMRU5CUVVNc1RVRkJha0lzUTBGQmVVSXNRMEZCVHl4RFFVRkRMRWRCUVdwRExFTkJWalJETEVOQldXSXNVVUZCTTBJc1YwRkJUeXhEUVVGUExFTkJRVU1zVDBGQlppeEhRVUV5UkN4SlFVRndRaXhIUVVGQkxFTkJRVThzUTBGQlF5eFBRVnBRTEVWQllURkRMRTFCUVUwc1EwRkJReXhKUVVGUUxFTkJRVmtzUTBGQlR5eERRVUZETEU5QlFYQkNMRVZCUVRaQ0xFOUJRVGRDTEVOQlFYRkRMRk5CUVVNc1EwRkJSQ3hEUVVGVExFTkJRelZETEVkQlFVMHNRMEZCUVN4RFFVRkhMRU5CUVVjc1QwRkJUeXhEUVVGRExFTkJRVThzUTBGQlF5eFBRVUZTTEVOQlFXZENMRU5CUVdoQ0xFTkJRVVFzUTBGQmJrSXNRMEZEYlVJc1VVRkJaaXhSUVVGUExFTkJRVUVzUTBGR2FVTXNSVUZITVVNc1EwRkJSeXhEUVVGRExHZENRVUZLTEVOQlFYRkNMRU5CUVhKQ0xFTkJRVEJDTEVOQlFURkNMRU5CUlVnc1EwRk1SQ3hEUVdJd1F5eERRWEZDU2l4UlFVRndReXhSUVVGUExFTkJRVUVzUTBGQlR5eERRVUZETEdkQ1FYSkNlVUlzUlVGelFqRkRMRU5CUVVjc1EwRkJReXhuUWtGQlNpeERRVUZ4UWl4RFFVRlBMRU5CUVVNc1owSkJRVGRDTEVOQmRFSXdReXhEUVhsQ05VTXNRMEZCUnl4RFFVRkRMRWxCUVVvc1EwRkJVeXhEUVVGUExFTkJRVU1zU1VGQmFrSXNRMEZEUkN4RFFURkNXU3hEUVVoVExFTkJiVVIwUWl4TlFYQkNTU3hEUVVGQkxFdEJRVXNzUTBGQlF5eFBRVUZPTEVOQlFXTXNRMEZCVHl4RFFVRkRMRTlCUVhSQ0xFTkJiMEpLTEVWQmJrSkZMRU5CUVU4c1EwRkJReXhQUVVGU0xFTkJRV2RDTEU5QlFXaENMRU5CUVhkQ0xGTkJRVU1zUTBGQlJDeERRVUZSTEVOQlExb3NWVUZCWkN4UlFVRlBMRU5CUVVFc1EwRkViVUlzUlVGRk5VSXNRMEZCU1N4RFFVRkRMRWxCUVV3c1EwRkJWU3hEUVVGV0xFTkJRMGdzUTBGSVJDeERRVzFDUml4RFFXUXJRaXhWUVVFelFpeFJRVUZQTEVOQlFVRXNRMEZCVHl4RFFVRkRMRTlCWTI1Q0xFVkJZa1VzUTBGQlNTeERRVUZETEVsQlFVd3NRMEZCVlN4RFFVRlBMRU5CUVVNc1QwRkJiRUlzUTBGaFJpeERRVlpKTEV0QlFVc3NRMEZCUXl4UFFVRk9MRU5CUVdNc1EwRkJUeXhEUVVGRExFOUJRWFJDTEVOQlZVb3NSVUZVUlN4RFFVRlBMRU5CUVVNc1QwRkJVaXhEUVVGblFpeFBRVUZvUWl4RFFVRjNRaXhUUVVGRExFTkJRVVFzUTBGQlVTeERRVU5hTEZWQlFXUXNVVUZCVHl4RFFVRkJMRU5CUkcxQ0xFVkJSVFZDTEVOQlFVa3NVMEZCU2l4RFFVRlhMRU5CUVZnc1EwRkRTQ3hEUVVoRUxFTkJVMFlzUTBGS0swSXNWVUZCTTBJc1VVRkJUeXhEUVVGQkxFTkJRVThzUTBGQlF5eFBRVWx1UWl4RlFVaEZMRU5CUVVrc1UwRkJTaXhEUVVGWExFTkJRVThzUTBGQlF5eFBRVUZ1UWl4RFFVZEdMRU5CUVU4c1EwRkRVaXhEUVdWRUxGRkJRVk1zUTBGQlFTeGpRVUZVTEVOQlFYbENMRU5CUVhwQ0xFTkJRV2xETEVOQlFXcERMRU5CUVhORExFTkJRWFJETEVOQlFUUkRMRU5CUVRWRExFTkJRWEZFTEVOQlFYSkVMRU5CUVRoRUxFTkJRVGxFTEVOQlFYVkZMRU5CUVhaRkxFTkJRWGxHTEU5QlEycEZMRkZCUVd4Q0xGZEJRVThzUTBGQlVDeERRVVJ0Uml4RFFVVTVSU3hqUVVGakxFTkJRMjVDTEVOQlFVMHNRMEZCUXl4TlFVUlpMRU5CUlc1Q0xFTkJRVTBzUTBGQlF5eEhRVUZRTEVWQlFXTXNRMEZCVFN4RFFVRkRMRWRCUVhKQ0xFVkJRVFJDTEVOQlFVMHNRMEZCUXl4SlFVRnVReXhGUVVFeVF5eERRVUZOTEVOQlFVTXNUVUZHTDBJc1EwRkhia0lzUTBGQlRTeERRVUZETEVsQlFWQXNSVUZCWlN4RFFVRk5MRU5CUVVNc1NVRkJkRUlzUlVGQk9FSXNRMEZCVFN4RFFVRkRMRWxCU0d4Q0xFTkJTVzVDTEVOQlFVMHNRMEZCUXl4UFFVRlFMRVZCUVd0Q0xFTkJRVTBzUTBGQlF5eEpRVXBPTEVOQlMyNUNMRU5CUVUwc1EwRkJReXhQUVVGUUxFVkJRV3RDTEVOQlFVMHNRMEZCUXl4TFFVeE9MRU5CVFc1Q0xFTkJRVTBzUTBGQlF5eFBRVTVaTEVOQlQyNUNMRU5CUVUwc1EwRkJReXhuUWtGUVdTeERRVVpuUlN4RFFXRTVSU3hEUVVOTUxFMUJRVTBzUTBGQlJTeFBRVUZQTEVOQlFVTXNTVUZCVWl4RFFVRmhMRWxCUVdJc1EwRkJiVUlzUTBGQmJrSXNRMEZCTWtJc1MwRkJNMElzUTBGQmEwTXNVMEZCYkVNc1EwRkVTQ3hEUVVWTUxFZEJRVWNzUTBGQlJTeFBRVUZQTEVOQlFVTXNTVUZCVWl4RFFVRmhMRWxCUVdJc1EwRkJiVUlzUTBGQmJrSXNRMEZCZDBJc1JVRkJlRUlzUTBGQk5FSXNVMEZCTlVJc1EwRkdRU3hEUVVkTUxFbEJRVWtzUTBGQlJTeFBRVUZQTEVOQlFVTXNTVUZCVWl4RFFVRmhMRWxCUVdJc1EwRkJiVUlzUTBGQmJrSXNRMEZCZVVJc1NVRkJla0lzUTBGQkswSXNVMEZCTDBJc1EwRklSQ3hEUVVsTUxFOUJRVThzUTBGQlVDeERRVXBMTEVOQlMwd3NUMEZCVHl4RFFVRlFMRU5CVEVzc1EwRk5UQ3hQUVVGUExFTkJRVVVzVDBGQlR5eERRVUZETEVsQlFWSXNRMEZCWVN4SlFVRmlMRU5CUVcxQ0xFTkJRVzVDTEVOQlFUUkNMRWxCUVRWQ0xFTkJRV3RETEZOQlFXeERMRU5CVGtvc1EwRlBUQ3huUWtGQlowSXNRMEZCUlN4UFFVRlBMRU5CUVVNc1NVRkJVaXhEUVVGaExFbEJRV0lzUTBGQmJVSXNRMEZCYmtJc1EwRkJjVU1zU1VGQmNrTXNRMEZCTWtNc1UwRkJNME1zUTBGUVlpeERRVlZXTEVOQlZVUXNVVUZCVXl4RFFVRkJMRTlCUVZRc1EwRkJhMElzUTBGQmJFSXNRMEZCYzBJc1EwRkJkRUlzUTBGQk1rSXNRMEZCTTBJc1EwRkJhVU1zVDBGRFlpeFZRVUZrTEZGQlFVOHNRMEZCUVN4RFFVUnZRaXhEUVVWMFFpeERRVUZGTEVOQlFVTXNTMEZCU0N4RFFVRlRMRWxCUVZRc1EwRkJaU3hEUVVGbUxFTkJSbk5DTEVOQlNXSXNVVUZCWkN4UlFVRlBMRU5CUVVFc1EwRktiMElzUTBGTGRFSXNRMEZNYzBJc1EwRlBlRUlzUTBGRFVqczdPMkZEZUVoRUxHOUVMSGQ2UWtGRlFTeFJRVUZUTEVOQlFVRXNTMEZCVkN4RlFVRjVRaXhSUVVOcVFpeERRVUZCTEVOQlFVMHNRMEZCUnl4RlFVUlJMRU5CUTBvc1EwRkJUeXhEUVVGSExFVkJSRTRzUTBGRFZTeERRVUZQTEVOQlFVY3NSVUZFY0VJc2IwSkJRVTRzUTBGQlRTeHpRa0ZCVGl4RFFVRk5MSE5DUVVWb1FpeERRVUZKTEVOQlFVTXNUVUZHVnl4RlFVVklMRU5CUTJ4Q0xFZEJRVTBzUTBGQlFTeERRVUZQTEVOQlFVY3NRMEZCU1N4RFFVRkRMRXRCUVV3c1JVRkJhRUlzUTBGRFNTeExRVUZMTEVOQlFVTXNUMEZCVGl4RFFVRmpMRU5CUVU4c1EwRkJReXhQUVVGMFFpeERRVVpqTEVWQlJXdENMRU5CUVU4c1EwRkJReXhOUVVGU0xFTkJRV1VzUTBGQlR5eERRVUZETEU5QlFYWkNMRU5CUm14Q0xFTkJSMkVzVlVGQk0wSXNVVUZCVHl4RFFVRkJMRU5CUVU4c1EwRkJReXhQUVVoRUxFVkJSM2xDTEVOQlFVOHNRMEZCUXl4SlFVRlNMRU5CUVdFc1EwRkJUeXhEUVVGRExFOUJRWEpDTEVOQlNIcENMRU5CU1dRc1MwRkJTeXhEUVVGRExFOUJRVTRzUTBGQll5eERRVUZQTEVOQlFVTXNUMEZCZEVJc1EwRktZeXhGUVVsclFpeERRVUZQTEVOQlFVTXNUVUZCVWl4RFFVRmxMRU5CUVU4c1EwRkJReXhQUVVGMlFpeERRVXBzUWl4RFFVdGhMRlZCUVROQ0xGRkJRVThzUTBGQlFTeERRVUZQTEVOQlFVTXNUMEZNUkN4RlFVdDVRaXhEUVVGUExFTkJRVU1zU1VGQlVpeERRVUZoTEVOQlFVOHNRMEZCUXl4UFFVRnlRaXhEUVV4NlFpeERRVTFzUWl4TlFVRk5MRU5CUVVNc1RVRkJVQ3hEUVVGakxFTkJRV1FzUTBGQmMwSXNRMEZCZEVJc1EwRkRSQ3hEUVVkRUxFMUJSa0VzUTBGQlFTeERRVUZOTEVOQlFVTXNUMEZCVUN4RFFVRnBRaXhEUVVWcVFpeERRVVJCTEVOQlFVMHNRMEZCUXl4UFFVRlFMRU5CUVdsQ0xFTkJRMnBDTEVOQlFVOHNRMEZEVWl4RFFXVkVMRkZCUVZNc1EwRkJRU3hqUVVGVUxFTkJRWGxDTEVOQlFYcENMRU5CUVdsRExFTkJRV3BETEVOQlFYTkRMRU5CUVhSRExFTkJRVFJETEVOQlFUVkRMRU5CUVhGRUxFTkJRWEpFTEVOQlFUaEVMRU5CUVRsRUxFTkJRWFZGTEVOQlFYWkZMRU5CUVhsR0xFOUJRMnBGTEZGQlFXeENMRmRCUVU4c1EwRkJVQ3hIUVVGNVF5eEpRVUZZTEVkQlFVRXNRMEZFY1VRc1EwRkZPVVVzWTBGQll5eERRVU51UWl4RFFVRk5MRU5CUVVNc1RVRkVXU3hEUVVWdVFpeERRVUZOTEVOQlFVTXNSMEZCVUN4RlFVRmpMRU5CUVUwc1EwRkJReXhIUVVGeVFpeEZRVUUwUWl4RFFVRk5MRU5CUVVNc1NVRkJia01zUlVGQk1rTXNRMEZCVFN4RFFVRkRMRTFCUmk5Q0xFTkJSMjVDTEVOQlFVMHNRMEZCUXl4SlFVRlFMRVZCUVdVc1EwRkJUU3hEUVVGRExFbEJRWFJDTEVWQlFUaENMRU5CUVUwc1EwRkJReXhKUVVoc1FpeERRVWx1UWl4RFFVRk5MRU5CUVVNc1QwRkJVQ3hGUVVGclFpeERRVUZOTEVOQlFVTXNTVUZLVGl4RFFVdHVRaXhEUVVGTkxFTkJRVU1zVDBGQlVDeEZRVUZyUWl4RFFVRk5MRU5CUVVNc1MwRk1UaXhEUVUxdVFpeERRVUZOTEVOQlFVTXNUMEZPV1N4RFFVOXVRaXhEUVVGTkxFTkJRVU1zWjBKQlVGa3NRMEZHWjBVc1EwRmhPVVVzUTBGRFRDeE5RVUZOTEVOQlFVNHNRMEZFU3l4RFFVVk1MRWRCUVVjc1EwRkJTQ3hEUVVaTExFTkJSMHdzU1VGQlNTeERRVUZLTEVOQlNFc3NRMEZKVEN4UFFVRlBMRU5CUVZBc1EwRktTeXhEUVV0TUxFOUJRVThzUTBGQlVDeERRVXhMTEVOQlRVd3NUMEZCVHl4RFFVRlFMRU5CVGtzc1EwRlBUQ3huUWtGQlowSXNRMEZCYUVJc1EwRlFTeXhEUVZWV0xFTXNSMEZoU3l4RFFVRkJMRkVzV1VGalNpeFpRVUZ6UWl4dlJFRkJUaXhEUVVGTkxITkNRVUZPTEVOQlFVMHNhVUpCUTNCQ0xFdEJRVXNzWVVGQlRDeERRVUZ4UWl4alFVRmpMRU5CUVVNc1MwRkJaaXhEUVVGeFFpeEpRVUZ5UWl4RFFVRXlRaXhEUVVFelFpeERRVVJFTEVOQlJYQkNMRXRCUVVzc1kwRkJUQ3hEUVVGelFpeEZRVU4yUWl4RExHbEZRV2RDVlN4RExFTkJRV1VzZDBOQlFVNHNRMEZCVFN3NFFrRkJUaXhEUVVGTkxHMUNRVU40UWl4SFFVRk5MRU5CUVVFc1EwRkJTU3hEUVVGSExFbEJRV0lzUTBGRFFTeEhRVUZKTEV0QlFVc3NRMEZCVEN4RFFVRktMRU5CUTBVc1MwRkJUU3hKUVVGSkxFTkJRVUVzUzBGQlNpeDFRMEZCZVVNc1EwRkJla01zV1VGQlRpeERRVkZHTEUxQlRFRXNUVUZCU3l4alFVRk1MRU5CUVc5Q0xFTkJRWEJDTEVWQlFUUkNMR05CUVdNc1EwRkJReXhMUVVGbUxFTkJRWEZDTEVsQlFYSkNMRU5CUVRKQ0xFTkJRVE5DTEVOQlN6VkNMRU5CU2tFc1MwRkJTeXhEUVVGTUxFVkJRV0VzVlVGQlRTeERRVU5xUWl4SFFVRk5MRU5CUVVFc1EwRkJUeXhEUVVGSExHTkJRV01zUTBGQlF5eExRVUZtTEVOQlFYRkNMRWxCUVhKQ0xFTkJRVEpDTEVOQlFUTkNMRU5CUVdoQ0xFTkJRMEVzVFVGQlR5eHhRa0ZCU3l4TFFVRkxMRU5CUVVNc1EwRkJTU3hEUVVGRExHRkJRVTRzUTBGQmNVSXNRMEZCU1N4RFFVRkRMR05CUVV3c1EwRkJiMElzUTBGQmNFSXNRMEZCY2tJc1EwRkJaMFFzUTBGQmFFUXNRMEZCVml4RFFVTlNMRU5CUTBRc1EwRkJUeXhKUVVOU0xFTXNNa05CWlhkQ0xEUkNRVUZPTEVOQlFVMHNjMEpCUVU0c1EwRkJUU3hwUWtGRGRrSXNSMEZCVFN4RFFVRkJMRU5CUVU4c1EwRkJSeXhqUVVGakxFTkJRVU1zUzBGQlppeERRVUZ4UWl4SlFVRnlRaXhEUVVFeVFpeERRVUV6UWl4RFFVRm9RaXhEUVVOQkxFMUJRVThzY1VKQlFVc3NRMEZCVEN4RFFVTlNMRU03T3p0dk1rTkRha2xJTEVkQlFVMHNRMEZCUVN4UFFVRlBMRU5CUVVjc1EwRkRaQ3hOUVVGTkxFTkJRVVVzWjBKQlFVTXNRMEZCUkN4RFFVRlRMRU5CUTJZc1IwRkJUU3hEUVVGQkxFTkJRVU1zUTBGQlJ5eFZRVUZWTEVOQlFVTXNRMEZCUkN4RFFVRndRaXhEUVVOQkxFZEJRVWtzUzBGQlN5eERRVUZETEVOQlFVUXNRMEZCVkN4RFFVTkZMRXRCUVUwc1NVRkJTU3hEUVVGQkxFdEJRVW9zUTBGQlZTd3lRMEZCVml4RFFVRk9MRU5CUTBZc1RVRkJUeXhEUVVGQkxFTkJRMUlzUTBGT1lTeERRVTlrTEU5QlFVOHNRMEZCUlN4cFFrRkJReXhEUVVGRUxFTkJRVk1zUTBGRGFFSXNSMEZCVFN4RFFVRkJMRU5CUVVNc1EwRkJSeXhSUVVGUkxFTkJRVU1zUTBGQlJDeERRVUZzUWl4RFFVTkJMRWRCUVVrc1MwRkJTeXhEUVVGRExFTkJRVVFzUTBGQlZDeERRVU5GTEV0QlFVMHNTVUZCU1N4RFFVRkJMRXRCUVVvc1EwRkJWU3cyUTBGQlZpeERRVUZPTEVOQlEwWXNUVUZCVHl4RFFVRkJMRU5CUTFJc1EwRmFZU3hEUVdGa0xFMUJRVThzWlVGQlF5eERRVUZFTEVOQlFWTXNRMEZEWkN4SFFVRk5MRU5CUVVFc1EwRkJReXhEUVVGSExGVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFYQkNMRU5CUTBFc1IwRkJTU3hMUVVGTExFTkJRVU1zUTBGQlJDeERRVUZVTEVOQlEwVXNTMEZCVFN4SlFVRkpMRU5CUVVFc1MwRkJTaXhEUVVGVkxEQkRRVUZXTEVOQlFVNHNRMEZEUml4TlFVRlBMRU5CUVVFc1EwRkRVaXhEUVd4Q1lTeERRVzFDWkN4SlFVRkpMRU5CUVVVc1kwRkJReXhEUVVGRUxFTkJRVk1zUTBGRFlpeEhRVUZKTEVOQlEwWXNSMEZCVFN4RFFVRkJMRU5CUVVNc1EwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlRDeERRVUZYTEVOQlFWZ3NRMEZCVml4RFFVTkJMRWRCUVdsQ0xGRkJRV0lzVVVGQlR5eERRVUZCTEVOQlFWZ3NRMEZEUlN4TlFVRlBMRU5CUVVFc1EwRkRWaXhEUVVORUxFMUJRVThzUTBGQlVDeERRVUZWTEVOQlFVVXNRMEZEV2l4TlFVRlBMRU5CUVVFc1EwRkRVaXhEUVROQ1lTeERRVFJDWkN4TlFVRk5MRU5CUVVVc1owSkJRVU1zUTBGQlJDeERRVUZUTEVOQlEyWXNSMEZCU1N4RFFVTkdMRWRCUVUwc1EwRkJRU3hEUVVGRExFTkJRVWNzU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4RFFVRllMRU5CUVZZc1EwRkRRU3hIUVVGcFFpeFJRVUZpTEZkQlFVOHNRMEZCVUN4RFFVRktMRU5CUTBVc1RVRkJUeXhEUVVGQkxFTkJRMVlzUTBGRFJDeE5RVUZQTEVOQlFWQXNRMEZCVlN4RFFVRkZMRU5CUTFvc1MwRkJUU3hKUVVGSkxFTkJRVUVzUzBGQlNpeERRVUZWTERSRFFVRldMRU5CUTFBc1EwRndRMkVzUTBGeFEyUXNVVUZCVXl4cFFrRkJReXhEUVVGRUxFTkJRVk1zUTBGRGFFSXNSMEZCU1N4RFFVTkdMRWRCUVUwc1EwRkJRU3hEUVVGRExFTkJRVWNzU1VGQlNTeERRVUZETEV0QlFVd3NRMEZCVnl4RFFVRllMRU5CUVZZc1EwRkRRU3hIUVVGcFFpeFRRVUZpTEZGQlFVOHNRMEZCUVN4RFFVRllMRU5CUTBVc1RVRkJUeXhEUVVGQkxFTkJRMVlzUTBGRFJDeE5RVUZQTEVOQlFWQXNRMEZCVlN4RFFVRkZMRU5CUTFvc1MwRkJUU3hKUVVGSkxFTkJRVUVzUzBGQlNpeERRVUZWTERSRFFVRldMRU5CUTFBc1EwRTNRMkVzUTBFNFEyUXNSMEZCUnl4RFFVRkZMR0ZCUVVNc1EwRkJSQ3hEUVVGVExFTkJRMW9zUjBGQlNTeERRVU5HTEUxQlFVOHNRMEZCUVN4SlFVRkpMRU5CUVVNc1MwRkJUQ3hEUVVGWExFTkJRVmdzUTBGRFVpeERRVU5FTEUxQlFVOHNRMEZCVUN4RFFVRlZMRU5CUVVVc1EwRkRXaXhOUVVGUExFTkJRVUVzUTBGRFVpeERRWEJFWVN4RFFYRkVaQ3hKUVVGSkxFTkJRVVVzWTBGQlF5eERRVUZFTEVOQlFWTXNRMEZEWWl4SFFVRkpMRU5CUVVjc1EwRkJReXhMUVVGS0xFTkJRVlVzWjBWQlFWWXNRMEZCU2l4RFFVTkZMRTFCUVU4c1EwRkJRU3hEUVVGUUxFTkJSVUVzUzBGQlRTeEpRVUZKTEVOQlFVRXNTMEZCU2l4RFFVRlZMREJEUVVGV0xFTkJRMVFzUTBFeFJHRXNRMEZCYUVJc1F5d3lRa0UyUkVrc1EwRkJRU3hYTEVOQlVVVXNTeXhaUVZGS0xGZEJRV0VzUTBGQllpeERRVUZ0UWl4RFFVRnVRaXhEUVVFclFpeERRVU0zUWl3eVFrRkJiMElzVVVGQmFFSXNVVUZCVHl4RFFVRkJMRU5CUVZnc1EwRkRSU3hMUVVGTkxFbEJRVWtzUTBGQlFTeExRVUZLTEVOQlFWVXNjVU5CUVZZc1EwRkJUaXhEUVVOR0xFZEJRVEJDTEZWQlFYUkNMRkZCUVU4c1EwRkJRU3hEUVVGWUxFTkJRMFVzUzBGQlRTeEpRVUZKTEVOQlFVRXNTMEZCU2l4RFFVRlZMSGREUVVGV0xFTkJRVTRzUTBGRFJpeExRVUZMTEVsQlFVd3NRMEZCV1N4RFFVeHBRaXhEUVUwM1FpeExRVUZMTEZWQlFVd3NRMEZCYTBJc1EwRkRia0lzUXl4dFJFRlRSeXhETEVOQlFVMHNReXhEUVVGUExFbEJRMVFzUTBGQlFTeERRVUZOTEVOQlFXOUNMRkZCUVdoQ0xGZEJRVThzUTBGQlVDeERRVUZFTEVOQlFUWkNMRU5CUVRkQ0xFTkJRVzlETEVWQlJIQkRMRU5CUlZRc1EwRkJTU3hEUVVGSExFdEJRVXNzVlVGQlRDeERRVUZuUWl4TlFVRk5MRU5CUVVNc1RVRkJVQ3hEUVVGakxFVkJRV1FzUTBGQmEwSXNWMEZCYkVJc1EwRkJLMElzUTBGQkwwSXNRMEZCYUVJc1EwRkdSU3hEUVZGbUxFMUJURWtzUTBGQlFTeERRVUZMTEVWQlFVa3NRMEZCU1N4SFFVRkxMRU5CUVVzc1EwRkJReXhwUWtGQlRpeEZRVXQwUWl4RFFVcEZMRXRCUVVzc1IwRkJUQ3hEUVVGVExFTkJRVlFzUTBGSlJpeERRVVpGTEVOQlFVc3NRMEZCUXl4cFFrRkJUaXhEUVVGM1FpeERRVUY0UWl4RFFVVkdMRU5CUVU4c1NVRkRVaXhETEdkRFFWTkpMRU1zUTBGQlRTeERRVVZVTEUxQlJFRXNRMEZCUVN4WFFVRlhMRU5CUVVjc1EwRkJTU3hGUVVGSkxFdEJRVXNzVDBGQlRDeEZRVU4wUWl4RFFVRlBMRXRCUVVzc1ZVRkJUQ3hEUVVGblFpeFhRVUZvUWl4RFFVTlNMRU1zZVVOQlUxVXNRMEZEVkN4SFFVRk5MRU5CUVVFc1EwRkJUeXhEUVVGSExFTkJRVXNzUTBGQlF5eG5Ra0ZCVGl4RlFVRm9RaXhEUVVORkxFTkJRVWtzUTBGQlJ5eExRVUZMTEdkQ1FVRk1MRVZCUkZRc1EwRkhRU3hIUVVFNFFpeEhRVUV4UWl4SFFVRkJMRU5CUVVrc1EwRkJReXhEUVVGSkxFTkJRVU1zVFVGQlRDeERRVUZqTEVOQlFXWXNRMEZCVWl4RlFVTkZMRWRCUVVrc1EwRkJUeXhEUVVGRExFMUJRVklzUTBGQmFVSXNRMEZCU1N4RFFVRkRMRTFCUVV3c1EwRkJZeXhEUVVGdVF5eERRVU5GTEUxQlFVOHNTMEZCVUN4RFFVWktMRXRCU1U4c1NVRkJTU3hEUVVGUExFTkJRVU1zVFVGQlVpeEhRVUZ0UWl4RFFVRkpMRU5CUVVNc1RVRkJOVUlzUTBGRFRDeE5RVUZQTEV0QlFWQXNRMEZIUml4TlFVRlBMRU5CUVVFc1EwRkJTU3hEUVVGRExFMUJRVXdzUTBGQldTeFRRVUZETEVOQlFVUXNRMEZCVHl4RFFVRlFMRU5CUVdNc1EwRkJaQ3hEUVVGM1FpeERRVU42UXl4SFFVRk5MRU5CUVVFc1EwRkJSeXhEUVVGSExFTkJRVThzUTBGQlF5eERRVUZFTEVOQlFXNUNMRU5CUTBFc1IwRkJZU3hKUVVGVUxFZEJRVUVzUTBGQlNpeERRVUZ0UWl4TlFVRlBMRXRCUVZBc1EwRkRaQ3hIUVVGakxFZEJRVllzUjBGQlFTeERRVUZLTEVOQlFXMUNMRTFCUVU4c1EwRkJRU3hEUVVGUUxFTkJRMjVDTEVkQlFYRkNMRkZCUVdwQ0xGRkJRVThzUTBGQlFTeERRVUZZTEVOQlFTdENMRTFCUVZFc1EwRkJRU3hEUVVGTExFZEJRVXNzUTBGQldDeERRVUZyUWl4RFFVRnNRaXhEUVVGNVFpeEpRVUZvUXl4RFFVTXZRaXhIUVVGeFFpeFJRVUZxUWl4WFFVRlBMRU5CUVZBc1EwRkJTaXhEUVVFclFpeEpRVU55UWl4RFFVRkJMRU5CUkhGQ0xFTkJReXRDTEVOQlJDOUNMRU5CUXpGQ0xFZEJSREJDTEVOQlEwUXNRMEZFUXl4RFFVTXJRaXhEUVVRdlFpeERRVU5TTEV0QlJGRXNRMEZEWXl4RFFVUmtMRU5CUXl0Q0xFTkJSQzlDTEVOQlEyTXNUVUZFWkN4RFFVTnpRaXhEUVVSMFFpeERRVU1yUWl4RFFVUXZRaXhEUVVOelFpeEpRVVIwUWl4SFFVVkxMRkZCUVdZc1YwRkJUeXhEUVVGUUxFTkJRVVFzUTBGQk5FSXNRMEZCTlVJc1EwRkJhME1zUTBGQlJTeExRVUZMTEVOQlFVVXNRMEZCVkN4RFFVWjJRaXhEUVVVeFFpeERRVVl3UWl4SFFVVXhRaXhIUVVZd1FpeERRVVZ5UWl4RFFVWnhRaXhIUVVWeVFpeExRVVp4UWl4RFFVZHNReXhIUVVGSkxFTkJRVW9zUlVGRFJTeEhRVUZKTEVOQlFVY3NSMEZCU3l4RFFVRmFMRU5CUTBVc1IwRkJTU3hEUVVGS0xFTkJRMFVzUjBGQlNTeERRVVZHTEUxQlJFRXNRMEZCUVN4RFFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVGS0xFTkJRVzlDTEU5QlFVOHNRMEZCUXl4RFFVRkVMRU5CUVZBc1EwRkJZeXhEUVVGa0xFTkJRM0JDTEVOQlFVOHNRMEZEVWl4RFFVRkRMRTFCUVU4c1EwRkJVQ3hEUVVGVkxFTkJRMVlzVFVGQlR5eExRVU5TTEVOQlRrZ3NTMEZQVHl4SFFVRkpMRU5CUVVvc1QwRkRSQ3hEUVVGQkxFTkJRVTBzUTBGQlF5eEpRVUZRTEVOQlFWa3NRMEZCV2l4RFFVUkRMRVZCUlVnc1EwRkJTU3hEUVVGRExFTkJRVVFzUTBGQlNpeERRVUZ2UWl4RFFVWnFRaXhEUVVkSkxFTkJTRW9zUlVGTFNTeEpRVXhLTEVOQlQwRXNSMEZCU1N4RFFVRktMRU5CUlV3c1RVRkVRU3hEUVVGQkxFTkJRVWtzUTBGQlF5eERRVUZFTEVOQlFVb3NRMEZCYjBJc1EwRkRjRUlzUTBGQlR5eERRV2hDVkN4RFFVWktMRXRCY1VKUExFbEJRVWtzUTBGQlNpeERRVU5NTEVkQlFVa3NRMEZCU2l4RFFVTkZMRWRCUVVrc1EwRkZSaXhOUVVSQkxFTkJRVUVzUTBGQlNTeERRVUZETEVOQlFVUXNRMEZCU2l4RFFVRnpRaXhQUVVGUExFTkJRVU1zUTBGQlJDeERRVUZRTEVOQlFXTXNRMEZCWkN4RFFVTjBRaXhEUVVGUExFTkJRMUlzUTBGQlF5eE5RVUZQTEVOQlFWQXNRMEZCVlN4RFFVTldMRTFCUVU4c1MwRkRVaXhEUVU1SUxFdEJUMDhzUjBGQlNTeERRVUZLTEU5QlEwUXNRMEZCUVN4RFFVRk5MRU5CUVVNc1NVRkJVQ3hEUVVGWkxFTkJRVm9zUTBGRVF5eEZRVVZJTEVOQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVVvc1EwRkJjMElzUTBGR2JrSXNRMEZIU1N4RFFVaEtMRVZCUzBrc1NVRk1TaXhEUVU5QkxFZEJRVWtzUTBGQlNpeERRVVZNTEUxQlJFRXNRMEZCUVN4RFFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVGS0xFTkJRWE5DTEVOQlEzUkNMRU5CUVU4c1EwRm9RbFFzUTBGdFFrZ3NRMEZEUkN4TlFVRlBMRXRCUTFJc1EwRnVSRTBzUTBGdFJFb3NSVUZ1UkVrc1EwRnZSRklzUXl4NVEwRlJWU3hEUVVOVUxFMUJRVEJDTEV0QlFXNUNMRkZCUVVzc1QwRkJUQ3hGUVVOU0xFTXNPRU5CVlZjc1F5eERRVUZOTEVOQlMyaENMRTFCU205Q0xGRkJRV2hDTEZkQlFVOHNRMEZCVUN4RFFVbEtMRWRCU0VVc1EwRkJTU3hEUVVGSExFVkJSMVFzUlVGQlR5eExRVUZMTEdkQ1FVRk1MRWRCUVhkQ0xFZEJRWGhDTEVOQlFUUkNMRk5CUVVNc1EwRkJSQ3hEUVVGVkxFTkJRek5ETEVkQlFXOUNMRkZCUVdoQ0xGRkJRVThzUTBGQlFTeERRVUZZTEVOQlEwVXNUVUZCYVVJc1IwRkJWQ3hIUVVGQkxFTkJRVVFzUTBGQmFVSXNSVUZCYWtJc1EwRkJjMElzUTBGQk4wSXNRMEZHZVVNc1IwRkxha01zUTBGQlFTeERRVXhwUXl4RFFVdHNRaXhEUVV4clFpeERRVXRxUXl4SFFVeHBReXhEUVVzMVFpeERRVXcwUWl4RFFVdHNRaXhEUVV4clFpeERRVXMxUWl4TFFVdzBRaXhEUVU5NlF5eEhRVUZaTEVWQlFWSXNSMEZCUVN4RFFVRktMRU5CUVdkQ0xFTkJRMlFzUjBGQlNTeFRRVUZCTEVOQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVZJc1EwRkRSU3hMUVVGTkxFbEJRVWtzUTBGQlFTeExRVUZLTEdsRlFVRnJSU3hEUVVGc1JTeGpRVUZPTEVOQlJVWXNUVUZCVHl4RFFVRkJMRU5CUVVrc1EwRkJReXhEUVVGRUxFTkJRMW9zUTBGRFNTeEhRVUZqTEVWQlFWWXNSMEZCUVN4RFFVRktMRU5CUTBnc1RVRkJUeXhEUVVGQkxFTkJRVWNzUTBGQlJ5eEhRVUZPTEVWQlFXRXNVMEZCUVN4RFFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVGS0xFTkJRVEJDTEVWQlFURkNMRU5CUVN0Q0xFTkJRVWtzUTBGQlF5eERRVUZFTEVOQlFXaEVMRU5CUVZBc1EwRkhRU3hIUVVGSkxFTkJRMFlzVFVGQlR5eERRVUZCTEVOQlFVY3NRMEZCUnl4SFFVRk9MRU5CUVZrc1NVRkJTU3hEUVVGRExGTkJRVXdzUTBGQlpTeFBRVUZQTEVOQlFVTXNRMEZCUkN4RFFVRlFMRU5CUVdVc1EwRkJTU3hEUVVGRExFTkJRVVFzUTBGQmJrSXNRMEZCWml4RFFVTndRaXhEUVVORUxFMUJRVThzUTBGQlVDeERRVUZWTEVOQlExSXNTMEZCVFN4SlFVRkpMRU5CUVVFc1MwRkJTaXh4UlVGQmMwVXNRMEZCZEVVc1kwRkRVQ3hEUVVkT0xFTkJla0pOTEVWQmVVSktMRWxCZWtKSkxFTkJlVUpETEVkQmVrSkVMRU5CTUVKU0xFTXNNa1JCVTIxQ0xFTkJRMnhDTEUxQlFVOHNUVUZCU3l4SlFVRk1MRU5CUVZVc1MwRkJWaXhEUVVGblFpeEhRVUZvUWl4RlFVRnhRaXhIUVVGeVFpeERRVUY1UWl4VFFVRkRMRU5CUVVRc1EwRkJWU3hEUVVONFF5eEhRVUZOTEVOQlFVRXNRMEZCU3l4RFFVRkhMRU5CUVVrc1EwRkJReXhMUVVGTUxFTkJRVmNzUjBGQldDeERRVUZrTEVOQlJVRXNSMEZCYlVJc1EwRkJaaXhEUVVGQkxFTkJRVXNzUTBGQlF5eE5RVUZXTEVOQlFYTkNMRU5CUTNCQ0xFZEJRVWtzUTBGQlFTeERRVUZITEVOQlFVY3NRMEZCU3l4RFFVRkRMRXRCUVU0c1JVRkJWaXhEUVVORkxFTkJRVXNzUTBGQlJ5eERRVUZMTEVOQlFVTXNTVUZCVGl4RFFVRlhMRWRCUVZnc1EwRkVWaXhEUVVWRkxFTkJRVTBzUTBGQlJ5eERRVUZMTEVOQlFVTXNTMEZCVGl4RFFVRlpMR2xDUVVGYUxFTkJSbGdzUTBGSlFTeEhRVUZKTEVOQlFVb3NRMEZCV1N4UFFVTlZMRU5CUkZZc05rSkJRMUFzUTBGQlFTeERRVVJQTEUxQlEwRXNRMEZFUVN4TlFVVk9MRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJSa1FzUTBGSFJDeERRVU5NTEVkQlFVY3NRMEZCU0N4RFFVUkxMRU5CUlV3c1MwRkJTeXhEUVVGTUxFTkJSa3NzUTBGSFRDeEpRVUZKTEVOQlFVVXNRMEZJUkN4RFFVaERMRU5CVTBRc1EwRkRUQ3hIUVVGSExFTkJRVWdzUTBGRVN5eERRVVZNTEV0QlFVc3NRMEZCVEN4RFFVWkxMRU5CUjB3c1RVRkJUU3hEUVVGRkxFZEJRVWtzUTBGQlFTeE5RVUZLTEVOQlFWY3NRMEZCV0N4RFFVaElMRU5CVFZZc1EwRndRbTFDTEUxQmIwSkVMRVZCUVZJc1IwRkJRU3hEUVhCQ1V5eERRWEZDV0N4RFFVTk1MRXRCUVVzc1EwRkJUQ3hEUVVSTExFTkJja0pYTEVOQmVVSmtMRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJla0pQTEVOQk1FSlVMRU5CUTB3c1IwRkJSeXhEUVVGSUxFTkJSRXNzUTBGRlRDeEpRVUZKTEVOQlFVVXNRMEZHUkN4RFFURkNVeXhEUVN0Q1ZDeERRVU5NTEVkQlFVY3NRMEZCU0N4RFFVUkxMRU5CUlV3c1RVRkJUU3hEUVVGRkxFZEJRVWtzUTBGQlFTeE5RVUZLTEVOQlFWY3NRMEZCV0N4RFFVWklMRU5CVFZvc1EwRkRReXhOUVVGUExFTkJRVUVzUTBGRlZpeERRVE5EVFN4RFFUUkRVaXhETEN0RVFWRXlRaXhEUVVNeFFpeE5RVUZQTEVOQlFVRXNUVUZCVFN4RFFVRkRMRkZCUVZBc1EwRkJaMElzU1VGQmFFSXNRMEZCY1VJc1RVRkJja0lzUTBGQk5FSXNRMEZCTlVJc1EwRkRVaXhETERSRVFVOTVRaXhETEVOQlFVc3NRMEZETjBJc1RVRkJUU3hEUVVGRExGRkJRVkFzUTBGQlowSXNTVUZCYUVJc1EwRkJkVUlzUTBGRGVFSXNReXd3UkVGVGQwSXNReXhEUVVGTExFOUJRMVFzVVVGQlppeFJRVUZQTEVOQlFVRXNRMEZFYVVJc1IwRkZNVUlzUTBGQlJ5eERRVUZITEVOQlFVc3NRMEZCUXl4cFFrRkJUaXhGUVVadlFpeEZRVWwyUWl4RFFVcDFRaXhEUVUxeVFpeERRVUZITEVOQlFVTXNTMEZCU2l4RFFVRlZMRWRCUVZZc1JVRkJaU3hIUVVGbUxFTkJRVzFDTEZOQlFVTXNRMEZCUkN4RFFVRlZMRU5CUTJ4RExFZEJRVTBzUTBGQlFTeERRVUZMTEVOQlFVY3NRMEZCU1N4RFFVRkRMRXRCUVV3c1EwRkJWeXhIUVVGWUxFTkJRV1FzUTBGRFFTeEhRVUZ0UWl4RFFVRm1MRU5CUVVFc1EwRkJTeXhEUVVGRExFMUJRVllzUTBGQmMwSXNRMEZEY0VJc1IwRkJUU3hEUVVGQkxFTkJRVWNzUTBGQlJ5eERRVUZMTEVOQlFVTXNTMEZCVGl4RlFVRmFMRU5CUTBVc1EwRkJTeXhEUVVGSExFTkJRVXNzUTBGQlF5eEpRVUZPTEVOQlFWY3NSMEZCV0N4RFFVUldMRU5CUlVFc1RVRkJUeXhEUVVOTUxFZEJRVWNzUTBGQlNDeERRVVJMTEVOQlJVd3NTMEZCU3l4RFFVRk1MRU5CUmtzc1EwRkpVaXhEUVVORExFMUJRVThzUTBGQlFTeERRVVZXTEVOQldrMHNRMEZPY1VJc1EwRkpXQ3hGUVdWc1FpeERPenM3WVVOdVZrZ3NjMFFzT0doQ1FVVk5MRU5CUVVFc1QwRkJUeXhEUVVGSExFVXNRMEZEV2l4cFFrRkJhVUlzUTBGQlJ5eEpMRU5CUTNCQ0xGRkJRVkVzUnl4RFFVVmFMRTFCUVUwc1EwRkJReXhEUVVGUUxFTkJRVmNzVHl4SlFVOVZMRU5CUVVFc1RTeFpRVkZ1UWl4WFFVRmhMRU5CUVdJc1EwRkJjMElzUTBGQmRFSXNRMEZCYVVNc2VVSkJReTlDTEV0QlFVc3NUMEZCVEN4RFFVRmxMRU5CUVU4c1JVRkJTU3hGUVVSTExFTkJSUzlDTEV0QlFVc3NVMEZCVEN4RFFVRnBRaXhEUVVGVExFVkJRVWtzU1VGR1F5eERRVWN2UWl4TFFVRkxMRTFCUVV3c1EwRkJZeXhGUVVocFFpeERRVWt2UWl4UFFVRlBMRU5CUVVNc1NVRkJVaXhEUVVGaExFbEJRV0lzUTBGRFJDeERMSEZFUVZWSkxFTXNRMEZCVHl4RExFTkJRVmtzUTBGSmRFSXNSMEZJY1VJc1VVRkJha0lzVVVGQlR5eERRVUZCTEVOQlFWQXNSVUZCYlVRc1ZVRkJkRUlzVVVGQlR5eERRVUZCTEVOQlIzaERMRWRCUmtVc1EwRkJTeXhEUVVGSExFZEJRVWtzYTBKQlFVb3NRMEZCVlN4TFFVRkxMRTlCUVV3c1EwRkJaU3hEUVVGNlFpeERRVUZuUXl4RFFVRm9ReXhEUVVWV0xFVkJRVWtzUTBGQlN5eFhRVUZaTEd0Q1FVRnlRaXhIUVVORkxFdEJRVXNzVFVGQlRDeERRVUZaTEVsQlFWb3NRMEZCYVVJc1EwRkJha0lzUTBGRVJpeERRVVZOTEZGQlJrNHNSVUZGWjBJc1EwRkRXaXhIUVVGTkxFTkJRVUVzUTBGQlNTeERRVUZITEVOQlFVc3NRMEZCUXl4UFFVRk9MRVZCUVdJc1EwRkRTU3hEUVVaUkxFZEJSMVlzUzBGQlN5eFRRVUZNTEVWQlNGVXNRMEZKVml4RFFVRkxMRU5CUVVNc1JVRkJUaXhEUVVGVExFTkJRVlFzUTBGS1ZTeERRVXRXTEVOQlFVMHNRMEZCUXl4UFFVRlFMRU5CUVdsQ0xFTkJURkFzUTBGUFlpeERRVVZJTEUxQlFVOHNRMEZCUVN4RFFVTlNMRU1zYlVOQlVVOHNRMEZEVGl4TlFVRlBMRTFCUVVzc1RVRkJUQ3hEUVVGWkxFbEJRVm9zUTBGQmFVSXNVMEZCUXl4RFFVRkVMRU5CUVZjc1EwRkRha01zUjBGQlRTeERRVUZCTEVOQlFVa3NRMEZCUnl4RFFVRkxMRU5CUVVNc1QwRkJUaXhGUVVGaUxFTkJRMEVzUjBGQllTeEpRVUZVTEVkQlFVRXNRMEZCU2l4RFFVTkZMRTFCUVU4c1EwRkJRU3hEUVVWV0xFTkJURTBzUTBGTlVpeERMRFpEUVU5WkxFTkJRMjFDTEZWQlFURkNMRkZCUVU4c1RVRkJTeXhUUVVSTUxFZEJSVlFzUzBGQlN5eFRRVUZNTEVWQlJsTXNRMEZIVkN4TFFVRkxMRk5CUVV3c1EwRkJhVUlzU1VGSVVpeERRVXRhTEVNc1owUkJVV3RDTEVNc1EwRkJXU3hEUVVNM1FpeHBRa0ZCYVVJc1EwRkJSeXhEUVVOeVFpeERMSFZFUVZGM1FpeERRVU4yUWl4TlFVRk5MRU5CUVVNc1owSkJRVkFzUTBGQmQwSXNWVUZCZUVJc1EwRkJiME1zVVVGQmNFTXNRMEZFZFVJc1EwRkZiRUlzVVVGR2EwSXNSVUZIY2tJc1VVRkJVU3hGUVVWWUxFTXNkVU5CVVdkQ0xFTkJRMllzUjBGQlRTeERRVUZCTEVOQlFVa3NRMEZCUnl4UFFVRlBMRU5CUVVNc1IwRkJVaXhEUVVGWkxGTkJRVU1zUTBGQlJDeERRVUZaTEVOQlEyNURMRTFCUVU4c1EwRkJRU3hEUVVGTkxFTkJRVU1zVFVGQlVDeERRVUZqTEVkQlFXUXNRMEZCYTBJc1UwRkJReXhEUVVGRUxFTkJRVmNzUTBGRGJFTXNUVUZCVHl4RFFVRkJMRU5CUVVzc1EwRkJReXhKUVVOa0xFTkJSazBzUTBGSFVpeERRVXBaTEVWQlNWWXNTVUZLVlN4RlFVRmlMRU5CVVVFc1RVRklTU3hEUVVGQkxHbENRVWRLTEVWQlJrVXNRMEZCU1N4RFFVRkRMRTlCUVV3c1EwRkJZU3hIUVVGaUxFTkJSVVlzUTBGQlR5eERRVU5TTEVNc2JVTkJWVWdzVVVGQlV5eERRVUZCTEZGQlFWUXNSVUZCY1VJc1EwRkRia0lzVVVGQlVTeEhRVVJYTEVOQlJXNUNMRWRCUVVrc1EwRkJRU3hEUVVGS0xFTkJRVmNzUTBGQldDeERRVU5CTEU5QlFVOHNRMEZCUXl4UFFVRlNMRU5CUVdkQ0xGTkJRVU1zUTBGQlJDeERRVUZaTEVOQlEzSkNMRU5CUkhGQ0xFZEJSWGhDTEVOQlFVc3NRMEZCUnl4RFFVRk5MRU5CUVVNc1NVRkJVQ3hGUVVablFpeERRVWQ0UWl4RFFVRkxMRU5CUVVjc1EwRklaMElzUTBGTE0wSXNRMEZNUkN4RFFVaHRRaXhEUVZObUxFTkJWR1VzUlVGVmFrSXNRMEZCU3l4RFFVRkRMRk5CUVU0c1JVRldhVUlzUTBGWGFrSXNRMEZCU3l4RFFVRkRMRWRCUVU0c1JVRllhVUlzUTBGWmFrSXNUVUZCVFN4RFFVRkRMRTlCUVZBc1EwRkJhVUlzUTBGYVFTeEZRV050UWl4VlFVRTNRaXhSUVVGUExFTkJRVUVzYVVKQlpFY3NSVUZsYWtJc2FVSkJRV2xDTEVWQlJYQkNJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQnlLR1VzYml4MEtYdG1kVzVqZEdsdmJpQnZLR2tzWmlsN2FXWW9JVzViYVYwcGUybG1LQ0ZsVzJsZEtYdDJZWElnWXoxY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnlaWEYxYVhKbEppWnlaWEYxYVhKbE8ybG1LQ0ZtSmlaaktYSmxkSFZ5YmlCaktHa3NJVEFwTzJsbUtIVXBjbVYwZFhKdUlIVW9hU3doTUNrN2RtRnlJR0U5Ym1WM0lFVnljbTl5S0Z3aVEyRnVibTkwSUdacGJtUWdiVzlrZFd4bElDZGNJaXRwSzF3aUoxd2lLVHQwYUhKdmR5QmhMbU52WkdVOVhDSk5UMFJWVEVWZlRrOVVYMFpQVlU1RVhDSXNZWDEyWVhJZ2NEMXVXMmxkUFh0bGVIQnZjblJ6T250OWZUdGxXMmxkV3pCZExtTmhiR3dvY0M1bGVIQnZjblJ6TEdaMWJtTjBhVzl1S0hJcGUzWmhjaUJ1UFdWYmFWMWJNVjFiY2wwN2NtVjBkWEp1SUc4b2JueDhjaWw5TEhBc2NDNWxlSEJ2Y25SekxISXNaU3h1TEhRcGZYSmxkSFZ5YmlCdVcybGRMbVY0Y0c5eWRITjlabTl5S0haaGNpQjFQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhKbGNYVnBjbVVtSm5KbGNYVnBjbVVzYVQwd08yazhkQzVzWlc1bmRHZzdhU3NyS1c4b2RGdHBYU2s3Y21WMGRYSnVJRzk5Y21WMGRYSnVJSEo5S1NncElpd2lhVzF3YjNKMElFRnRiMjVwZEdVZ1puSnZiU0JjSWk0dUwybHVaR1Y0WENJN1hHNTNhVzVrYjNjdVFXMXZibWwwWlNBOUlFRnRiMjVwZEdVN1hHNGlMQ0pwYlhCdmNuUWdRMjl0Y0c5dVpXNTBJR1p5YjIwZ1hDSXVMMnhwWW5NdmJHRjViM1YwTDJOdmJYQnZibVZ1ZEZ3aU8xeHVhVzF3YjNKMElGTmxZM1JwYjI0Z1puSnZiU0JjSWk0dmJHbGljeTlzWVhsdmRYUXZjMlZqZEdsdmJsd2lPMXh1YVcxd2IzSjBJRkJoWjJVZ1puSnZiU0JjSWk0dmJHbGljeTlzWVhsdmRYUXZjR0ZuWlZ3aU8xeHVhVzF3YjNKMElIc2daR1ZtYVc1bExDQkRkWE4wYjIxSVZFMU1SV3hsYldWdWRDQjlJR1p5YjIwZ1hDSXVMMnhwWW5NdmJHRjViM1YwTDJSbFptbHVaVndpTzF4dVhHNXBiWEJ2Y25RZ1lXcGhlQ0JtY205dElGd2lMaTlzYVdKekwzSmxjWFZsYzNRdllXcGhlRndpTzF4dWFXMXdiM0owSUZKbGMyOTFjbU5sSUdaeWIyMGdYQ0l1TDJ4cFluTXZjbVZ4ZFdWemRDOXlaWE52ZFhKalpWd2lPMXh1WEc1cGJYQnZjblFnVW05MWRHVnlJR1p5YjIwZ1hDSXVMMnhwWW5NdmNtOTFkR1Z5TDNKdmRYUmxjbHdpTzF4dWFXMXdiM0owSUZKdmRYUmxJR1p5YjIwZ1hDSXVMMnhwWW5NdmNtOTFkR1Z5TDNKdmRYUmxYQ0k3WEc1Y2JtWjFibU4wYVc5dUlHbHVhWFFnS0hSb1pXNHBJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQjBhR1Z1SUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lwSUh0Y2JpQWdJQ0JwWmlBb1pHOWpkVzFsYm5RdWNtVmhaSGxUZEdGMFpTQTlQVDBnWENKamIyMXdiR1YwWlZ3aUtTQjdYRzRnSUNBZ0lDQjBhR1Z1S0NrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSGRwYm1SdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2liRzloWkZ3aUxDQjBhR1Z1S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2FXNXBkRUZzYkNBb2RHaGxiaWtnZTF4dUlDQnBaaUFvWkc5amRXMWxiblF1Y21WaFpIbFRkR0YwWlNBOVBUMGdYQ0pqYjIxd2JHVjBaVndpS1NCN1hHNGdJQ0FnVUdGblpTNXpaWFJEYjI1MFlXbHVaWElvS1R0Y2JpQWdJQ0JTYjNWMFpYSXViR2x6ZEdWdVVHOXdjM1JoZEdVb0tUdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlIUm9aVzRnUFQwOUlGd2lablZ1WTNScGIyNWNJaWtnZTF4dUlDQWdJQ0FnZEdobGJpZ3BPMXh1SUNBZ0lIMWNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjNhVzVrYjNjdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loY0lteHZZV1JjSWl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnVUdGblpTNXpaWFJEYjI1MFlXbHVaWElvS1R0Y2JpQWdJQ0FnSUZKdmRYUmxjaTVzYVhOMFpXNVFiM0J6ZEdGMFpTZ3BPMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIwYUdWdUlEMDlQU0JjSW1aMWJtTjBhVzl1WENJcElIdGNiaUFnSUNBZ0lDQWdkR2hsYmlncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNWNibU52Ym5OMElFRnRiMjVwZEdVZ1BTQjdYRzRnSUVOdmJYQnZibVZ1ZEN4Y2JpQWdVMlZqZEdsdmJpeGNiaUFnVUdGblpTeGNiaUFnWkdWbWFXNWxMRnh1SUNCRGRYTjBiMjFJVkUxTVJXeGxiV1Z1ZEN4Y2JseHVJQ0JoYW1GNExGeHVJQ0JTWlhOdmRYSmpaU3hjYmx4dUlDQlNiM1YwWlhJc1hHNGdJRkp2ZFhSbExGeHVYRzRnSUdsdWFYUXNYRzRnSUdsdWFYUkJiR3hjYm4wN1hHNWNibVY0Y0c5eWRDQjdYRzRnSUVOdmJYQnZibVZ1ZEN4Y2JpQWdVMlZqZEdsdmJpeGNiaUFnVUdGblpTeGNiaUFnWkdWbWFXNWxMRnh1SUNCRGRYTjBiMjFJVkUxTVJXeGxiV1Z1ZEN4Y2JseHVJQ0JoYW1GNExGeHVJQ0JTWlhOdmRYSmpaU3hjYmx4dUlDQlNiM1YwWlhJc1hHNGdJRkp2ZFhSbExGeHVYRzRnSUdsdWFYUXNYRzRnSUdsdWFYUkJiR3dzWEc1Y2JpQWdRVzF2Ym1sMFpTQmhjeUJrWldaaGRXeDBYRzU5TzF4dUlpd2lablZ1WTNScGIyNGdZMjl1ZEdGcGJtVnlJQ2hsYkN3Z2MyVnNaaXdnWVhKbmN5a2dlMXh1SUNCcFppQW9aV3dnYVc1emRHRnVZMlZ2WmlCSVZFMU1SV3hsYldWdWRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGJGeHVJQ0I5WEc0Z0lHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCbGJDQTlQVDBnWENKemRISnBibWRjSWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJqYjI1MFlXbHVaWElvWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpaGxiQ2tzSUhObGJHWXNJR0Z5WjNNcFhHNGdJSDFjYmlBZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUdWc0lEMDlQU0JjSW1aMWJtTjBhVzl1WENJcElIdGNiaUFnSUNCeVpYUjFjbTRnWTI5dWRHRnBibVZ5S0dWc0xtRndjR3g1S0hObGJHWXNJR0Z5WjNNcExDQnpaV3htTENCaGNtZHpLVnh1SUNCOVhHNGdJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdkR1Z0Y0d4aGRHVWdLR1ZzTENCelpXeG1MQ0JoY21kektTQjdYRzRnSUdsbUlDaGxiQ0JwYm5OMFlXNWpaVzltSUVoVVRVeEZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWc1hHNGdJSDFjYmlBZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUdWc0lEMDlQU0JjSW1aMWJtTjBhVzl1WENJcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdWdGNHeGhkR1VvWld3dVlYQndiSGtvYzJWc1ppd2dZWEpuY3lrc0lITmxiR1lzSUdGeVozTXBYRzRnSUgxY2JpQWdaV3h6WlNCN1hHNGdJQ0FnWTI5dWMzUWdaR2wySUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2hjSW1ScGRsd2lLVnh1SUNBZ0lHUnBkaTV6WlhSQmRIUnlhV0oxZEdVb1hDSmpiMjF3YjI1bGJuUmNJaXdnYzJWc1ppNWpiMjV6ZEhKMVkzUnZjaTV1WVcxbEtWeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pXd2dQVDA5SUZ3aWMzUnlhVzVuWENJcElIdGNiaUFnSUNBZ0lHUnBkaTVwYm01bGNraFVUVXdnUFNCbGJGeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdaR2wyWEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pXeGxiV1Z1ZEhNZ0tHVnNMQ0J6Wld4bUxDQmhjbWR6S1NCN1hHNGdJR052Ym5OMElHbHVkRzhnUFNCelpXeG1MblJsYlhCc1lYUmxYRzRnSUdsbUlDaDBlWEJsYjJZZ1pXd2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGJHVnRaVzUwY3lobGJDNWhjSEJzZVNoelpXeG1MQ0JoY21kektTd2djMlZzWml3Z1lYSm5jeWxjYmlBZ2ZWeHVJQ0JsYkhObElHbG1JQ2dvZEhsd1pXOW1JR1ZzSUQwOVBTQmNJbTlpYW1WamRGd2lLU0FtSmlBb0tHbHVkRzhwSUdsdWMzUmhibU5sYjJZZ1NGUk5URVZzWlcxbGJuUXBLU0I3WEc0Z0lDQWdZMjl1YzNRZ2NtVnpkV3gwSUQwZ2UzMWNiaUFnSUNCUFltcGxZM1F1YTJWNWN5aGxiQ2t1Wm05eVJXRmphQ2dvYm1GdFpTa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tHVnNXMjVoYldWZElHbHVjM1JoYm1ObGIyWWdTRlJOVEVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwVzI1aGJXVmRJRDBnVzJWc1cyNWhiV1ZkWFZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbGJGdHVZVzFsWFNBOVBUMGdYQ0p6ZEhKcGJtZGNJaWtnZTF4dUlDQWdJQ0FnSUNCeVpYTjFiSFJiYm1GdFpWMGdQU0JiTGk0dWFXNTBieTV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLR1ZzVzI1aGJXVmRLVjFjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1ZzYzJVZ2FXWWdLR1ZzVzI1aGJXVmRJQ1ltSUdWc1cyNWhiV1ZkTG1admNrVmhZMmdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwVzI1aGJXVmRJRDBnWld4YmJtRnRaVjFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVnh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFJjYmlBZ2ZWeHVJQ0JsYkhObElIdGNiaUFnSUNCeVpYUjFjbTRnZTMxY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmxkbVZ1ZEhNZ0tHVnNMQ0J6Wld4bUxDQmhjbWR6S1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnWld3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJsZG1WdWRITW9aV3d1WVhCd2JIa29jMlZzWml3Z1lYSm5jeWtzSUhObGJHWXNJR0Z5WjNNcFhHNGdJSDFjYmlBZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUdWc0lEMDlQU0JjSW05aWFtVmpkRndpS1NCN1hHNGdJQ0FnVDJKcVpXTjBMbXRsZVhNb1pXd3BMbVp2Y2tWaFkyZ29LSEJoYVhJcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElITndiR2wwSUQwZ2NHRnBjaTV6Y0d4cGRDaGNJaUJjSWlsY2JpQWdJQ0FnSUdsbUlDZ29kSGx3Wlc5bUlHVnNXM0JoYVhKZElEMDlQU0JjSW5OMGNtbHVaMXdpS1NBbUppQW9jM0JzYVhRdWJHVnVaM1JvSUQ0Z01Ta3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaWFp6SUQwZ2MzQnNhWFF1Y0c5d0tDbGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MyVnNaV04wYjNKeklEMGdjM0JzYVhRdWFtOXBiaWhjSWlCY0lpbGNiaUFnSUNBZ0lDQWdaV3hiY0dGcGNsMHVjM0JzYVhRb1hDSXNYQ0lwTG1admNrVmhZMmdvS0cxbGRHaHZaQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR1YyY3k1emNHeHBkQ2hjSWl4Y0lpa3VabTl5UldGamFDZ29aWFpsYm5ST1lXMWxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bFkzUnZjbk11YzNCc2FYUW9YQ0lzWENJcExtWnZja1ZoWTJnb0tITmxiR1ZqZEc5eUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdWIyUmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdadUlEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1piYldWMGFHOWtYUzVoY0hCc2VTaHpaV3htTENCaGNtZDFiV1Z1ZEhNcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVjJaVzUwVG1GdFpTQW1KaUFvZEhsd1pXOW1JSE5sYkdaYmJXVjBhRzlrWFNBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvYm05a1pTQTlJSE5sYkdZdVpXeGxiV1Z1ZEhOYmMyVnNaV04wYjNKZEtTQnBibk4wWVc1alpXOW1JRWhVVFV4RmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViMlJsTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWlhabGJuUk9ZVzFsTENCbWJpbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9ibTlrWlNBbUppQnViMlJsTG1admNrVmhZMmdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1V1Wm05eVJXRmphQ2dvYmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1pYWmxiblJPWVcxbExDQm1iaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tITmxiR1l1ZEdWdGNHeGhkR1VnSmlZZ0tHNXZaR1VnUFNCelpXeG1MblJsYlhCc1lYUmxMbkYxWlhKNVUyVnNaV04wYjNJb2MyVnNaV04wYjNJcEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtHVjJaVzUwVG1GdFpTd2dabTRwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1pXeGJjR0ZwY2wwZ1BUMDlJRndpYjJKcVpXTjBYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJWc1pXTjBiM0p6SUQwZ2MzQnNhWFF1YW05cGJpaGNJaUJjSWlsY2JpQWdJQ0FnSUNBZ1QySnFaV04wTG10bGVYTW9aV3hiY0dGcGNsMHBMbVp2Y2tWaFkyZ29LR1YyY3lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzFsZEdodlpDQTlJR1ZzVzNCaGFYSmRXMlYyYzExY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRzFsZEdodlpDQTlQVDBnWENKemRISnBibWRjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhaekxuTndiR2wwS0Z3aUxGd2lLUzVtYjNKRllXTm9LQ2hsZG1WdWRFNWhiV1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaV04wYjNKekxuTndiR2wwS0Z3aUxGd2lLUzVtYjNKRllXTm9LQ2h6Wld4bFkzUnZjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1YjJSbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWm00Z1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCZllYSm5jeUE5SUZzdUxpNWhjbWQxYldWdWRITmRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWVhKbmN5NTFibk5vYVdaMEtIUm9hWE1wWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeG1XMjFsZEdodlpGMHVZWEJ3Ykhrb2MyVnNaaXdnWDJGeVozTXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGRtVnVkRTVoYldVZ0ppWWdLSFI1Y0dWdlppQnpaV3htVzIxbGRHaHZaRjBnUFQwOUlGd2lablZ1WTNScGIyNWNJaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvYm05a1pTQTlJSE5sYkdZdVpXeGxiV1Z1ZEhOYmMyVnNaV04wYjNKZEtTQnBibk4wWVc1alpXOW1JRWhVVFV4RmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2WkdVdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lobGRtVnVkRTVoYldVc0lHWnVLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2JtOWtaU0FtSmlCdWIyUmxMbVp2Y2tWaFkyZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaUzVtYjNKRllXTm9LQ2h1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtHVjJaVzUwVG1GdFpTd2dabTRwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoelpXeG1MblJsYlhCc1lYUmxJQ1ltSUNodWIyUmxJRDBnYzJWc1ppNTBaVzF3YkdGMFpTNXhkV1Z5ZVZObGJHVmpkRzl5S0hObGJHVmpkRzl5S1NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtHVjJaVzUwVG1GdFpTd2dabTRwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2xjYmlBZ2ZWeHVmVnh1WEc1Y2JpOHFLbHh1SUNvZ0lFQmpiR0Z6Y3lBOFEyOXRjRzl1Wlc1MFBpQnBjeUIxYzJWa0lIUnZJR0oxYVd4a0lFUlBUU0JsYkdWdFpXNTBjeXdnWjJWdVpYSmhkR2x1WnlCa1lYUmhMQ0IwWlcxd2JHRjBaU0FtSUdWMlpXNTBjeTVjYmlBcUlDQWdJRUVnWTI5dGNHOXVaVzUwSUdOaGJpQmpiMjUwWVdsdUlHOTBhR1Z5SUdOdmJYQnZibVZ1ZEhNdVhHNGdLaTljYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdRMjl0Y0c5dVpXNTBJSHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRRzFsZEdodlpDQThZMjl1YzNSeWRXTjBiM0krSUdKMWFXeGtJSFJvYVhNZ2IySnFaV04wWEc0Z0lDQXFJRUJ3WVhKaGJTQjdTRlJOVEVWc1pXMWxiblI4VTNSeWFXNW5mRVoxYm1OMGFXOXVmU0JqYjI1MFlXbHVaWElnZDJsc2JDQmpiMjUwWVdsdUlIUm9hWE1nWTI5dGNHOXVaVzUwWEc0Z0lDQXFJRUJ3WVhKaGJTQjdLbjBnWVhKbmRXMWxiblJ6TGk0dUlHRnlaU0J3WVhOelpXUWdhVzRnZEdWdGNHeGhkR1VzSUdWc1pXMWxiblJ6SUdGdVpDQmxkbVZ1ZEhNZ1puVnVZM1JwYjI1elhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBOdmJYQnZibVZ1ZEgwZ2MyVnNabHh1SUNBZ0tpOWNibHh1SUNCamIyNXpkSEoxWTNSdmNpQW9LU0I3WEc0Z0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJRndpWDJKMWFXeGtaWEpjSWl3Z2UxeHVJQ0FnSUNBZ1hDSmxiblZ0WlhKaFlteGxYQ0k2SUdaaGJITmxMRnh1SUNBZ0lDQWdYQ0pqYjI1bWFXZDFjbUZpYkdWY0lqb2dabUZzYzJVc1hHNGdJQ0FnSUNCY0luWmhiSFZsWENJNklIdGNiaUFnSUNBZ0lDQWdkR1Z0Y0d4aGRHVTZJSFJvYVhNdWRHVnRjR3hoZEdVc1hHNGdJQ0FnSUNBZ0lHVnNaVzFsYm5Sek9pQjBhR2x6TG1Wc1pXMWxiblJ6TEZ4dUlDQWdJQ0FnSUNCbGRtVnVkSE02SUhSb2FYTXVaWFpsYm5SelhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNsY2JseHVJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBhR2x6TENCY0lsOWZaWFpsYm5SelgxOWNJaXdnZTF4dUlDQWdJQ0FnWENKbGJuVnRaWEpoWW14bFhDSTZJR1poYkhObExGeHVJQ0FnSUNBZ1hDSmpiMjVtYVdkMWNtRmliR1ZjSWpvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0JjSW5aaGJIVmxYQ0k2SUh0OVhHNGdJQ0FnZlNsY2JseHVJQ0FnSUhSb2FYTXVjMlYwVkdWdGNHeGhkR1VvTGk0dVcyNTFiR3dzSUM0dUxtRnlaM1Z0Wlc1MGMxMHBYRzRnSUgxY2JseHVYRzRnSUM4cUtseHVJQ0FnS2lCQWJXVjBhRzlrSUR4elpYUlVaVzF3YkdGMFpUNGdZblZwYkdRZ2RHaGxJRVJQVFNCdlppQjBhR2x6SUVOdmJYQnZibVZ1ZEN3Z2RHaGxiaUJzYVhOMElHVnNaVzFsYm5SekxGeHVJQ0FnS2lBZ0lDQm1hVzVoYkd4NUlHeHBibXNnWld4bGJXVnVkSE1nZDJsMGFDQmxkbVZ1ZEhNZ1puVnVZM1JwYjI1elhHNGdJQ0FxSUVCd1lYSmhiU0I3U0ZSTlRFVnNaVzFsYm5SOFJuVnVZM1JwYjI1OFUzUnlhVzVuZlNCa2IyMGdhWE1nZEdobElFaFVUVXdnYjJZZ2RHaHBjeUJqYjIxd2IyNWxiblJjYmlBZ0lDb2dRSEJoY21GdElIc3FmU0JoY21kMWJXVnVkSE11TGk0Z1lYSmxJSEJoYzNObFpDQnBiaUIwWlcxd2JHRjBaU3dnWld4bGJXVnVkSE1nWVc1a0lHVjJaVzUwY3lCbWRXNWpkR2x2Ym5OY2JpQWdJQ29nUUhKbGRIVnliaUI3UTI5dGNHOXVaVzUwZlNCelpXeG1YRzRnSUNBcUwxeHVYRzRnSUhObGRGUmxiWEJzWVhSbElDZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCYlpHOXRMQ0F1TGk1aGNtZHpYU0E5SUZzdUxpNWhjbWQxYldWdWRITmRMRnh1SUNBZ0lDQWdkSEJzSUQwZ2RHVnRjR3hoZEdVb1pHOXRJSHg4SUhSb2FYTXVYMkoxYVd4a1pYSXVkR1Z0Y0d4aGRHVXNJSFJvYVhNc0lHRnlaM01wWEc0Z0lDQWdhV1lnS0hSd2JDQnBibk4wWVc1alpXOW1JRWhVVFV4RmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMblJsYlhCc1lYUmxJRDBnZEhCc1hHNGdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUnpJRDBnWld4bGJXVnVkSE1vZEdocGN5NWZZblZwYkdSbGNpNWxiR1Z0Wlc1MGN5d2dkR2hwY3l3Z1lYSm5jeWxjYmlBZ0lDQWdJR1YyWlc1MGN5aDBhR2x6TGw5aWRXbHNaR1Z5TG1WMlpXNTBjeXdnZEdocGN5d2dZWEpuY3lsY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE5jYmlBZ2ZWeHVYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFQnRaWFJvYjJRZ1BITmxkRU52Ym5SaGFXNWxjajRnYzJWMElHWnBjbk4wSUhCaGNtRnRaWFJsY2lCaGN5QndZWEpsYm5RZ2IyWWdkR2hwY3lCamIyMXdiMjVsYm5SY2JpQWdJQ29nUUhCaGNtRnRJSHRJVkUxTVJXeGxiV1Z1ZEh4VGRISnBibWQ4Um5WdVkzUnBiMjU5SUdWc1pXMWxiblFnZDJsc2JDQmpiMjUwWVdsdUlIUm9hWE1nWTI5dGNHOXVaVzUwWEc0Z0lDQXFJRUJ3WVhKaGJTQjdLbjBnWVhKbmRXMWxiblJ6TGk0dUlHRnlaU0J3WVhOelpXUWdhVzRnZEdWdGNHeGhkR1VzSUdWc1pXMWxiblJ6SUdGdVpDQmxkbVZ1ZEhNZ1puVnVZM1JwYjI1elhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBOdmJYQnZibVZ1ZEgwZ2MyVnNabHh1SUNBZ0tpOWNibHh1SUNCelpYUkRiMjUwWVdsdVpYSWdLR1ZzWlcxbGJuUXBJSHRjYmlBZ0lDQmpiMjV6ZENCamIyNTBJRDBnWTI5dWRHRnBibVZ5S0dWc1pXMWxiblFzSUhSb2FYTXNJR0Z5WjNWdFpXNTBjeWxjYmlBZ0lDQnBaaUFvWTI5dWRDQnBibk4wWVc1alpXOW1JRWhVVFV4RmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbU52Ym5SaGFXNWxjaUE5SUdOdmJuUmNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxuUmxiWEJzWVhSbElHbHVjM1JoYm1ObGIyWWdTRlJOVEVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1MFlXbHVaWEl1WVhCd1pXNWtRMmhwYkdRb2RHaHBjeTUwWlcxd2JHRjBaU2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTmNiaUFnZlZ4dVhHNWNiaUFnTHk4Z1EwaEpURVFnUTA5TlVFOU9SVTVVVXlCTlFVNUJSMFZTWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJ0WlhSb2IyUWdQR05zWldGeVJXeGxiV1Z1ZEQ0Z1kyeGxZWElnWVc0Z1NGUk5UQ0JsYkdWdFpXNTBJRzltSUhSb2FYTWdRMjl0Y0c5dVpXNTBYRzRnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCdVlXMWxJR2x6SUhSb1pTQnVZVzFsSUc5bUlIUm9aU0JJVkUxTUlHVnNaVzFsYm5SY2JpQWdJQ29nUUhKbGRIVnliaUI3UTI5dGNHOXVaVzUwZlNCelpXeG1YRzRnSUNBcUlFQjBhSEp2ZDNNZ2UwVnljbTl5ZlNCcFppQjBhR1VnYm1GdFpTQmtiMlZ6SUc1dmRDQnRZWFJqYUNCaGJpQmxiR1Z0Wlc1MFhHNGdJQ0FxTDF4dVhHNGdJR05zWldGeVJXeGxiV1Z1ZENBb2JtRnRaU2tnZTF4dUlDQWdJR3hsZENCbGJHVnRaVzUwWEc0Z0lDQWdhV1lnS0hSb2FYTXVaV3hsYldWdWRITmJibUZ0WlYwZ0ppWWdLRnRsYkdWdFpXNTBYU0E5SUhSb2FYTXVaV3hsYldWdWRITmJibUZ0WlYwcEtTQjdYRzRnSUNBZ0lDQjNhR2xzWlNBb1pXeGxiV1Z1ZEM1bWFYSnpkRU5vYVd4a0tWeHVJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExuSmxiVzkyWlVOb2FXeGtLR1ZzWlcxbGJuUXVabWx5YzNSRGFHbHNaQ2xjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6WEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0JGYkdWdFpXNTBJRndpSkh0dVlXMWxmVndpSUdseklHNXZkQ0JoYmlCbGJHVnRaVzUwSUc5bUlIUm9hWE1nWTI5dGNHOXVaVzUwWUNsY2JpQWdJQ0I5WEc0Z0lIMWNibHh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFiV1YwYUc5a0lEeGhjSEJsYm1SRGIyMXdiMjVsYm5RK0lHRndjR1Z1WkNCaElFTnZiWEJ2Ym1WdWRDQnBiaUIwYUdseklFTnZiWEJ2Ym1WdWRDQklWRTFNSUdWc1pXMWxiblJjYmlBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHNWhiV1VnYVhNZ2RHaGxJRzVoYldVZ2IyWWdkR2hsSUVoVVRVd2daV3hsYldWdWRGeHVJQ0FnS2lCQWNHRnlZVzBnZTBOdmJYQnZibVZ1ZEgwZ1kyOXRjRzl1Wlc1MElHbHpJSFJvWlNCRGIyMXdiMjVsYm5RZ2RHOGdZWEJ3Wlc1a0lHbHVJSFJvWlNCSVZFMU1JR1ZzWlcxbGJuUmNiaUFnSUNvZ1FISmxkSFZ5YmlCN1EyOXRjRzl1Wlc1MGZTQnpaV3htWEc0Z0lDQXFJRUIwYUhKdmQzTWdlMFZ5Y205eWZTQnBaaUIwYUdVZ2JtRnRaU0JrYjJWeklHNXZkQ0J0WVhSamFDQmhiaUJsYkdWdFpXNTBJRzl5SUdsbUlIUm9aU0JqYjIxd2IyNWxiblJjYmlBZ0lDb2dJQ0FnYVhNZ2JtOTBJR0VnUTI5dGNHOXVaVzUwSUdsdWMzUmhibU5sTGx4dUlDQWdLaTljYmx4dUlDQmhjSEJsYm1SRGIyMXdiMjVsYm5RZ0tHNWhiV1VzSUdOdmJYQnZibVZ1ZENrZ2UxeHVJQ0FnSUd4bGRDQmxiR1Z0Wlc1MFhHNGdJQ0FnYVdZZ0tIUm9hWE11Wld4bGJXVnVkSE5iYm1GdFpWMGdKaVlnS0Z0bGJHVnRaVzUwWFNBOUlIUm9hWE11Wld4bGJXVnVkSE5iYm1GdFpWMHBLU0I3WEc0Z0lDQWdJQ0JwWmlBb1kyOXRjRzl1Wlc1MElHbHVjM1JoYm1ObGIyWWdRMjl0Y0c5dVpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJYQnZibVZ1ZEM1elpYUkRiMjUwWVdsdVpYSW9aV3hsYldWdWRDbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE5jYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSlRaV052Ym1RZ2NHRnlZVzFsZEdWeUlHbHpJRzV2ZENCaElFTnZiWEJ2Ym1WdWRDQnZZbXBsWTNSY0lpbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lFVnNaVzFsYm5RZ1hDSWtlMjVoYldWOVhDSWdhWE1nYm05MElHRnVJR1ZzWlcxbGJuUWdiMllnZEdocGN5QmpiMjF3YjI1bGJuUmdLVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCdFpYUm9iMlFnUEdacGJHeERiMjF3YjI1bGJuUStJSE5sZENCamIyMXdiMjVsYm5RZ1lYTWdiMjVzZVNCamFHbHNaQ0J2WmlCSVZFMU1JR1ZzWlcxbGJuUWdiMllnZEdocGMxeHVJQ0FnS2lBZ0lDQmllU0JqYkdWaGNtbHVaeUIwYUdWdUlHRndjR1Z1WkdsdVp5QkRiMjF3YjI1bGJuUXVYRzRnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCdVlXMWxJR2x6SUhSb1pTQnVZVzFsSUc5bUlIUm9aU0JJVkUxTUlHVnNaVzFsYm5SY2JpQWdJQ29nUUhCaGNtRnRJSHREYjIxd2IyNWxiblI5SUdOdmJYQnZibVZ1ZENCcGN5QjBhR1VnUTI5dGNHOXVaVzUwSUhSdklHRndjR1Z1WkNCcGJpQjBhR1VnU0ZSTlRDQmxiR1Z0Wlc1MFhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBOdmJYQnZibVZ1ZEgwZ2MyVnNabHh1SUNBZ0tpQkFkR2h5YjNkeklIdEZjbkp2Y24wZ2FXWWdkR2hsSUc1aGJXVWdaRzlsY3lCdWIzUWdiV0YwWTJnZ1lXNGdaV3hsYldWdWRDQnZjaUJwWmlCMGFHVWdZMjl0Y0c5dVpXNTBYRzRnSUNBcUlDQWdJR2x6SUc1dmRDQmhJRU52YlhCdmJtVnVkQ0JwYm5OMFlXNWpaUzVjYmlBZ0lDb3ZYRzVjYmlBZ1ptbHNiRU52YlhCdmJtVnVkQ0FvYm1GdFpTd2dZMjl0Y0c5dVpXNTBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTJ4bFlYSkZiR1Z0Wlc1MEtHNWhiV1VwTG1Gd2NHVnVaRU52YlhCdmJtVnVkQ2h1WVcxbExDQmpiMjF3YjI1bGJuUXBYRzRnSUgxY2JseHVYRzRnSUM4dklGUkZUVkJNUVZSRklFSlZTVXhFUlZKVFhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCdFpYUm9iMlFnUEhSbGJYQnNZWFJsUGlCemFHOTFiR1FnWW1VZ2IzWmxjbkpwWkdWdUlHRnVaQ0J6YUc5MWJHUWdjbVYwZFhKdUlIUmxlSFFnYVc0Z1NGUk5URnh1SUNBZ0tpQWdJQ0JtYjNKdFlYUWdiM0lnWVc0Z1NGUk5URVZzWlcxbGJuUXVYRzRnSUNBcUlFQndZWEpoYlNCN0tuMGdZWEpuZFcxbGJuUnpMaTR1SUdGeVpTQjBjbUZ1YzJabGNtVmtJR1p5YjIwZ1BHTnZibk4wY25WamRHOXlQbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdFRkSEpwYm1kOFNGUk5URVZzWlcxbGJuUjhablZ1WTNScGIyNTlYRzRnSUNBcUwxeHVYRzRnSUhSbGJYQnNZWFJsSUNncElIdGNiaUFnSUNCeVpYUjFjbTRnWENKY0lseHVJQ0I5WEc1Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUUcxbGRHaHZaQ0E4Wld4bGJXVnVkSE0rSUhOb2IzVnNaQ0JpWlNCdmRtVnljbWxrWlc0Z1lXNWtJSE5vYjNWc1pDQnlaWFIxY200Z2IySnFaV04wSUhkb1pYSmxJR3RsZVhOY2JpQWdJQ29nSUNBZ1lYSmxJSFJvWlNCdVlXMWxMQ0JoYm1RZ2RHaGxJSFpoYkhWbGN5QmhjbVVnZEdobElITmxiR1ZqZEc5eUlHbHVJSFJvYVhNZ1kyOXRjRzl1Wlc1MElDaHViM1JjYmlBZ0lDb2dJQ0FnYVhSeklHTm9hV3hrY21WdUlTa3VYRzRnSUNBcUlFQndZWEpoYlNCN0tuMGdZWEpuZFcxbGJuUnpMaTR1SUdGeVpTQjBjbUZ1YzJabGNtVmtJR1p5YjIwZ1BHTnZibk4wY25WamRHOXlQbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdFBZbXBsWTNSOFpuVnVZM1JwYjI1OVhHNGdJQ0FxSUVCM1lYSnVJSFJvYVhNZ1puVnVZM1JwYjI0Z1pHOWxjeUJ1YjNRZ2MyVnNaV04wSUdOb2FXeGtJR052YlhCdmJtVnVkSE1nWld4bGJXVnVkSE11WEc0Z0lDQXFMMXh1WEc0Z0lHVnNaVzFsYm5SeklDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2UzMWNiaUFnZlZ4dVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCdFpYUm9iMlFnUEdWc1pXMWxiblJ6UGlCemFHOTFiR1FnWW1VZ2IzWmxjbkpwWkdWdUlHRnVaQ0J6YUc5MWJHUWdjbVYwZFhKdUlHOWlhbVZqZENCM2FHVnlaU0JyWlhselhHNGdJQ0FxSUNBZ0lHRnlaU0IwYUdVZ2JtRnRaU0J6Y0dGalpXUWdkMmwwYUNCbGRtVnVkQ3dnWVc1a0lIUm9aU0IyWVd4MVpYTWdZWEpsSUhSb1pTQmpiMjF3YjI1bGJuUWdiV1YwYUc5a2MxeHVJQ0FnS2lBZ0lDQjBieUJqWVd4c0lIZG9aVzRnWlhabGJuUWdhWE1nZEhKcFoyZGxjbVZrSUNodWIzUWdhWFJ6SUdOb2FXeGtjbVZ1SVNrdVhHNGdJQ0FxSUVCd1lYSmhiU0I3S24wZ1lYSm5kVzFsYm5SekxpNHVJR0Z5WlNCMGNtRnVjMlpsY21Wa0lHWnliMjBnUEdOdmJuTjBjblZqZEc5eVBseHVJQ0FnS2lCQWNtVjBkWEp1SUh0UFltcGxZM1I4Wm5WdVkzUnBiMjU5WEc0Z0lDQXFMMXh1WEc0Z0lHVjJaVzUwY3lBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUh0OVhHNGdJSDFjYmx4dVhHNGdJQzh2SUVWWVZFVlNUa0ZNSUVWV1JVNVVVMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFiV1YwYUc5a0lEeHNhWE4wWlc0K0lHeHBjM1JsYmlCaGJpQmxkbVZ1ZENBa2UyVjJaVzUwVG1GdFpYMGdhR0Z3Y0dWdWFXNW5JR0Z1WkNCeVpXZHBjM1JsY2lCMGFHVmNiaUFnSUNvZ0lDQWdablZ1WTNScGIyNGdKSHRtYm4wZ2RHOGdaWGhsWTNWMFpTQnBkQ0IzYUdWdUlHVjJaVzUwSUdoaGNIQmxiaTVjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOFFYSnlZWGw5SUdWMlpXNTBUbUZ0WlZ4dUlDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmRUZ5Y21GNWZTQm1ibHh1SUNBZ0tpQkFjbVYwZFhKdUlIdERiMjF3YjI1bGJuUjlJSE5sYkdaY2JpQWdJQ292WEc1Y2JpQWdiR2x6ZEdWdUlDaGxkbVZ1ZEU1aGJXVXNJR1p1S1NCN1hHNGdJQ0FnWTI5dWMzUWdjMlZzWmlBOUlIUm9hWE5jYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1YyWlc1MFRtRnRaU0E5UFQwZ1hDSnpkSEpwYm1kY0lpa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2RDQTlJR1YyWlc1MFRtRnRaUzV6Y0d4cGRDZ3ZXMXhjYmx4Y2N5eGRLeTluS1Z4dUlDQWdJQ0FnYVdZZ0tIUXViR1Z1WjNSb0lENGdNU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXNhWE4wWlc0b1d5NHVMblJkTENCbWJpbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGxkbVZ1ZEU1aGJXVXBLU0I3WEc0Z0lDQWdJQ0JsZG1WdWRFNWhiV1V1Wm05eVJXRmphQ2dvWlhZcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNXNhWE4wWlc0b1pYWXNJR1p1S1Z4dUlDQWdJQ0FnZlNsY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR1p1S1NrZ2UxeHVJQ0FnSUNBZ1ptNHVabTl5UldGamFDZ29aaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnpaV3htTG14cGMzUmxiaWhsZG1WdWRFNWhiV1VzSUdZcFhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTmNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHWnVJRDA5UFNCY0ltWjFibU4wYVc5dVhDSXBJSHRjYmlBZ0lDQWdJR052Ym5OMElHVjJjeUE5SUhSb2FYTmJYQ0pmWDJWMlpXNTBjMTlmWENKZFhHNGdJQ0FnSUNCcFppQW9JVUZ5Y21GNUxtbHpRWEp5WVhrb1pYWnpXMlYyWlc1MFRtRnRaVjBwS1NCN1hHNGdJQ0FnSUNBZ0lHVjJjMXRsZG1WdWRFNWhiV1ZkSUQwZ1cxMWNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHVjJjMXRsZG1WdWRFNWhiV1ZkTG5CMWMyZ29abTRwWEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpYRzRnSUgxY2JseHVYRzRnSUM4cUtseHVJQ0FnS2lCQWJXVjBhRzlrSUR4a2FYTndZWFJqYUQ0Z2RISnBaMmRsY2lCaGJpQmxkbVZ1ZENBa2UyVjJaVzUwVG1GdFpYMGdhR0Z3Y0dWdWFXNW5JR0Z1WkNCbGVHVmpkWFJsSUhSb1pWeHVJQ0FnS2lBZ0lDQnlaV2RwYzNSbGNtVmtJR1oxYm1OMGFXOXVjeTVjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOFFYSnlZWGw5SUdWMlpXNTBUbUZ0WlZ4dUlDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0JoY21kelhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBOdmJYQnZibVZ1ZEgwZ2MyVnNabHh1SUNBZ0tpOWNibHh1SUNCa2FYTndZWFJqYUNBb1pYWmxiblJPWVcxbExDQmhjbWR6S1NCN1hHNGdJQ0FnWTI5dWMzUWdjMlZzWmlBOUlIUm9hWE5jYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1YyWlc1MFRtRnRaU0E5UFQwZ1hDSnpkSEpwYm1kY0lpa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2RDQTlJR1YyWlc1MFRtRnRaUzV6Y0d4cGRDZ3ZXMXhjYmx4Y2N5eGRLeTluS1Z4dUlDQWdJQ0FnYVdZZ0tIUXViR1Z1WjNSb0lENGdNU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXNhWE4wWlc0b1d5NHVMblJkTENCaGNtZHpLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR1YyWlc1MFRtRnRaU2twSUh0Y2JpQWdJQ0FnSUdWMlpXNTBUbUZ0WlM1bWIzSkZZV05vS0NobGRpa2dQVDRnZTF4dUlDQWdJQ0FnSUNCelpXeG1MbXhwYzNSbGJpaGxkaXdnWVhKbmN5bGNiaUFnSUNBZ0lIMHBYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUdWMmN5QTlJSFJvYVhOYlhDSmZYMlYyWlc1MGMxOWZYQ0pkWEc0Z0lDQWdhV1lnS0NGQmNuSmhlUzVwYzBGeWNtRjVLR1YyYzF0bGRtVnVkRTVoYldWZEtTa2dlMXh1SUNBZ0lDQWdaWFp6VzJWMlpXNTBUbUZ0WlYwZ1BTQmJYVnh1SUNBZ0lIMWNiaUFnSUNCbGRuTmJaWFpsYm5ST1lXMWxYUzVtYjNKRllXTm9LQ2htYmlrZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29ZWEpuY3lrcElIdGNiaUFnSUNBZ0lDQWdabTR1WVhCd2JIa29iblZzYkN3Z1lYSm5jeWxjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQm1iaWdwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2xjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXh1SUNCOVhHNWNibHh1SUNBdktpcGNiaUFnSUNvZ1FHMWxkR2h2WkNBOFpHVjBZV05vUGlCeVpXMXZkbVVnZEdobElISmxaMmx6ZEdWeVpXUWdablZ1WTNScGIyNGdKSHRtYm4wZ2JHbHpkR1Z1WldRZ1lua2daWFpsYm5SY2JpQWdJQ29nSUNBZ0pIdGxkbVZ1ZEU1aGJXVjlMQ0J2Y2lCaGJHd2diMllnYVhSeklHWjFibU4wYVc5dWN5QnBaaUFrZTJadWZTQnBjeUIxYm1SbFptbHVaV1JjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOFFYSnlZWGw5SUdWMlpXNTBUbUZ0WlZ4dUlDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmRUZ5Y21GNWZTQm1ibHh1SUNBZ0tpQkFjbVYwZFhKdUlIdERiMjF3YjI1bGJuUjlJSE5sYkdaY2JpQWdJQ292WEc1Y2JpQWdaR1YwWVdOb0lDaGxkbVZ1ZEU1aGJXVXNJR1p1S1NCN1hHNGdJQ0FnWTI5dWMzUWdjMlZzWmlBOUlIUm9hWE5jYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1YyWlc1MFRtRnRaU0E5UFQwZ1hDSnpkSEpwYm1kY0lpa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2RDQTlJR1YyWlc1MFRtRnRaUzV6Y0d4cGRDZ3ZXMXhjYmx4Y2N5eGRLeTluS1Z4dUlDQWdJQ0FnYVdZZ0tIUXViR1Z1WjNSb0lENGdNU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXNhWE4wWlc0b1d5NHVMblJkTENCbWJpbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGxkbVZ1ZEU1aGJXVXBLU0I3WEc0Z0lDQWdJQ0JsZG1WdWRFNWhiV1V1Wm05eVJXRmphQ2dvWlhZcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYzJWc1ppNXNhWE4wWlc0b1pYWXNJR1p1S1Z4dUlDQWdJQ0FnZlNsY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR1p1S1NrZ2UxeHVJQ0FnSUNBZ1ptNHVabTl5UldGamFDZ29aaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnpaV3htTG14cGMzUmxiaWhsZG1WdWRFNWhiV1VzSUdZcFhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTmNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0JsZG5NZ1BTQjBhR2x6VzF3aVgxOWxkbVZ1ZEhOZlgxd2lYVnh1SUNBZ0lHbG1JQ2doUVhKeVlYa3VhWE5CY25KaGVTaGxkbk5iWlhabGJuUk9ZVzFsWFNrcElIdGNiaUFnSUNBZ0lHVjJjMXRsZG1WdWRFNWhiV1ZkSUQwZ1cxMWNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHWnVJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lHVjJjMXRsZG1WdWRFNWhiV1ZkSUQwZ1cxMWNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQmxkbk5iWlhabGJuUk9ZVzFsWFNBOUlHVjJjMXRsZG1WdWRFNWhiV1ZkTG5Oc2FXTmxLR1YyYzF0bGRtVnVkRTVoYldWZExtbHVaR1Y0VDJZb1ptNHBLVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZEdocGMxeHVJQ0I5WEc1Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUUcxbGRHaHZaQ0E4YkdsemRHVnVUMjVqWlQ0Z2JHbHpkR1Z1SUdWMlpXNTBJQ1I3WlhabGJuUk9ZVzFsZlNCb1lYQndaVzVwYm1jZ1ptOXlJR1Y0WldOMWRHbHVaMXh1SUNBZ0tpQWdJQ0JtZFc1amRHbHZiaUFrZTJadWZTQnZibXg1SUc5dVpTQjBhVzFsTGx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozeEJjbkpoZVgwZ1pYWmxiblJPWVcxbFhHNGdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU4UVhKeVlYbDlJR1p1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlME52YlhCdmJtVnVkSDBnYzJWc1pseHVJQ0FnS2k5Y2JseHVJQ0JzYVhOMFpXNVBibU5sSUNobGRtVnVkRTVoYldVc0lHWnVLU0I3WEc0Z0lDQWdZMjl1YzNRZ2MyVnNaaUE5SUhSb2FYTXNYRzRnSUNBZ0lDQmtaV3dnUFNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhObGJHWXVaR1YwWVdOb0tHVjJaVzUwVG1GdFpTd2dabTRwWEc0Z0lDQWdJQ0FnSUhObGJHWXVaR1YwWVdOb0tHVjJaVzUwVG1GdFpTd2daR1ZzS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSFJvYVhNdWJHbHpkR1Z1S0dWMlpXNTBUbUZ0WlN3Z1ptNHBYRzRnSUNBZ2RHaHBjeTVzYVhOMFpXNG9aWFpsYm5ST1lXMWxMQ0JrWld3cFhHNGdJQ0FnY21WMGRYSnVJSFJvYVhOY2JpQWdmVnh1ZlZ4dUlpd2lablZ1WTNScGIyNGdaMlYwUTNWemRHOXRRMmhwYkdSeVpXNGdLRzV2WkdVcElIdGNiaUFnY21WMGRYSnVJRnN1TGk1dWIyUmxMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29UMkpxWldOMExtdGxlWE1vUkVWR1NVNUZVeWt1YW05cGJpaGNJaXhjSWlrdWRHOVZjSEJsY2tOaGMyVW9LU2xkWEc1OVhHNWNibVoxYm1OMGFXOXVJSFJsYzNRZ0tHNXZaR1VwSUh0Y2JpQWdZMjl1YzNRZ1JHVm1JRDBnUkVWR1NVNUZVMXR1YjJSbExtNXZaR1ZPWVcxbExuUnZWWEJ3WlhKRFlYTmxLQ2xkWEc0Z0lHbG1JQ2hFUlVaSlRrVkVMbWx1WkdWNFQyWW9ibTlrWlNrZ0lUMDlJQzB4S1NCN1hHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JpQWdaV3h6WlNCcFppQW9SR1ZtS1NCN1hHNGdJQ0FnYm1WM0lFUmxaaWh1YjJSbEtTQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxXNWxkMXh1SUNBZ0lHTnZibk4wSUdOb2FXeGtjbVZ1SUQwZ1oyVjBRM1Z6ZEc5dFEyaHBiR1J5Wlc0b2JtOWtaU2xjYmlBZ0lDQnBaaUFvWTJocGJHUnlaVzR1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0JqYUdsc1pISmxiaTVtYjNKRllXTm9LQ2hqYUdsc1pDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCamFHbHNaQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpYkc5aFpGd2lMQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmphR2xzWkhKbGJpNW1hV3gwWlhJb0tGOWphR2xzWkNrZ1BUNGdleUJ5WlhSMWNtNGdSRVZHU1U1RlJDNXBibVJsZUU5bUtGOWphR2xzWkNrZ1BUMDlJQzB4SUgwcExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnUkVWR1NVNUZSQzV3ZFhOb0tHNXZaR1VwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnViMlJsTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVWMlpXNTBLRndpYkc5aFpGd2lLU2xjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJRVJGUmtsT1JVUXVjSFZ6YUNodWIyUmxLVnh1SUNBZ0lDQWdibTlrWlM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRmRtVnVkQ2hjSW14dllXUmNJaWtwWEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYVdZZ0tHNXZaR1V1WTJocGJHUk9iMlJsY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0J1YjJSbExtTm9hV3hrVG05a1pYTXVabTl5UldGamFDaDBaWE4wS1Z4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHOXViRzloWkNBb0tTQjdYRzRnSUdOdmJuTjBJRzF2SUQwZ2JtVjNJRTExZEdGMGFXOXVUMkp6WlhKMlpYSW9LRzExZEdGMGFXOXVjeWtnUFQ0Z2UxeHVJQ0FnSUcxMWRHRjBhVzl1Y3k1bWIzSkZZV05vS0NodGRYUmhkR2x2YmlrZ1BUNGdlMXh1SUNBZ0lDQWdiWFYwWVhScGIyNHVZV1JrWldST2IyUmxjeTVtYjNKRllXTm9LSFJsYzNRcFhHNGdJQ0FnZlNsY2JpQWdmU2xjYmx4dUlDQmpiMjV6ZENCamJtWWdQU0I3WEc0Z0lDQWdZWFIwY21saWRYUmxjem9nZEhKMVpTeGNiaUFnSUNCamFHbHNaRXhwYzNRNklIUnlkV1VzWEc0Z0lDQWdZMmhoY21GamRHVnlSR0YwWVRvZ2RISjFaU3hjYmlBZ0lDQnpkV0owY21WbE9pQjBjblZsWEc0Z0lIMWNibHh1SUNCdGJ5NXZZbk5sY25abEtHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvWENKb2RHMXNYQ0lwTENCamJtWXBYRzU5WEc1Y2JuZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aWJHOWhaRndpTENCdmJteHZZV1FwWEc1cFppQW9kMmx1Wkc5M0xtUnZZM1Z0Wlc1MExuSmxZV1I1VTNSaGRHVWdQVDA5SUZ3aVkyOXRjR3hsZEdWY0lpa2dlMXh1SUNCdmJteHZZV1FvS1Z4dWZWeHVYRzVjYm1OdmJuTjBJRVJGUmtsT1JWTWdQU0I3ZlZ4dVkyOXVjM1FnUkVWR1NVNUZSQ0E5SUZ0ZFhHNWNiaThxS2x4dUlDb2dRR1oxYm1OMGFXOXVJRHhrWldacGJtVStJSEoxYmlCaElHWjFibU4wYVc5dUlDUjdZblZwYkdSbGNuMGdaV0ZqYUNBa2UyNXZaR1ZPWVcxbGZTQm1hWEp6ZENCcGJuTmxjblJwYjI1Y2JpQXFJQ0FnSUdsdUlHTjFjbkpsYm5RZ1NGUk5UQ0JFYjJOMWJXVnVkQzVjYmlBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCdWIyUmxUbUZ0WlNCcGN5QjBhR1VnYm05a1pVNWhiV1VnYjJZZ2VXOTFjaUJJVkUxTVJXeGxiV1Z1ZEN3Z2NHeGxZWE5sSUhWelpTQmpiM0p5WldOMElITndaV3hzYVc1blhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JpZFdsc1pHVnlJR2x6SUhSb1pTQm1kVzVqZEdsdmJpQnlkVzRnZDJobGJpQmhiaUJJVkUxTVJXeGxiV1Z1ZENCMGFHRjBJRzFoZEdOb1hHNGdLaUFnSUNCdWIyUmxUbUZ0WlNCcGN5QnBibk5sY25SbFpDQnBiaUJqZFhKeVpXNTBJRWhVVFV3Z1JHOWpkVzFsYm5RdlhHNGdLaTljYmx4dVpuVnVZM1JwYjI0Z1pHVm1hVzVsSUNodWIyUmxUbUZ0WlN3Z1luVnBiR1JsY2lrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUc1dlpHVk9ZVzFsSUNFOVBTQmNJbk4wY21sdVoxd2lLVnh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrWnBjbk4wSUhCaGNtRnRaWFJsY2lCemFHOTFiR1FnWW1VZ1lTQnpkSEpwYm1jZ0tIUnZJSE5sYkdWamRDQnBkR1Z0Y3lCaWVTQnViMlJsSUc1aGJXVWdhVzRnWkc5dElIUnlaV1VwWENJcFhHNGdJR2xtSUNoMGVYQmxiMllnWW5WcGJHUmxjaUFoUFQwZ1hDSm1kVzVqZEdsdmJsd2lLVnh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lsTmxZMjl1WkNCd1lYSmhiV1YwWlhJZ2MyaHZkV3hrSUdKbElHRWdZMnhoYzNNZ2IzSWdZU0JtZFc1amRHbHZiaUFvZEc4Z1kyOXVjM1J5ZFdOMElHbDBaVzBwWENJcFhHNGdJRVJGUmtsT1JWTmJibTlrWlU1aGJXVXVkRzlWY0hCbGNrTmhjMlVvS1YwZ1BTQmlkV2xzWkdWeU8xeHVJQ0JiTGk0dVpHOWpkVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNodWIyUmxUbUZ0WlM1MGIxVndjR1Z5UTJGelpTZ3BLVjB1Wm05eVJXRmphQ2gwWlhOMEtWeHVmVnh1WEc1Y2JpOHFLbHh1SUNvZ1FHTnNZWE56SUR4RGRYTjBiMjFJVkUxTVJXeGxiV1Z1ZEQ0Z2FYTWdZVzRnWVdKemRISmhZM1FnWTJ4aGMzTWdabTl5SUdobGJIQnBibWNnWkdWMlhHNGdLaTljYmx4dVkyeGhjM01nUTNWemRHOXRTRlJOVEVWc1pXMWxiblFnZTF4dWZWeHVYRzVsZUhCdmNuUWdleUJrWldacGJtVWdZWE1nWkdWbVlYVnNkQ3dnWkdWbWFXNWxMQ0JEZFhOMGIyMUlWRTFNUld4bGJXVnVkQ0I5WEc0aUxDSnBiWEJ2Y25RZ1EyOXRjRzl1Wlc1MElHWnliMjBnWENJdUwyTnZiWEJ2Ym1WdWRGd2lYRzVwYlhCdmNuUWdVMlZqZEdsdmJpQm1jbTl0SUZ3aUxpOXpaV04wYVc5dVhDSmNibHh1THlvcVhHNGdLaUJBWTJ4aGMzTWdQRkJoWjJVK0lHbHpJR0VnUTI5dGNHOXVaVzUwSUhkb2FXTm9JR2x6SUhObGRDQmhjeUJ2Ym14NUlHTm9hV3hrSUc5bUlFUnZZM1Z0Wlc1MElHSnZaSGtnWVhSY2JpQXFJQ0FnSUhScGJXVXVJRUVnYzJWamRHbHZiaUJwY3lCa1pXWnBibVZrSUhkcGRHZ2dZU0JRWVdkbExDQnpieUIzYUdWdUlHRWdjMlZqZEdsdmJpQnBjeUJqWVd4c1pXUXNJSFJvWlZ4dUlDb2dJQ0FnY0dGblpTQjNjbUZ3SUhSb1pTQnZibXg1SUdOb2FXeGtJSE5sWTNScGIyNGdhVzRnZEdobElIQmhaMlV1SUVsMElITnBiWEJzYVdaNUlIUm9aU0JqYjI1emRISjFZM1JwYjI1Y2JpQXFJQ0FnSUc5bUlIUm9aU0JFVDAwdVhHNGdLaUJBZDJGeWJpQlFZV2RsTG1Wc1pXMWxiblJ6SUhOb2IzVnNaQ0JqYjI1MFlXbHVJRndpYzJWamRHbHZibHdpSUdWc1pXMWxiblJjYmlBcUlFQmhaSFpwYzJVZ1FTQnphVzVuYkdVZ1kyaHBiR1FnWTJ4aGMzTWdiMllnVUdGblpTQnBibk4wWVc1alpTQnphRzkxYkdRZ1pYaHBjM1J6SUhOdklIQnNaV0Z6WlZ4dUlDb2dJQ0FnWTJGc2JDQlFZV2RsTG1kbGRGQmhaMlZDZVVOdmJuTjBjblZqZEc5eUtIQmhaMlVwSUdsdUlITmxZM1JwYjI0dVhHNGdLaTljYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVR0ZuWlNCbGVIUmxibVJ6SUVOdmJYQnZibVZ1ZENCN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCdFpYUm9iMlFnUEdOdmJuTjBjblZqZEc5eVBpQmhkQ0JqYjI1emRISjFZM1JwYjI0Z2IyWWdkR2hwY3lCUVlXZGxMQ0IwYUdVZ2NHRm5aU0JtYVd4c0lIUm9aVnh1SUNBZ0tpQWdJQ0JFYjJOMWJXVnVkQ0JpYjJSNUlHRnpJRzl1YkhrZ1kyaHBiR1F1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMUJoWjJWOUlITmxiR1pjYmlBZ0lDb3ZYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSWdLQ2tnZTF4dUlDQWdJSE4xY0dWeUtGQmhaMlV1WTI5dWRHRnBibVZ5S1Z4dUlDQWdJSFJvYVhNdWRHVnRjR3hoZEdVdWMyVjBRWFIwY21saWRYUmxLRndpY0dGblpWd2lMQ0IwYUdsekxuUmxiWEJzWVhSbExtZGxkRUYwZEhKcFluVjBaU2hjSW1OdmJYQnZibVZ1ZEZ3aUtTbGNiaUFnSUNCMGFHbHpMblJsYlhCc1lYUmxMbkpsYlc5MlpVRjBkSEpwWW5WMFpTaGNJbU52YlhCdmJtVnVkRndpS1Z4dUlDQWdJRkJoWjJVdWFXNXpkR0Z1WTJWelczUm9hWE11WTI5dWMzUnlkV04wYjNJdWJtRnRaVjBnUFNCMGFHbHpYRzRnSUgxY2JseHVYRzRnSUM4cUtseHVJQ0FnS2lCQWJXVjBhRzlrSUR4elpYUlRaV04wYVc5dVBpQm1hV3hzSUhSb2FYTWdjR0ZuWlNCM2FYUm9JR0VnVTJWamRHbHZibHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxTmxZM1JwYjI1OUlITmxZM1JwYjI1Y2JpQWdJQ29nUUhKbGRIVnliaUI3VUdGblpYMGdjMlZzWmx4dUlDQWdLaTljYmx4dUlDQnpaWFJUWldOMGFXOXVJQ2h6WldOMGFXOXVLU0I3WEc0Z0lDQWdhV1lnS0hObFkzUnBiMjRnYVc1emRHRnVZMlZ2WmlCVFpXTjBhVzl1S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbVpwYkd4RGIyMXdiMjVsYm5Rb1hDSnpaV04wYVc5dVhDSXNJSE5sWTNScGIyNHBYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJSDFjYmx4dVhHNGdJQzhxS2x4dUlDQWdLaUJBYldWMGFHOWtJRHh6WlhSUVlXZGxQaUJ6WlhRZ2RHaHBjeUJ3WVdkbElHRnpJRzl1YkhrZ2NHRm5aU0IzY21Gd2NHVnlJRzl1SUhSb2FYTWdSRzlqZFcxbGJuUWdZbTlrZVZ4dUlDQWdLaUFnSUNCaGJtUWdjMlYwSUdFZ2MyVmpkR2x2YmlCcFppQnpaWFFnYVc0Z2NHRnlZVzFsZEdWeUxseHVJQ0FnS2lCQWNHRnlZVzBnZTFObFkzUnBiMjU5SUhObFkzUnBiMjVjYmlBZ0lDb3ZYRzVjYmlBZ2MyVjBVR0ZuWlNBb2MyVmpkR2x2YmlrZ2UxeHVJQ0FnSUdsbUlDaFFZV2RsTG5CaFoyVWdJVDA5SUhSb2FYTXBJSHRjYmlBZ0lDQWdJR052Ym5OMElHbHVkRzhnUFNCUVlXZGxMbU52Ym5SaGFXNWxjbHh1SUNBZ0lDQWdkMmhwYkdVZ0tHbHVkRzh1Wm1seWMzUkRhR2xzWkNsY2JpQWdJQ0FnSUNBZ2FXNTBieTV5WlcxdmRtVkRhR2xzWkNocGJuUnZMbVpwY25OMFEyaHBiR1FwWEc0Z0lDQWdJQ0IwYUdsekxuTmxkRU52Ym5SaGFXNWxjaWhwYm5SdktWeHVJQ0FnSUNBZ1VHRm5aUzV3WVdkbElEMGdkR2hwYzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6WlhSVFpXTjBhVzl1S0hObFkzUnBiMjRwWEc0Z0lIMWNibHh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFablZ1WTNScGIyNGdQSE5sZEVOdmJuUmhhVzVsY2o0Z2MyVjBJSFJvWlNCamIyNTBZV2x1WlhJZ2QyaGxjbVVnWlhabGNua2djR0ZuWlhNZ2MyaHZkV3hrSUdKbFhHNGdJQ0FxSUNBZ0lHWnBiR3hsWkNCcGJpNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0SVZFMU1SV3hsYldWdWRIeEdkVzVqZEdsdmJueFRkSEpwYm1kOUlHbHVkRzljYmlBZ0lDb3ZYRzVjYmlBZ2MzUmhkR2xqSUhObGRFTnZiblJoYVc1bGNpQW9hVzUwYnlrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FXNTBieUE5UFQwZ1hDSm1kVzVqZEdsdmJsd2lLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdVR0ZuWlM1elpYUkRiMjUwWVdsdVpYSW9hVzUwYnlncEtWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdsdWRHOGdQVDA5SUZ3aWMzUnlhVzVuWENJcElIdGNiaUFnSUNBZ0lHbHVkRzhnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLR2x1ZEc4cFhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNocGJuUnZJR2x1YzNSaGJtTmxiMllnU0ZSTlRFVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lGQmhaMlV1WTI5dWRHRnBibVZ5SUQwZ2FXNTBiMXh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJRkJoWjJVdVkyOXVkR0ZwYm1WeUlEMGdVR0ZuWlM1amIyNTBZV2x1WlhJZ2ZId2daRzlqZFcxbGJuUXVZbTlrZVZ4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoUVlXZGxMbkJoWjJVcElIdGNiaUFnSUNBZ0lGQmhaMlV1Y0dGblpTNXpaWFJEYjI1MFlXbHVaWElvYVc1MGJ5bGNiaUFnSUNCOVhHNGdJSDFjYmx4dVhHNGdJQzhxS2x4dUlDQWdLaUJBWm5WdVkzUnBiMjRnUEdkbGRFTjFjbkpsYm5SUVlXZGxQaUJ5WlhSMWNtNXpJR3hoYzNRZ2NHRm5aU0J6WlhRZ2FXNGdZbTlrZVZ4dUlDQWdLaUJBY21WMGRYSnVJSHRRWVdkbGZWeHVJQ0FnS2k5Y2JseHVJQ0J6ZEdGMGFXTWdaMlYwUTNWeWNtVnVkRkJoWjJVZ0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCUVlXZGxMbkJoWjJWY2JpQWdmVnh1WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJtZFc1amRHbHZiaUE4WjJWMFVHRm5aVUo1UTI5dWMzUnlkV04wYjNJK0lISmxkSFZ5Ym5NZ1lTQlFZV2RsSUdsdWMzUmhibU5sSUc5bUlDUjdRMjl1YzNSeWZTQnBaaUJwZEZ4dUlDQWdLaUFnSUNCbGVHbHpkSE1nYjNJZ1lTQnVaWGNnYVc1emRHRnVZMlV1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdVR0ZuWlgwZ1EyOXVjM1J5WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMUJoWjJWOVhHNGdJQ0FxTDF4dVhHNGdJSE4wWVhScFl5Qm5aWFJRWVdkbFFubERiMjV6ZEhKMVkzUnZjaUFvUTI5dWMzUnlLU0I3WEc0Z0lDQWdZMjl1YzNRZ2FXNXpkQ0E5SUZCaFoyVXVhVzV6ZEdGdVkyVnpXME52Ym5OMGNpNXVZVzFsWFZ4dUlDQWdJR2xtSUNocGJuTjBJR2x1YzNSaGJtTmxiMllnVUdGblpTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHbHVjM1JjYmlBZ0lDQjlYRzRnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVOdmJuTjBjaWdwWEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYmxCaFoyVXVhVzV6ZEdGdVkyVnpJRDBnZTMxY2JsQmhaMlV1WTI5dWRHRnBibVZ5SUQwZ2JuVnNiRnh1SWl3aWFXMXdiM0owSUVOdmJYQnZibVZ1ZENCbWNtOXRJRndpTGk5amIyMXdiMjVsYm5SY0lseHVhVzF3YjNKMElGQmhaMlVnWm5KdmJTQmNJaTR2Y0dGblpWd2lYRzVjYmk4cUtseHVJQ29nUUdOc1lYTnpJRHhUWldOMGFXOXVQaUJwY3lCaElFTnZiWEJ2Ym1WdWRDQjNhR2xqYUNCemFHOTFiR1FnWW1VZ2IyNXNlU0JqYUdsc1pDQnZaaUJoSUhCaFoyVWdLSGRvYVdOb1hHNGdLaUFnSUNCcGN5QjBhR1VnYjI1c2VTQmphR2xzWkNCdlppQkViMk4xYldWdWRDQmliMlI1S1NCaGRDQjBhVzFsTGx4dUlDb2dRSGRoY200Z1UyVmpkR2x2Ymk1M2NtRndjR1Z5S0NrZ2MyaHZkV3hrSUhKbGRIVnliaUJoSUZCaFoyVWdZMjl1YzNSeWRXTjBiM0lzSUdWc2MyVWdibTkwYUdsdVp5QnBjMXh1SUNvZ0lDQWdaR2x6Y0d4aGVXVmtMbHh1SUNvdlhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZObFkzUnBiMjRnWlhoMFpXNWtjeUJEYjIxd2IyNWxiblFnZTF4dVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCdFpYUm9iMlFnUEdOdmJuTjBjblZqZEc5eVBseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjeUJwY3lCMGNtRnVjMlpsY21Wa0lIUnZJRk5sWTNScGIyNHVkR1Z0Y0d4aGRHVXNJRk5sWTNScGIyNHVaV3hsYldWdWRITmNiaUFnSUNvZ0lDQWdZVzVrSUZObFkzUnBiMjR1WlhabGJuUnpMbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdFRaV04wYVc5dWZTQnpaV3htWEc0Z0lDQXFMMXh1WEc0Z0lHTnZibk4wY25WamRHOXlJQ2dwSUh0Y2JpQWdJQ0J6ZFhCbGNpZ3VMaTVoY21kMWJXVnVkSE1wWEc0Z0lDQWdkR2hwY3k1MFpXMXdiR0YwWlM1elpYUkJkSFJ5YVdKMWRHVW9YQ0p6WldOMGFXOXVYQ0lzSUhSb2FYTXVkR1Z0Y0d4aGRHVXVaMlYwUVhSMGNtbGlkWFJsS0Z3aVkyOXRjRzl1Wlc1MFhDSXBLVnh1SUNBZ0lIUm9hWE11ZEdWdGNHeGhkR1V1Y21WdGIzWmxRWFIwY21saWRYUmxLRndpWTI5dGNHOXVaVzUwWENJcFhHNGdJSDFjYmx4dVhHNGdJQzhxS2x4dUlDQWdLaUJBYldWMGFHOWtJRHh6WlhSVFpXTjBhVzl1UGlCelpYUWdkR2hwY3lCelpXTjBhVzl1SUdsdUlFUnZZM1Z0Wlc1MElHRnpJRzl1YkhrZ1kyaHBiR1FnYjJZZ1lTQlFZV2RsWEc0Z0lDQXFJQ0FnSUdGdVpDQlFZV2RsSUdsdWMzUmhibU5sSUdGeklHOXViSGtnWTJocGJHUWdiMllnUkc5amRXMWxiblFnWW05a2VTNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1UyVmpkR2x2Ym4wZ2MyVnNabHh1SUNBZ0tpOWNibHh1SUNCelpYUlRaV04wYVc5dUlDZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCd1lXZGxJRDBnZEdocGN5NW5aWFJYY21Gd2NHVnlLQ2xjYmlBZ0lDQnBaaUFvY0dGblpTa2dlMXh1SUNBZ0lDQWdjR0ZuWlM1elpYUlFZV2RsS0hSb2FYTXBYRzRnSUNBZ0lDQjBhR2x6TGw5aWRXbHNaR1Z5TG5keVlYQndaWElnUFNCd1lXZGxYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJSDFjYmx4dVhHNGdJQzhxS2x4dUlDQWdLaUJBYldWMGFHOWtJRHhuWlhSWGNtRndjR1Z5UGlCeVpYUjFjbTV6SUhObFkzUnBiMjRnZDNKaGNIQmxjaUJqYjIxd2IyNWxiblFzSUdFZ1VHRm5aU0JwYm5OMFlXNWpaVnh1SUNBZ0tpQkFjbVYwZFhKdUlIdFFZV2RsZlNCaElHTnZiWEJ2Ym1WdWRDQjNhR2xqYUNCM2NtRndJSFJvYVhNZ2MyVmpkR2x2Ymx4dUlDQWdLaTljYmx4dUlDQm5aWFJYY21Gd2NHVnlJQ2dwSUh0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11WDJKMWFXeGtaWEl1ZDNKaGNIQmxjaWtnZTF4dUlDQWdJQ0FnZEdocGN5NWZZblZwYkdSbGNpNTNjbUZ3Y0dWeUlEMGdVR0ZuWlM1blpYUlFZV2RsUW5sRGIyNXpkSEoxWTNSdmNpaDBhR2x6TG5keVlYQndaWElvS1NsY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJKMWFXeGtaWEl1ZDNKaGNIQmxjbHh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCdFpYUm9iMlFnUEhkeVlYQndaWEkrSUhOb2IzVnNaQ0JpWlNCdmRtVnljbWxrWlc0Z1lXNWtJSE5vYjNWc1pDQnlaWFIxY200Z1lTQlFZV2RsSUdOb2FXeGtJR05zWVhOelhHNGdJQ0FxSUNBZ0lHTnZibk4wY25WamRHOXlMbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdFFZV2RsZlNCM2FHbGphQ0IzYVd4c0lIZHlZWEFnZEdocGN5QnpaV04wYVc5dVhHNGdJQ0FxTDF4dVhHNGdJSGR5WVhCd1pYSWdLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVkV3hzWEc0Z0lIMWNibjFjYmlJc0lpOHFLbHh1SUNvZ0lFQm1kVzVqZEdsdmJpQThZV3BoZUQ0Z1pYaGxZM1YwWlNCaElISmxjWFZsYzNRZ2RHOGdjMlZ5ZG1WeVhHNGdLaUFnUUhCaGNtRnRJSHR6ZEhKcGJtZDhablZ1WTNScGIyNThiMkpxWldOMGZTQnRaWFJvYjJRZ2IzSWdZblZwYkdSbGNseHVJQ29nSUVCd1lYSmhiU0I3YzNSeWFXNW5mR1oxYm1OMGFXOXVmU0IxY21rZ2RHOGdjbVZ6YjNWeVkyVmNiaUFxSUNCQWNHRnlZVzBnZTNOMGNtbHVaM3htZFc1amRHbHZibjBnWkdGMFlTQjBieUJ6Wlc1a0lHbHVJSEpsY1hWbGMzUWdZbTlrZVZ4dUlDb2dJRUJ3WVhKaGJTQjdablZ1WTNScGIyNThRWEp5WVhrdVBHWjFibU4wYVc5dVBuMGdjM1ZqWTJWemN5Qm1kVzVqZEdsdmJuTmNiaUFxSUNCQWNHRnlZVzBnZTJaMWJtTjBhVzl1ZkVGeWNtRjVManhtZFc1amRHbHZiajU5SUdaaGFXeDFjbVVnWm5WdVkzUnBiMjV6WEc0Z0tpQWdRSEJoY21GdElIdHZZbXBsWTNSOFpuVnVZM1JwYjI1OUlHaGxZV1JsY25NZ2RHOGdjMlZ1WkNCMGJ5QnlaWEYxWlhOMElHaGxZV1JsY25OY2JpQXFJQ0JBY0dGeVlXMGdlM04wY21sdVozeG1kVzVqZEdsdmJuMGdiM1psY25KcFpHVk5hVzFsVkhsd1pTQjBieUJsYm1admNtTmxJSEpsYzNCdmJuTmxJSEpsWVdScGJtY2dabTl5YldGMFhHNGdLaUFnUUhKbGRIVnliaUI3VUhKdmJXbHpaWDFjYmlBcUwxeHVYRzVtZFc1amRHbHZiaUJoYW1GNElDZ3VMaTVoY21kektTQjdYRzRnSUdOdmJuTjBJR0oxYVd4a1pYSWdQU0JoYW1GNFVHRnlZVzFsZEdWeWN5NWhjSEJzZVNodWRXeHNMQ0JoY21kektWeHVYRzRnSUdOdmJuTjBJSEJ5YjIwZ1BTQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdlR2h5SUQwZ2JtVjNJRmhOVEVoMGRIQlNaWEYxWlhOMEtDbGNibHh1SUNBZ0lIaG9jaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRndpYkc5aFpHVnVaRndpTENBb0tTQTlQaUI3WEc0Z0lDQWdJQ0J5WlhOdmJIWmxLSGhvY2lsY2JpQWdJQ0I5S1Z4dUlDQWdJSGhvY2k1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aVpYSnliM0pjSWl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnY21WcVpXTjBLSGhvY2lsY2JpQWdJQ0I5S1Z4dVhHNGdJQ0FnZUdoeUxtOXdaVzRvWW5WcGJHUmxjaTV0WlhSb2IyUXNJR0oxYVd4a1pYSXVkWEpwS1Z4dVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCaWRXbHNaR1Z5TG1obFlXUmxjbk1nUFQwOUlGd2liMkpxWldOMFhDSWdKaVlnWW5WcGJHUmxjaTVvWldGa1pYSnpJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0JQWW1wbFkzUXVhMlY1Y3loaWRXbHNaR1Z5TG1obFlXUmxjbk1wTG1admNrVmhZMmdvS0d0bGVTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J6ZEhJZ1BTQjBjbmxGZUdWaktHSjFhV3hrWlhJdWFHVmhaR1Z5YzF0clpYbGRLVnh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhOMGNpQTlQVDBnWENKemRISnBibWRjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSGhvY2k1elpYUlNaWEYxWlhOMFNHVmhaR1Z5S0d0bGVTd2djM1J5S1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1luVnBiR1JsY2k1dmRtVnljbWxrWlUxcGJXVlVlWEJsSUQwOVBTQmNJbk4wY21sdVoxd2lLU0I3WEc0Z0lDQWdJQ0I0YUhJdWIzWmxjbkpwWkdWTmFXMWxWSGx3WlNoaWRXbHNaR1Z5TG05MlpYSnlhV1JsVFdsdFpWUjVjR1VwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdlR2h5TG5ObGJtUW9ZblZwYkdSbGNpNWtZWFJoS1Z4dUlDQjlLVnh1WEc0Z0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHSjFhV3hrWlhJdWMzVmpZMlZ6Y3lrcElIdGNiaUFnSUNCaWRXbHNaR1Z5TG5OMVkyTmxjM011Wm05eVJXRmphQ2dvWm00cElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWm00Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlsY2JpQWdJQ0FnSUNBZ2NISnZiUzUwYUdWdUtHWnVLVnh1SUNBZ0lIMHBYRzRnSUgxY2JpQWdhV1lnS0hSNWNHVnZaaUJpZFdsc1pHVnlMbk4xWTJObGMzTWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2dlMXh1SUNBZ0lIQnliMjB1ZEdobGJpaGlkV2xzWkdWeUxuTjFZMk5sYzNNcFhHNGdJSDFjYmx4dUlDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGlkV2xzWkdWeUxtWmhhV3gxY21VcEtTQjdYRzRnSUNBZ1luVnBiR1JsY2k1bVlXbHNkWEpsTG1admNrVmhZMmdvS0dadUtTQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdadUlEMDlQU0JjSW1aMWJtTjBhVzl1WENJcFhHNGdJQ0FnSUNBZ0lIQnliMjB1WTJGMFkyZ29abTRwWEc0Z0lDQWdmU2xjYmlBZ2ZWeHVJQ0JwWmlBb2RIbHdaVzltSUdKMWFXeGtaWEl1Wm1GcGJIVnlaU0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lLU0I3WEc0Z0lDQWdjSEp2YlM1allYUmphQ2hpZFdsc1pHVnlMbVpoYVd4MWNtVXBYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjSEp2YlZ4dWZWeHVYRzVjYmk4cUtseHVJQ29nSUVCbWRXNWpkR2x2YmlBOFlXcGhlRkJoY21GdFpYUmxjbk0rSUdWNFpXTjFkR1VnY0dGeVlXMWxkR1Z5Y3lCaGJtUWdjbVYwZFhKdWN5QnBiaUJuYjI5a0lHWnZjbTFoZEZ4dUlDb2dJRUJ3WVhKaGJTQjdjM1J5YVc1bmZHWjFibU4wYVc5dWZHOWlhbVZqZEgwZ2JXVjBhRzlrSUc5eUlHSjFhV3hrWlhKY2JpQXFJQ0JBY0dGeVlXMGdlM04wY21sdVozeG1kVzVqZEdsdmJuMGdkWEpwSUhSdklISmxjMjkxY21ObFhHNGdLaUFnUUhCaGNtRnRJSHR6ZEhKcGJtZDhablZ1WTNScGIyNTlJR1JoZEdFZ2RHOGdjMlZ1WkNCcGJpQnlaWEYxWlhOMElHSnZaSGxjYmlBcUlDQkFjR0Z5WVcwZ2UyWjFibU4wYVc5dWZFRnljbUY1TGp4bWRXNWpkR2x2Ymo1OUlITjFZMk5sYzNNZ1puVnVZM1JwYjI1elhHNGdLaUFnUUhCaGNtRnRJSHRtZFc1amRHbHZibnhCY25KaGVTNDhablZ1WTNScGIyNCtmU0JtWVdsc2RYSmxJR1oxYm1OMGFXOXVjMXh1SUNvZ0lFQndZWEpoYlNCN2IySnFaV04wZkdaMWJtTjBhVzl1ZlNCb1pXRmtaWEp6SUhSdklITmxibVFnZEc4Z2NtVnhkV1Z6ZENCb1pXRmtaWEp6WEc0Z0tpQWdRSEJoY21GdElIdHpkSEpwYm1kOFpuVnVZM1JwYjI1OUlHOTJaWEp5YVdSbFRXbHRaVlI1Y0dVZ2RHOGdaVzVtYjNKalpTQnlaWE53YjI1elpTQnlaV0ZrYVc1bklHWnZjbTFoZEZ4dUlDb2dJRUJ5WlhSMWNtNGdlMDlpYW1WamRIMWNiaUFxTDF4dVhHNW1kVzVqZEdsdmJpQmhhbUY0VUdGeVlXMWxkR1Z5Y3lBb2JXVjBhRzlrTENCMWNta3NJR1JoZEdFc0lITjFZMk5sYzNNc0lHWmhhV3gxY21Vc0lHaGxZV1JsY25Nc0lHOTJaWEp5YVdSbFRXbHRaVlI1Y0dVcElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCdFpYUm9iMlFnUFQwOUlGd2liMkpxWldOMFhDSXBJSHRjYmlBZ0lDQnlaWFIxY200Z1lXcGhlRkJoY21GdFpYUmxjbk1vWEc0Z0lDQWdJQ0J0WlhSb2IyUXViV1YwYUc5a0xGeHVJQ0FnSUNBZ2JXVjBhRzlrTG5WeWFTQjhmQ0J0WlhSb2IyUXVkWEpzSUh4OElHMWxkR2h2WkM1bWFXeGxJSHg4SUcxbGRHaHZaQzV6YjNWeVkyVXNYRzRnSUNBZ0lDQnRaWFJvYjJRdVpHRjBZU0I4ZkNCdFpYUm9iMlF1WW05a2VTQjhmQ0J0WlhSb2IyUXVjRzl6ZEN4Y2JpQWdJQ0FnSUcxbGRHaHZaQzV6ZFdOalpYTnpJSHg4SUcxbGRHaHZaQzVzYjJGa0xGeHVJQ0FnSUNBZ2JXVjBhRzlrTG1aaGFXeDFjbVVnZkh3Z2JXVjBhRzlrTG1WeWNtOXlMRnh1SUNBZ0lDQWdiV1YwYUc5a0xtaGxZV1JsY25Nc1hHNGdJQ0FnSUNCdFpYUm9iMlF1YjNabGNuSnBaR1ZOYVcxbFZIbHdaVnh1SUNBZ0lDbGNiaUFnZlZ4dUlDQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdiV1YwYUc5a09pQjBjbmxGZUdWakxtTmhiR3dvZEdocGN5d2diV1YwYUc5a0xDQmNJa2RGVkZ3aUxDQmhjbWQxYldWdWRITXBMRnh1SUNBZ0lDQWdkWEpwT2lCMGNubEZlR1ZqTG1OaGJHd29kR2hwY3l3Z2RYSnBMQ0JjSWx3aUxDQmhjbWQxYldWdWRITXBMRnh1SUNBZ0lDQWdaR0YwWVRvZ2RISjVSWGhsWXk1allXeHNLSFJvYVhNc0lHUmhkR0VzSUc1MWJHd3NJR0Z5WjNWdFpXNTBjeWtzWEc0Z0lDQWdJQ0J6ZFdOalpYTnpMRnh1SUNBZ0lDQWdabUZwYkhWeVpTeGNiaUFnSUNBZ0lHaGxZV1JsY25NNklIUnllVVY0WldNdVkyRnNiQ2gwYUdsekxDQm9aV0ZrWlhKekxDQnVkV3hzTENCaGNtZDFiV1Z1ZEhNcExGeHVJQ0FnSUNBZ2IzWmxjbkpwWkdWTmFXMWxWSGx3WlRvZ2RISjVSWGhsWXk1allXeHNLSFJvYVhNc0lHOTJaWEp5YVdSbFRXbHRaVlI1Y0dVc0lHNTFiR3dzSUdGeVozVnRaVzUwY3lsY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVhHNHZLaXBjYmlBcUlDQkFablZ1WTNScGIyNGdQSFJ5ZVVWNFpXTStJR1Y0WldOMWRHVWdlMlp1ZlNCcFppQnBkQ0JwY3lCaElHWjFibU4wYVc5dUlHOXlYRzRnS2lBZ0lDQnlaWFIxY200Z2UyWnVmU0JwWmlCcGRDQnBjeUJoSUhOMGNtbHVaeUJ2Y2x4dUlDb2dJQ0FnY21WMGRYSnVJSHRrWldaOUxseHVJQ29nSUVCeVpYUjFjbTRnZTNOMGNtbHVaM3dxZlZ4dUlDb3ZYRzVjYm1aMWJtTjBhVzl1SUhSeWVVVjRaV01nS0dadUxDQmtaV1lzSUdGeVozTXBJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQm1iaUE5UFQwZ1hDSm1kVzVqZEdsdmJsd2lLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWnVMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozTXBYRzRnSUgxY2JpQWdhV1lnS0hSNWNHVnZaaUJtYmlBOVBUMGdYQ0p6ZEhKcGJtZGNJaWtnZTF4dUlDQWdJSEpsZEhWeWJpQm1ibHh1SUNCOVhHNGdJSEpsZEhWeWJpQmtaV1pjYm4xY2JseHVaWGh3YjNKMElIc2dZV3BoZUNCaGN5QmtaV1poZFd4MExDQmhhbUY0TENCaGFtRjRVR0Z5WVcxbGRHVnljeXdnZEhKNVJYaGxZeUI5WEc0aUxDSnBiWEJ2Y25RZ1lXcGhlQ0JtY205dElGd2lMaTloYW1GNFhDSmNibHh1Wm5WdVkzUnBiMjRnYldWeVoyVWdLQzR1TG1GeVozTXBJSHRjYmlBZ1kyOXVjM1FnY21WemRXeDBJRDBnZTMwc0lITjFZMk5sYzNNZ1BTQmJYU3dnWm1GcGJIVnlaU0E5SUZ0ZFhHNGdJSGRvYVd4bElDaGhjbWR6TG14bGJtZDBhQ2tnZTF4dUlDQWdJR052Ym5OMElHSjFhV3hrWlhJZ1BTQmhjbWR6TG5Ob2FXWjBLQ2xjYmlBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGlkV2xzWkdWeUxuTjFZMk5sYzNNcEtTQnpkV05qWlhOekxtTnZibU5oZENoaWRXbHNaR1Z5TG5OMVkyTmxjM01wWEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJpZFdsc1pHVnlMbk4xWTJObGMzTWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2djM1ZqWTJWemN5NXdkWE5vS0dKMWFXeGtaWEl1YzNWalkyVnpjeWxjYmlBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGlkV2xzWkdWeUxtWmhhV3gxY21VcEtTQm1ZV2xzZFhKbExtTnZibU5oZENoaWRXbHNaR1Z5TG1aaGFXeDFjbVVwWEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJpZFdsc1pHVnlMbVpoYVd4MWNtVWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2dabUZwYkhWeVpTNXdkWE5vS0dKMWFXeGtaWEl1Wm1GcGJIVnlaU2xjYmlBZ0lDQlBZbXBsWTNRdVlYTnphV2R1S0hKbGMzVnNkQ3dnWW5WcGJHUmxjaWxjYmlBZ2ZWeHVJQ0J5WlhOMWJIUXVjM1ZqWTJWemN5QTlJSE4xWTJObGMzTmNiaUFnY21WemRXeDBMbVpoYVd4MWNtVWdQU0JtWVdsc2RYSmxYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUmNibjFjYmx4dVhHNHZLaXBjYmlBcUlDQkFablZ1WTNScGIyNGdQR0ZxWVhoUVlYSmhiV1YwWlhKelBpQmxlR1ZqZFhSbElIQmhjbUZ0WlhSbGNuTWdZVzVrSUhKbGRIVnlibk1nYVc0Z1oyOXZaQ0JtYjNKdFlYUmNiaUFxSUNCQWNHRnlZVzBnZTNOMGNtbHVaM3htZFc1amRHbHZibnh2WW1wbFkzUjlJRzFsZEdodlpDQnZjaUJpZFdsc1pHVnlYRzRnS2lBZ1FIQmhjbUZ0SUh0emRISnBibWQ4Wm5WdVkzUnBiMjU5SUhWeWFTQjBieUJ5WlhOdmRYSmpaVnh1SUNvZ0lFQndZWEpoYlNCN2MzUnlhVzVuZkdaMWJtTjBhVzl1ZlNCa1lYUmhJSFJ2SUhObGJtUWdhVzRnY21WeGRXVnpkQ0JpYjJSNVhHNGdLaUFnUUhCaGNtRnRJSHRtZFc1amRHbHZibnhCY25KaGVTNDhablZ1WTNScGIyNCtmU0J6ZFdOalpYTnpJR1oxYm1OMGFXOXVjMXh1SUNvZ0lFQndZWEpoYlNCN1puVnVZM1JwYjI1OFFYSnlZWGt1UEdaMWJtTjBhVzl1UG4wZ1ptRnBiSFZ5WlNCbWRXNWpkR2x2Ym5OY2JpQXFJQ0JBY0dGeVlXMGdlMjlpYW1WamRIeG1kVzVqZEdsdmJuMGdhR1ZoWkdWeWN5QjBieUJ6Wlc1a0lIUnZJSEpsY1hWbGMzUWdhR1ZoWkdWeWMxeHVJQ29nSUVCd1lYSmhiU0I3YzNSeWFXNW5mR1oxYm1OMGFXOXVmU0J2ZG1WeWNtbGtaVTFwYldWVWVYQmxJSFJ2SUdWdVptOXlZMlVnY21WemNHOXVjMlVnY21WaFpHbHVaeUJtYjNKdFlYUmNiaUFxSUNCQWNtVjBkWEp1SUh0UFltcGxZM1I5WEc0Z0tpOWNibHh1Wm5WdVkzUnBiMjRnWVdwaGVGQmhjbUZ0WlhSbGNuTWdLRzFsZEdodlpDd2dkWEpwTENCa1lYUmhMQ0J6ZFdOalpYTnpMQ0JtWVdsc2RYSmxMQ0JvWldGa1pYSnpMQ0J2ZG1WeWNtbGtaVTFwYldWVWVYQmxLU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdiV1YwYUc5a0lEMDlQU0JjSW05aWFtVmpkRndpSUNZbUlHMWxkR2h2WkNBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJoYW1GNFVHRnlZVzFsZEdWeWN5aGNiaUFnSUNBZ0lHMWxkR2h2WkM1dFpYUm9iMlFzWEc0Z0lDQWdJQ0J0WlhSb2IyUXVkWEpwSUh4OElHMWxkR2h2WkM1MWNtd2dmSHdnYldWMGFHOWtMbVpwYkdVZ2ZId2diV1YwYUc5a0xuTnZkWEpqWlN4Y2JpQWdJQ0FnSUcxbGRHaHZaQzVrWVhSaElIeDhJRzFsZEdodlpDNWliMlI1SUh4OElHMWxkR2h2WkM1d2IzTjBMRnh1SUNBZ0lDQWdiV1YwYUc5a0xuTjFZMk5sYzNNZ2ZId2diV1YwYUc5a0xteHZZV1FzWEc0Z0lDQWdJQ0J0WlhSb2IyUXVabUZwYkhWeVpTQjhmQ0J0WlhSb2IyUXVaWEp5YjNJc1hHNGdJQ0FnSUNCdFpYUm9iMlF1YUdWaFpHVnljeXhjYmlBZ0lDQWdJRzFsZEdodlpDNXZkbVZ5Y21sa1pVMXBiV1ZVZVhCbFhHNGdJQ0FnS1Z4dUlDQjlYRzRnSUdWc2MyVWdlMXh1SUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNCdFpYUm9iMlFzWEc0Z0lDQWdJQ0IxY21rc1hHNGdJQ0FnSUNCa1lYUmhMRnh1SUNBZ0lDQWdjM1ZqWTJWemN5eGNiaUFnSUNBZ0lHWmhhV3gxY21Vc1hHNGdJQ0FnSUNCb1pXRmtaWEp6TEZ4dUlDQWdJQ0FnYjNabGNuSnBaR1ZOYVcxbFZIbHdaVnh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVjYmk4cUtseHVJQ29nSUVCamJHRnpjeUE4VW1WemIzVnlZMlUrSUhOMGIzSmxJRzFsZEdodlpITWdiMjRnWVNCamIyMXRiMjRnWkdsemRHRnVkQ0JjSW5KbGMyOTFjbU5sWENJdUlFRWdaR2x6ZEdGdWRGeHVJQ29nSUNBZ2NtVnpiM1Z5WTJVZ2FYTWdZU0J6ZEhKbFlXMGdkMmwwYUNCellXMWxJRzl5YVdkcGJpQmhibVFnS0dGc2JXOXpkQ2tnYzJGdFpTQmhZMlZ6Y3lCdFpYUm9iMlJ6TEZ4dUlDb2dJQ0FnYkdsclpTQmhJR1JoZEdFZ2MyVnlkbVZ5TGx4dUlDb2dJQ0FnVEc5dmF5QmpZWEpsWm5Wc2JIa3NJSFJvWlNCamIyNXpkSEoxWTNSdmNpd2dkR2hsSUdGa1pFMWxkR2h2WkNCaGJtUWdaV0ZqYUNCdFpYUm9iMlJ6SUdGeVpTQmpZV3hzWldSY2JpQXFJQ0FnSUhkcGRHZ2djMkZ0WlNCd1lYSmhiV1YwWlhKekxDQmxlR05sY0hRZ1lXUmtUV1YwYUc5a0lIZG9hV05vSUdoaGN5QmhJRndpYm1GdFpWd2lJR0YwSUdacGNuTjBYRzRnS2lBZ0lDQndZWEpoYldWMFpYSXVJRlJvWlhObGN5QndZWEpoYldWMFpYSnpJR0Z5WlNCdFpYSm5aV1FnZEc4Z1kzSmxZWFJsSUhSb1pTQm1hVzVoYkNCaWRXbHNaR1Z5SUdadmNseHVJQ29nSUNBZ2RHaGxJSEpsY1hWbGMzUXVYRzRnS2k5Y2JseHVZMnhoYzNNZ1VtVnpiM1Z5WTJVZ2UxeHVYRzRnSUM4cUtseHVJQ0FnS2lBZ1FHMWxkR2h2WkNBOFkyOXVjM1J5ZFdOMGIzSStYRzRnSUNBcUlDQkFjR0Z5WVcwZ2UzTjBjbWx1WjN4bWRXNWpkR2x2Ym54dlltcGxZM1I5SUcxbGRHaHZaQ0J2Y2lCaWRXbHNaR1Z5WEc0Z0lDQXFJQ0JBY0dGeVlXMGdlM04wY21sdVozeG1kVzVqZEdsdmJuMGdkWEpwSUhSdklISmxjMjkxY21ObFhHNGdJQ0FxSUNCQWNHRnlZVzBnZTNOMGNtbHVaM3htZFc1amRHbHZibjBnWkdGMFlTQjBieUJ6Wlc1a0lHbHVJSEpsY1hWbGMzUWdZbTlrZVZ4dUlDQWdLaUFnUUhCaGNtRnRJSHRtZFc1amRHbHZibnhCY25KaGVTNDhablZ1WTNScGIyNCtmU0J6ZFdOalpYTnpJR1oxYm1OMGFXOXVjMXh1SUNBZ0tpQWdRSEJoY21GdElIdG1kVzVqZEdsdmJueEJjbkpoZVM0OFpuVnVZM1JwYjI0K2ZTQm1ZV2xzZFhKbElHWjFibU4wYVc5dWMxeHVJQ0FnS2lBZ1FIQmhjbUZ0SUh0dlltcGxZM1I4Wm5WdVkzUnBiMjU5SUdobFlXUmxjbk1nZEc4Z2MyVnVaQ0IwYnlCeVpYRjFaWE4wSUdobFlXUmxjbk5jYmlBZ0lDb2dJRUJ3WVhKaGJTQjdjM1J5YVc1bmZHWjFibU4wYVc5dWZTQnZkbVZ5Y21sa1pVMXBiV1ZVZVhCbElIUnZJR1Z1Wm05eVkyVWdjbVZ6Y0c5dWMyVWdjbVZoWkdsdVp5Qm1iM0p0WVhSY2JpQWdJQ29nSUVCeVpYUjFjbTRnZTFKbGMyOTFjbU5sZlNCelpXeG1YRzRnSUNBcUwxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUlDZ3VMaTVoY21kektTQjdYRzRnSUNBZ2RHaHBjeTVqYjIxdGIyNUNkV2xzWkdWeUlEMGdZV3BoZUZCaGNtRnRaWFJsY25NdVlYQndiSGtvYm5Wc2JDd2dZWEpuY3lsY2JpQWdJQ0IwYUdsekxtMWxkR2h2WkhOQ2RXbHNaR1Z5SUQwZ2UzMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUFnUUcxbGRHaHZaQ0E4WVdSa1RXVjBhRzlrUGlCeVpXZHBjM1JsY2lCaElHNWxkeUJ0WlhSb2IyUWdiMllnZEdocGN5QnlaWE52ZFhKalpTd2dkMmhwWTJnZ1kyOTFiR1FnWW1VZ1kyRnNiR1ZrWEc0Z0lDQXFJQ0FnSUNBZ2QybDBhQ0J5WlhOdmRYSmpaUzRrZTI1aGJXVjlLRzFsZEdodlpDd2dkWEpwTENCa1lYUmhMQ0J6ZFdOalpYTnpMQ0JtWVdsc2RYSmxMQ0JvWldGa1pYSnpMQ0J2ZG1WeWNtbGtaVTFwYldWVWVYQmxLUzVjYmlBZ0lDb2dJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVZVzFsSUhWelpXUWdkRzhnWTJGc2JDQjBhR1VnYldWMGFHOWtMbHh1SUNBZ0tpQWdRSEJoY21GdElIdHpkSEpwYm1kOFpuVnVZM1JwYjI1OGIySnFaV04wZlNCdFpYUm9iMlFnYjNJZ1luVnBiR1JsY2x4dUlDQWdLaUFnUUhCaGNtRnRJSHR6ZEhKcGJtZDhablZ1WTNScGIyNTlJSFZ5YVNCMGJ5QnlaWE52ZFhKalpWeHVJQ0FnS2lBZ1FIQmhjbUZ0SUh0emRISnBibWQ4Wm5WdVkzUnBiMjU5SUdSaGRHRWdkRzhnYzJWdVpDQnBiaUJ5WlhGMVpYTjBJR0p2WkhsY2JpQWdJQ29nSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU4UVhKeVlYa3VQR1oxYm1OMGFXOXVQbjBnYzNWalkyVnpjeUJtZFc1amRHbHZibk5jYmlBZ0lDb2dJRUJ3WVhKaGJTQjdablZ1WTNScGIyNThRWEp5WVhrdVBHWjFibU4wYVc5dVBuMGdabUZwYkhWeVpTQm1kVzVqZEdsdmJuTmNiaUFnSUNvZ0lFQndZWEpoYlNCN2IySnFaV04wZkdaMWJtTjBhVzl1ZlNCb1pXRmtaWEp6SUhSdklITmxibVFnZEc4Z2NtVnhkV1Z6ZENCb1pXRmtaWEp6WEc0Z0lDQXFJQ0JBY0dGeVlXMGdlM04wY21sdVozeG1kVzVqZEdsdmJuMGdiM1psY25KcFpHVk5hVzFsVkhsd1pTQjBieUJsYm1admNtTmxJSEpsYzNCdmJuTmxJSEpsWVdScGJtY2dabTl5YldGMFhHNGdJQ0FxSUNCQWNtVjBkWEp1SUh0U1pYTnZkWEpqWlgwZ2MyVnNabHh1SUNBZ0tpOWNibHh1SUNCaFpHUk5aWFJvYjJRZ0tHNWhiV1VzSUM0dUxtRnlaM01wSUh0Y2JpQWdJQ0JqYjI1emRDQnpaV3htSUQwZ2RHaHBjMXh1SUNBZ0lHbG1JQ2gwYUdselcyNWhiV1ZkS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUZSb2FYTWdjbVZ6YjNWeVkyVWdZV3h5WldGa2VTQm9ZWE1nWVNBa2UyNWhiV1Y5SUcxbGRHaHZaR0FwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1dFpYUm9iMlJ6UW5WcGJHUmxjbHR1WVcxbFhTQTlJR0ZxWVhoUVlYSmhiV1YwWlhKekxtRndjR3g1S0c1MWJHd3NJR0Z5WjNNcFhHNGdJQ0FnZEdocGMxdHVZVzFsWFNBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR0oxYVd4a1pYSWdQU0JoYW1GNFVHRnlZVzFsZEdWeWN5NWhjSEJzZVNodWRXeHNMQ0JoY21kMWJXVnVkSE1wWEc0Z0lDQWdJQ0J5WlhSMWNtNGdZV3BoZUNodFpYSm5aU2h6Wld4bUxtTnZiVzF2YmtKMWFXeGtaWElzSUhObGJHWXViV1YwYUc5a2MwSjFhV3hrWlhKYmJtRnRaVjBzSUdKMWFXeGtaWElwS1Z4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXh1SUNCOVhHNWNibHh1SUNBdktpcGNiaUFnSUNvZ0lFQm1kVzVqZEdsdmJpQThjbVZ4ZFdWemRENGdjMlZ1WkNCaElISmxjWFZsYzNSY2JpQWdJQ29nSUVCd1lYSmhiU0I3YzNSeWFXNW5mR1oxYm1OMGFXOXVmRzlpYW1WamRIMGdiV1YwYUc5a0lHOXlJR0oxYVd4a1pYSmNiaUFnSUNvZ0lFQndZWEpoYlNCN2MzUnlhVzVuZkdaMWJtTjBhVzl1ZlNCMWNta2dkRzhnY21WemIzVnlZMlZjYmlBZ0lDb2dJRUJ3WVhKaGJTQjdjM1J5YVc1bmZHWjFibU4wYVc5dWZTQmtZWFJoSUhSdklITmxibVFnYVc0Z2NtVnhkV1Z6ZENCaWIyUjVYRzRnSUNBcUlDQkFjR0Z5WVcwZ2UyWjFibU4wYVc5dWZFRnljbUY1TGp4bWRXNWpkR2x2Ymo1OUlITjFZMk5sYzNNZ1puVnVZM1JwYjI1elhHNGdJQ0FxSUNCQWNHRnlZVzBnZTJaMWJtTjBhVzl1ZkVGeWNtRjVManhtZFc1amRHbHZiajU5SUdaaGFXeDFjbVVnWm5WdVkzUnBiMjV6WEc0Z0lDQXFJQ0JBY0dGeVlXMGdlMjlpYW1WamRIeG1kVzVqZEdsdmJuMGdhR1ZoWkdWeWN5QjBieUJ6Wlc1a0lIUnZJSEpsY1hWbGMzUWdhR1ZoWkdWeWMxeHVJQ0FnS2lBZ1FIQmhjbUZ0SUh0emRISnBibWQ4Wm5WdVkzUnBiMjU5SUc5MlpYSnlhV1JsVFdsdFpWUjVjR1VnZEc4Z1pXNW1iM0pqWlNCeVpYTndiMjV6WlNCeVpXRmthVzVuSUdadmNtMWhkRnh1SUNBZ0tpQWdRSEpsZEhWeWJpQjdVSEp2YldselpTNDhXRTFNU0hSMGNGSmxjWFZsYzNRK0xqeFlUVXhJZEhSd1VtVnhkV1Z6ZEQ1OVhHNGdJQ0FxTDF4dVhHNGdJSE4wWVhScFl5QnlaWEYxWlhOMElDZ3VMaTVoY21kektTQjdYRzRnSUNBZ1kyOXVjM1FnWW5WcGJHUmxjaUE5SUdGcVlYaFFZWEpoYldWMFpYSnpMbUZ3Y0d4NUtHNTFiR3dzSUdGeVozTXBYRzRnSUNBZ2NtVjBkWEp1SUdGcVlYZ29ZblZwYkdSbGNpbGNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdleUJTWlhOdmRYSmpaU0JoY3lCa1pXWmhkV3gwTENCU1pYTnZkWEpqWlN3Z2JXVnlaMlVnZlZ4dUlpd2lZMjl1YzNRZ1JrOVNUVUZVVXlBOUlIdGNiaUFnYm5WdFltVnlPaUFvYzNSeUtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2JpQTlJSEJoY25ObFJteHZZWFFvYzNSeUtWeHVJQ0FnSUdsbUlDaHBjMDVoVGlodUtTbGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrSmhaQ0IwZVhCbE9pQmxlSEJsWTNRZ1lYSm5kVzFsYm5RZ2RHOGdZbVVnWVNCdWRXMWlaWEl1WENJcFhHNGdJQ0FnY21WMGRYSnVJRzVjYmlBZ2ZTeGNiaUFnYVc1MFpXZGxjam9nS0hOMGNpa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHNGdQU0J3WVhKelpVbHVkQ2h6ZEhJcFhHNGdJQ0FnYVdZZ0tHbHpUbUZPS0c0cEtWeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVFtRmtJSFI1Y0dVNklHVjRjR1ZqZENCaGNtZDFiV1Z1ZENCMGJ5QmlaU0JoYmlCcGJuUmxaMlZ5TGx3aUtWeHVJQ0FnSUhKbGRIVnliaUJ1WEc0Z0lIMHNYRzRnSUdac2IyRjBPaUFvYzNSeUtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2JpQTlJSEJoY25ObFJteHZZWFFvYzNSeUtWeHVJQ0FnSUdsbUlDaHBjMDVoVGlodUtTbGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrSmhaQ0IwZVhCbE9pQmxlSEJsWTNRZ1lYSm5kVzFsYm5RZ2RHOGdZbVVnWVNCbWJHOWhkQzVjSWlsY2JpQWdJQ0J5WlhSMWNtNGdibHh1SUNCOUxGeHVJQ0IwWlhoME9pQW9jM1J5S1NBOVBpQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR052Ym5OMElITWdQU0JLVTA5T0xuQmhjbk5sS0hOMGNpbGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjeUE5UFQwZ1hDSnpkSEpwYm1kY0lpbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmNiaUFnSUNCOVhHNGdJQ0FnWTJGMFkyZ2dLR1VwSUh0OVhHNGdJQ0FnY21WMGRYSnVJSE4wY2x4dUlDQjlMRnh1SUNCdlltcGxZM1E2SUNoemRISXBJRDArSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYnlBOUlFcFRUMDR1Y0dGeWMyVW9jM1J5S1Z4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdklEMDlQU0JjSW05aWFtVmpkRndpS1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYjF4dUlDQWdJSDFjYmlBZ0lDQmpZWFJqYUNBb1pTa2dlMzFjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkNZV1FnZEhsd1pUb2daWGh3WldOMElHRnlaM1Z0Wlc1MElIUnZJR0psSUdGdUlHOWlhbVZqZEM1Y0lpbGNiaUFnZlN4Y2JpQWdZbTl2YkdWaGJqb2dLSE4wY2lrZ1BUNGdlMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQmlJRDBnU2xOUFRpNXdZWEp6WlNoemRISXBYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR0lnUFQwOUlGd2lZbTl2YkdWaGJsd2lLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZbHh1SUNBZ0lIMWNiaUFnSUNCallYUmphQ0FvWlNrZ2UzMWNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKQ1lXUWdkSGx3WlRvZ1pYaHdaV04wSUdGeVozVnRaVzUwSUhSdklHSmxJR0VnWW05dmJHVmhiaTVjSWlsY2JpQWdmU3hjYmlBZ1lXNTVPaUFvYzNSeUtTQTlQaUI3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJLVTA5T0xuQmhjbk5sS0hOMGNpbGNiaUFnSUNCOVhHNGdJQ0FnWTJGMFkyZ2dLR1VwSUh0OVhHNGdJQ0FnY21WMGRYSnVJSE4wY2x4dUlDQjlMRnh1SUNCMWRXbGtPaUFvYzNSeUtTQTlQaUI3WEc0Z0lDQWdhV1lnS0hOMGNpNXRZWFJqYUNndlcxeGNaR0V0WmwxN09IMHRXMXhjWkdFdFpsMTdOSDB0TkZ0Y1hHUmhMV1pkZXpOOUxWczRPV0ZpWFZ0Y1hHUmhMV1pkZXpOOUxWdGNYR1JoTFdaZGV6RXlmUzhwS1Z4dUlDQWdJQ0FnY21WMGRYSnVJSE4wY2x4dUlDQWdJR1ZzYzJWY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWtKaFpDQjBlWEJsT2lCbGVIQmxZM1FnWVhKbmRXMWxiblFnZEc4Z1ltVWdZVzRnZFhWcFpDNWNJaWxjYmlBZ2ZWeHVmVnh1WEc1c1pYUWdZM1Z5Y21WdWRFRnlaM05jYmx4dVhHNHZLaXBjYmlBcUlFQmpiR0Z6Y3lBOFVtOTFkR1UrSUdsbUlHRWdjbTkxZEdVZ2JXRjBZMmhsY3lCamRYSnlaVzUwSUhCaGRHZ3NJSEpsZEhWeWJpQmhjbWR6SUhkcGRHZ2daMlYwUVhKbmN5Z3BMbHh1SUNvZ0lDQWdTV1lnWVhKbmN5QmhjbVVnY21WMGRYSnVaV1FzSUhSb1pXNGdaWGhsWTNWMFpTQm5ieWhoY21kektTNWNiaUFxTDF4dVhHNWpiR0Z6Y3lCU2IzVjBaU0I3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJ0WlhSb2IyUWdQR052Ym5OMGNuVmpkRzl5UGlCelpYUWdjR0YwYUNCaGJtUWdhWFJ6SUdOdmJuUnliMnhzWlhJZ2FXWWdjbTkxZEdVZ2JXRjBZMmhjYmlBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlIQmhkR2dnWm05eWJXRjBJRndpTDJ0bGVUcDBlWEJsTDJ0bGVUb3ZPblI1Y0dVdktsd2lYRzRnSUNBcUlFQndZWEpoYlNCN2ZWeHVJQ0FnS2k5Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2lBb2NHRjBhQ3dnWTI5dWRISnZiR3hsY2lrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NHRjBhQ0FoUFQwZ1hDSnpkSEpwYm1kY0lpbGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrWnBjbk4wSUhCaGNtRnRaWFJsY2lCemFHOTFiR1FnWW1VZ1lTQnpkSEpwYm1jdVhDSXBYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmpiMjUwY205c2JHVnlJQ0U5UFNCY0ltWjFibU4wYVc5dVhDSXBYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSlRaV052Ym1RZ2NHRnlZVzFsZEdWeUlITm9iM1ZzWkNCaVpTQmhJR1oxYm1OMGFXOXVMbHdpS1Z4dUlDQWdJSFJvYVhNdWNHRjBhQ0E5SUhCaGRHaGNiaUFnSUNCMGFHbHpMbU52Ym5SeWIyeHNaWElnUFNCamIyNTBjbTlzYkdWeVhHNGdJSDFjYmx4dVhHNGdJQzhxS2x4dUlDQWdLaUJBYldWMGFHOWtJRHhuYno0Z2NtVmthWEpsWTNRZ2RHOGdkR2hwY3lCamIyNTBjbTlzYkdWeUlIQmhjM05wYm1jZ1lua2dWVkpNWEc0Z0lDQXFJRUJ3WVhKaGJTQjdLbjBnWVhKbmN5QnVaWGNnWVhKbmRXMWxiblJ6SUdadmNpQjBhR2x6SUdOdmJuUnliMnhzWlhJc0lHMWxjbWRsWkNCM2FYUm9JR04xY25KbGJuUWdZWEpuZFcxbGJuUnpYRzRnSUNBcUlFQnlaWFIxY200Z2UxSnZkWFJsZlNCelpXeG1YRzRnSUNBcUwxeHVYRzRnSUdkdklDaGhjbWR6TENCbWIzSmpaU2tnZTF4dUlDQWdJR052Ym5OMElIQmhjbUZ0Y3lBOUlDaDBlWEJsYjJZZ1lYSm5jeUE5UFQwZ1hDSnZZbXBsWTNSY0lpa2dQeUJoY21keklEb2dlMzFjYmlBZ0lDQmpiMjV6ZENCd1lYUm9JRDBnZEdocGN5NWpjbVZoZEdWUVlYUm9LRTlpYW1WamRDNWhjM05wWjI0b2UzMHNJR04xY25KbGJuUkJjbWR6TENCd1lYSmhiWE1wS1Z4dUlDQWdJR2xtSUNobWIzSmpaU0FtSmlCd1lYUm9JRDA5UFNCU2IzVjBaUzVuWlhSQ2NtOTNjMlZ5VW1WeGRXVnpkQ2dwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkoxYmloaGNtZHpLVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCU2IzVjBaUzV6WlhSQ2NtOTNjMlZ5VW1WeGRXVnpkQ2h3WVhSb0tWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwYzF4dUlDQjlYRzVjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRRzFsZEdodlpDQThjblZ1UGlCeWRXNGdkR2hwY3lCamIyNTBjbTlzYkdWeUlHRnVlWGRoZVNCM2FYUm9JSFJvWlhObElHRnlaM1Z0Wlc1MGN5NWNiaUFnSUNvZ1FIQmhjbUZ0SUhzcWZTQmhjbWR6SUdsbUlHWmhiSE41TENCMGNua2dkRzhnY21WMGRYSnVJSEp2ZFhSbExtZGxkRUZ5WjNNb0tTNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN0tuMGdjbVYwZFhKdVpXUWdZbmtnWTI5dWRISnZiR3hsY2k1Y2JpQWdJQ292WEc1Y2JpQWdjblZ1SUNoaGNtZHpLU0I3WEc0Z0lDQWdZM1Z5Y21WdWRFRnlaM01nUFNCaGNtZHpJSHg4SUhSb2FYTXVaMlYwUVhKbmN5Z3BYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl1ZEhKdmJHeGxjaWhqZFhKeVpXNTBRWEpuY3lsY2JpQWdmVnh1WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJ0WlhSb2IyUWdQR2RsZEVGeVozTStJSEpsZEhWeWJpQmhiaUJ2WW1wbFkzUWdiMllnWTI5eWNtVnpjRzl1WkdsdVp5QndZWEpoYldWMFpYSnpJR2x1SUdKeWIzZHpaWEpjYmlBZ0lDb2dJQ0FnY0dGMGFDQnZjaUJ1ZFd4c0lHOWlhbVZqZENCcFppQnBkQ0JrYjJWeklHNXZkQ0J0WVhSamFDNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZkc1MWJHeDlJRzUxYkd3Z2FXWWdhWFFnWkc5bGN5QnViM1FnYldGMFkyZ3VYRzRnSUNBcUwxeHVYRzRnSUdkbGRFRnlaM01nS0NrZ2UxeHVJQ0FnSUdOdmJuTjBJR04xY25KbGJuUWdQU0JTYjNWMFpTNW5aWFJTWlhGMVpYTjBUMkpxWldOMEtDa3NYRzRnSUNBZ0lDQnpaV3htSUQwZ2RHaHBjeTVuWlhSU1pYRjFaWE4wVDJKcVpXTjBLQ2xjYmx4dUlDQWdJR2xtSUNoelpXeG1XM05sYkdZdWJHVnVaM1JvSUMwZ01WMGdQVDA5SUZ3aUtsd2lLU0I3WEc0Z0lDQWdJQ0JwWmlBb1kzVnljbVZ1ZEM1c1pXNW5kR2dnUENCelpXeG1MbXhsYm1kMGFDQXRJREVwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHeGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHTjFjbkpsYm5RdWJHVnVaM1JvSUNFOVBTQnpaV3htTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzUxYkd4Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjMlZzWmk1eVpXUjFZMlVvS0dGeVozTXNJR05vZFc1ckxDQnBibVJsZUNrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ2RHMXdJRDBnWTNWeWNtVnVkRnRwYm1SbGVGMWNiaUFnSUNBZ0lHbG1JQ2hoY21keklEMDlQU0J1ZFd4c0tTQnlaWFIxY200Z2JuVnNiRnh1SUNBZ0lDQWdaV3h6WlNCcFppQW9ZMmgxYm1zZ1BUMDlJRndpS2x3aUtTQnlaWFIxY200Z1lYSm5jMXh1SUNBZ0lDQWdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHTm9kVzVySUQwOVBTQmNJbk4wY21sdVoxd2lLU0J5WlhSMWNtNGdLR05vZFc1cklEMDlQU0IwYlhBcElEOGdZWEpuY3lBNklHNTFiR3hjYmlBZ0lDQWdJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQmphSFZ1YXlBOVBUMGdYQ0p2WW1wbFkzUmNJaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUd0bGVUb2daWGh3WldOMFpXUkxaWGtzSUhaaGJIVmxPaUJsZUhCbFkzUmxaRlpoYkhWbExDQnlaV2RsZUhBc0lIUjVjR1VnZlNBOUlHTm9kVzVyWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHNnYTJWNUxDQjJZV3gxWlNCOUlEMGdLSFI1Y0dWdlppQjBiWEFnUFQwOUlGd2liMkpxWldOMFhDSXBJRDhnZEcxd0lEb2dleUIyWVd4MVpUb2dkRzF3SUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoclpYa2dQVDA5SUdWNGNHVmpkR1ZrUzJWNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WjNOYlpYaHdaV04wWldSTFpYbGRJRDBnUms5U1RVRlVVMXQwZVhCbFhTaDJZV3gxWlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVhKbmMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHlaV2RsZUhBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsWjJWNGNDNTBaWE4wS0haaGJIVmxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVozTmJaWGh3WldOMFpXUkxaWGxkSUQwZ2RtRnNkV1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWEpuYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1lYSm5jMXRsZUhCbFkzUmxaRXRsZVYwZ1BTQjJZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWEpuYzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGxlSEJsWTNSbFpGWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WjNOYlpYaHdaV04wWldSV1lXeDFaVjBnUFNCR1QxSk5RVlJUVzNSNWNHVmRLSFpoYkhWbEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVhKbmMxeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jbVZuWlhod0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZuWlhod0xuUmxjM1FvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WjNOYlpYaHdaV04wWldSV1lXeDFaVjBnUFNCMllXeDFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lYSm5jMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd4Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoY21kelcyVjRjR1ZqZEdWa1ZtRnNkV1ZkSUQwZ2RtRnNkV1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGNtZHpYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JGeHVJQ0FnSUgwc0lIdDlLVnh1SUNCOVhHNWNibHh1SUNBdktpcGNiaUFnSUNvZ1FHMWxkR2h2WkNBOGFYTk5ZWFJqYUQ0Z2NtVjBkWEp1SUdsbUlHTjFjbkpsYm5RZ2NtOTFkR1VnYldGMFkyaGxjeUJpY205M2MyVnlJSEJoZEdoY2JpQWdJQ29nUUhKbGRIVnliaUI3UW05dmJHVmhibjFjYmlBZ0lDb3ZYRzVjYmlBZ2FYTk5ZWFJqYUNBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwUVhKbmN5Z3BJQ0U5UFNCdWRXeHNYRzRnSUgxY2JseHVYRzRnSUM4cUtseHVJQ0FnS2lCQWJXVjBhRzlrSUR4amNtVmhkR1ZRWVhSb1BpQmpjbVZoZEdVZ1lTQndZWFJvSUhOMGNtbHVaeUIzYVhSb0lHRnlaM1Z0Wlc1MGN5d2dhVzRnYjNKa1pYSWdkRzljYmlBZ0lDb2dJQ0FnWTNKbFlYUmxJR0VnYkdsdWF5QjBieUJqWVd4c0lIUm9hWE1nY205MWRHVXVYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCaGNtZHpYRzRnSUNBcUlFQnlaWFIxY200Z2UxTjBjbWx1WjMwZ2NHRjBhRnh1SUNBZ0tpOWNibHh1SUNCamNtVmhkR1ZRWVhSb0lDaGhjbWR6S1NCN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCaGNtZHpJQ0U5UFNCY0ltOWlhbVZqZEZ3aUtTQjdYRzRnSUNBZ0lDQmhjbWR6SUQwZ2UzMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJTWlhGMVpYTjBUMkpxWldOMEtDa3ViV0Z3S0NocGRHVnRLU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHbDBaVzBnUFQwOUlGd2ljM1J5YVc1blhDSXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2hwZEdWdElEMDlQU0JjSWlwY0lpa2dQeUJjSWx3aUlEb2dhWFJsYlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2dhMlY1TENCMllXeDFaU0I5SUQwZ2FYUmxiVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHJaWGtnUFQwOUlGd2lYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWVhKbmMxdDJZV3gxWlYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQkRZVzRuZENCaWRXbHNaQ0IwYUdseklIQmhkR2dzSUc1dmRDQmxibTkxWjJnZ1lYSm5kVzFsYm5SeklDaGxlSEJsWTNRZ1hDSWtlM1poYkhWbGZWd2lJR1pwWld4a0tXQXBYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGNtZHpXM1poYkhWbFhWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSFpoYkhWbElEMDlQU0JjSWx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR3RsZVNBcklGd2lPbHdpSUNzZ0tHRnlaM05iYTJWNVhTQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z1hDSmNJaUE2SUdGeVozTmJhMlY1WFNsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHdGxlU0FySUZ3aU9sd2lJQ3NnU2xOUFRpNXpkSEpwYm1kcFpua29SazlTVFVGVVUxdDJZV3gxWlYwb1lYSm5jMXRyWlhsZEtTbGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnUTJGdUozUWdZblZwYkdRZ2RHaHBjeUJ3WVhSb0xDQmlZV1FnWm05eWJXRjBkR2x1WnlCaGNtZDFiV1Z1ZEhNZ0tHVjRjR1ZqZENCY0lpUjdhMlY1ZlZ3aUlHWnBaV3hrS1dBcFhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2t1YW05cGJpaGNJaTljSWlsY2JpQWdmVnh1WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJ0WlhSb2IyUWdQR2RsZEZKbGNYVmxjM1JQWW1wbFkzUStJSFJ5WVc1emJHRjBaWE1nWVNCd1lYUm9JSFJ2SUdGdUlHOWlhbVZqZEZ4dUlDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdkWEpzSUdadmNtMWhkQ0JjSWk5clpYazZkSGx3WlM5clpYazZMenAwZVhCbEx5cGNJbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdEJjbkpoZVM0OFQySnFaV04wTENvK2ZWeHVJQ0FnS2k5Y2JseHVJQ0JuWlhSU1pYRjFaWE4wVDJKcVpXTjBJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d1lYUm9Mbk53YkdsMEtGd2lMMXdpS1M1dFlYQW9LR2wwWlcwcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElITndiR2wwSUQwZ2FYUmxiUzV6Y0d4cGRDaGNJanBjSWlsY2JseHVJQ0FnSUNBZ2FXWWdLSE53YkdsMExteGxibWQwYUNBK0lERXBJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHdGxlU0E5SUhOd2JHbDBMbk5vYVdaMEtDa3NYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0J6Y0d4cGRDNXFiMmx1S0Z3aU9sd2lLU3hjYmlBZ0lDQWdJQ0FnSUNCeVpXZGxlSEFnUFNCMllXeDFaUzV0WVhSamFDZ3ZLRnRlS0YwcktWeGNLQ2d1S3lsY1hDa3ZLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9jbVZuWlhod0tTQjdYRzRnSUNBZ0lDQWdJQ0FnV3l3Z2RtRnNkV1VzSUhKbFoyVjRjRjBnUFNCeVpXZGxlSEJjYmlBZ0lDQWdJQ0FnSUNCcFppQW9SazlTVFVGVVUxdHlaV2RsZUhCZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCeVpXZGxlSEJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYTJWNUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZuWlhod09pQnVaWGNnVW1WblJYaHdLSEpsWjJWNGNDbGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYTJWNUlEMDlQU0JjSWx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoR1QxSk5RVlJUVzNaaGJIVmxYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2EyVjVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCMllXeDFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbFoyVjRjRG9nYm1WM0lGSmxaMFY0Y0NoMllXeDFaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJwZEdWdFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNsY2JpQWdmVnh1WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJtZFc1amRHbHZiaUE4WjJWMFFuSnZkM05sY2xKbGNYVmxjM1ErSUhKbGRIVnlibk1nZEdobElHTjFjbkpsYm5RZ1luSnZkM05sY2lCd1lYUm9YRzRnSUNBcUlFQnlaWFIxY200Z2UxTjBjbWx1WjMxY2JpQWdJQ292WEc1Y2JpQWdjM1JoZEdsaklHZGxkRUp5YjNkelpYSlNaWEYxWlhOMElDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2QybHVaRzkzTG14dlkyRjBhVzl1TG1oaGMyZ3VjM1ZpYzNSeUtERXBYRzRnSUgxY2JseHVYRzRnSUM4cUtseHVJQ0FnS2lCQVpuVnVZM1JwYjI0Z1BITmxkRUp5YjNkelpYSlNaWEYxWlhOMFBpQnpaWFFnZEdobElHTjFjbkpsYm5RZ1luSnZkM05sY2lCd1lYUm9YRzRnSUNBcUwxeHVYRzRnSUhOMFlYUnBZeUJ6WlhSQ2NtOTNjMlZ5VW1WeGRXVnpkQ0FvYzNSeUtTQjdYRzRnSUNBZ2QybHVaRzkzTG14dlkyRjBhVzl1TG1oaGMyZ2dQU0J6ZEhKY2JpQWdmVnh1WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJtZFc1amRHbHZiaUE4WjJWMFVtVnhkV1Z6ZEU5aWFtVmpkRDRnZEhKaGJuTnNZWFJsY3lCaElIQmhkR2dnZEc4Z1lXNGdiMkpxWldOMFhHNGdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0IxY213Z1ptOXliV0YwSUZ3aUwydGxlVHAwZVhCbEwydGxlVG92T25SNWNHVXZLbHdpWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMEZ5Y21GNUxqeFBZbXBsWTNRc0tqNTlYRzRnSUNBcUwxeHVYRzRnSUhOMFlYUnBZeUJuWlhSU1pYRjFaWE4wVDJKcVpXTjBJQ2gxY213cElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlIVnliQ0FoUFQwZ1hDSnpkSEpwYm1kY0lpbGNiaUFnSUNBZ0lIVnliQ0E5SUZKdmRYUmxMbWRsZEVKeWIzZHpaWEpTWlhGMVpYTjBLQ2xjYmx4dUlDQWdJR2xtSUNnaGRYSnNLU0J5WlhSMWNtNGdXMTFjYmx4dUlDQWdJSEpsZEhWeWJpQjFjbXd1YzNCc2FYUW9YQ0l2WENJcExtMWhjQ2dvYVhSbGJTa2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdjM0JzYVhRZ1BTQnBkR1Z0TG5Od2JHbDBLRndpT2x3aUtWeHVJQ0FnSUNBZ2FXWWdLSE53YkdsMExteGxibWQwYUNBK0lERXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhMlY1SUQwZ2MzQnNhWFF1YzJocFpuUW9LU3hjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaU0E5SUhOd2JHbDBMbXB2YVc0b1hDSTZYQ0lwWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ2EyVjVMRnh1SUNBZ0lDQWdJQ0FnSUhaaGJIVmxYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnBkR1Z0WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2xjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnZXlCU2IzVjBaU0JoY3lCa1pXWmhkV3gwTENCU2IzVjBaU3dnUms5U1RVRlVVeUI5WEc0aUxDSnBiWEJ2Y25RZ1VtOTFkR1VnWm5KdmJTQmNJaTR2Y205MWRHVmNJbHh1WEc1amIyNXpkQ0JTVDFWVVJWSlRJRDBnVzExY2JteGxkQ0JrWldaaGRXeDBRMjl1ZEhKdmJHeGxjaUE5SUc1MWJHeGNibXhsZENCc1lYVnVZMmhsWkNBOUlHWmhiSE5sWEc1Y2JuZHBibVJ2ZHk1eUlEMGdVazlWVkVWU1UxeHVYRzR2S2lwY2JpQXFJRUJqYkdGemN5QThVbTkxZEdWeVBpQnpkRzlqYXlCeWIzVjBaWE1zSUdGa1pDQndjbVZtYVhnZ2FXNGdkR2hsYVhJZ2NHRjBhSE1zSUhSbGMzUnpJSFJvWlcwc0lHRnVaRnh1SUNvZ0lDQWdaWGhsWTNWMFpYTWdkR2hsYVhJZ1kyOXVkSEp2Ykd4bGNuTWdhV1lnYjI1bElHMWhkR05vWlhNdVhHNGdLaTljYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVbTkxZEdWeUlIdGNibHh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFiV1YwYUc5a0lEeGpiMjV6ZEhKMVkzUnZjajRnYzJWMElIQnlaV1pwZUNCdlppQmxZV05vSUhWeWJITmNiaUFnSUNvZ1FISmxkSFZ5YmlCN1VtOTFkR1Z5ZlNCelpXeG1YRzRnSUNBcUwxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUlDaGlZWE5sVlhKc0xDQm1hWEp6ZEVOaGJHd3BJSHRjYmlBZ0lDQjBhR2x6TG1KaGMyVlZjbXdnUFNCaVlYTmxWWEpzSUh4OElGd2lYQ0pjYmlBZ0lDQjBhR2x6TG1acGNuTjBRMkZzYkNBOUlHWnBjbk4wUTJGc2JDQjhmQ0J1ZFd4c1hHNGdJQ0FnZEdocGN5NXliM1YwWlhNZ1BTQmJYVnh1SUNBZ0lGSlBWVlJGVWxNdWNIVnphQ2gwYUdsektWeHVJQ0I5WEc1Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUUcxbGRHaHZaQ0E4WVdSa1BpQmhaR1FnWVNCeWIzVjBaU0JwYmlCMGFHbHpJSEp2ZFhSbGNseHVJQ0FnS2lCQWNHRnlZVzBnZTFKdmRYUmxmSE4wY21sdVozMGdjbTkxZEdVZ2IzSWdjR0YwYUZ4dUlDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0JqYjI1MGNtOXNiR1Z5SUhSdklHVjRaV04xZEdVZ2QyaGxiaUJ3WVhSb0lHMWhkR05vWlhOY2JpQWdJQ29nUUhKbGRIVnliaUI3VW05MWRHVjlJR055WldGMFpXUmNiaUFnSUNvdlhHNWNiaUFnWVdSa0lDaHliM1YwWlN3Z1kyOXVkSEp2Ykd4bGNpa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdjbTkxZEdVZ1BUMDlJRndpYzNSeWFXNW5YQ0lnSmlZZ2RIbHdaVzltSUdOdmJuUnliMnhzWlhJZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUNBZ2NtOTFkR1VnUFNCdVpYY2dVbTkxZEdVb2RHaHBjeTVpWVhObFZYSnNJQ3NnY205MWRHVXNJR052Ym5SeWIyeHNaWElwWEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2h5YjNWMFpTQnBibk4wWVc1alpXOW1JRkp2ZFhSbEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG5KdmRYUmxjeTV3ZFhOb0tISnZkWFJsS1Z4dUlDQWdJQ0FnYVdZZ0tHeGhkVzVqYUdWa0tTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHRnlaM01nUFNCeWIzVjBaUzVuWlhSQmNtZHpLQ2xjYmlBZ0lDQWdJQ0FnYVdZZ0tHRnlaM01wSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OaGJHeEdhWEp6ZENncFhHNGdJQ0FnSUNBZ0lDQWdjbTkxZEdVdVoyOG9ZWEpuY3lsY2JpQWdJQ0FnSUNBZ0lDQlNiM1YwWlhJdVkzVnljbVZ1ZENBOUlISnZkWFJsWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlISnZkWFJsWEc0Z0lIMWNibHh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFiV1YwYUc5a0lEeDBaWE4wUGlCbFlXTm9JSEp2ZFhSbGN5QnZaaUIwYUdseklISnZkWFJsY2lCaGJtUWdjbVYwZFhKdUlHRWdjR0YwYUNCcFppQnBkQ0J0WVhSamFHVnpYRzRnSUNBcUlFQnlaWFIxY200Z2UxSnZkWFJsZkc1MWJHeDlJRzUxYkd3Z2FXWWdibTkwSUdadmRXNWtYRzRnSUNBcUwxeHVYRzRnSUhSbGMzUWdLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5KdmRYUmxjeTVtYVc1a0tDaHliM1YwWlNrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ1lYSm5jeUE5SUhKdmRYUmxMbWRsZEVGeVozTW9LVnh1SUNBZ0lDQWdhV1lnS0dGeVozTWdJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEp2ZFhSbFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNsY2JpQWdmVnh1WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJ0WlhSb2IyUWdQR05oYkd4R2FYSnpkRDRnYVhNZ1kyRnNiR1ZrSUc5dVpTQjBhVzFsSUhkb1pXNGdZU0J5YjNWMFpTQnZaaUIwYUdseklISnZkWFJsY2lCcGN5Qm1iM1Z1WkM1Y2JpQWdJQ292WEc1Y2JpQWdZMkZzYkVacGNuTjBJQ2dwSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhSb2FYTXVabWx5YzNSRFlXeHNJRDA5UFNCY0ltWjFibU4wYVc5dVhDSXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVptbHljM1JEWVd4c0tDbGNiaUFnSUNBZ0lIUm9hWE11Wm1seWMzUkRZV3hzSUQwZ2JuVnNiRnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCbWRXNWpkR2x2YmlBOGMyVjBSR1ZtWVhWc2RENGdjMlYwSUhSb1pTQmpiMjUwY205c2JHVnlJSFJ2SUdOaGJHd2dkMmhsYmlCdWJ5QmhibmtnY205MWRHVWdabTkxYm1RdVhHNGdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUdOdmJuUnliMnhzWlhKY2JpQWdJQ292WEc1Y2JpQWdjM1JoZEdsaklITmxkRVJsWm1GMWJIUWdLR052Ym5SeWIyeHNaWElwSUh0Y2JpQWdJQ0JrWldaaGRXeDBRMjl1ZEhKdmJHeGxjaUE5SUdOdmJuUnliMnhzWlhKY2JpQWdmVnh1WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJtZFc1amRHbHZiaUE4YkdsemRHVnVVRzl3YzNSaGRHVStJSE5sZENCbGRtVnVkQ0JwYmlCMGFHVWdkMmx1Wkc5M0lIUnZJSFJ5YVdkblpYSWdkR2hsSUhKdmRYUmxaRnh1SUNBZ0tpQWdJQ0JqYjI1MGNtOXNiR1Z5WEc0Z0lDQXFMMXh1WEc0Z0lITjBZWFJwWXlCc2FYTjBaVzVRYjNCemRHRjBaU0FvS1NCN1hHNGdJQ0FnZDJsdVpHOTNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0p3YjNCemRHRjBaVndpTENCd2IzQnpkR0YwWlNsY2JpQWdJQ0JwWmlBb0lXeGhkVzVqYUdWa0tTQjdYRzRnSUNBZ0lDQndiM0J6ZEdGMFpTZ3BYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUUdaMWJtTjBhVzl1SUR4blpYUkJiR3crSUhKbGRIVnlibk1nWVNCc2FYTjBJRzltSUdGc2JDQnliM1YwWlhNZ1lYWmhhV3hoWW14bFhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBGeWNtRjVmVnh1SUNBZ0tpOWNibHh1SUNCemRHRjBhV01nWjJWMFFXeHNJQ2dwSUh0Y2JpQWdJQ0JqYjI1emRDQnNhWE4wSUQwZ1VrOVZWRVZTVXk1dFlYQW9LSEp2ZFhSbGNpa2dQVDRnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSEp2ZFhSbGNpNXliM1YwWlhNdWJXRndLQ2h5YjNWMFpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY205MWRHVXVjR0YwYUZ4dUlDQWdJQ0FnZlNsY2JpQWdJQ0I5S1M1bWJHRjBLQ2xjYmlBZ0lDQnBaaUFvWkdWbVlYVnNkRU52Ym5SeWIyeHNaWElwSUh0Y2JpQWdJQ0FnSUd4cGMzUXVkVzV6YUdsbWRDaGNJaXBjSWlsY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHeHBjM1JjYmlBZ2ZWeHVmVnh1WEc1Y2JpOHFLbHh1SUNvZ1FHWjFibU4wYVc5dUlEeHdiM0J6ZEdGMFpUNGdhWE1nZEhKcFoyZGxjbVZrSUhkb1pXNGdjR0ZuWlNCcGN5QnNiMkZrWldRZ2IzSWdibUYyYVdkaGRHbHZiaUJqYUdGdVoyVnpMbHh1SUNvZ1FXeHpieUJ6WlhSeklGSnZkWFJsY2k1amRYSnlaVzUwSUdsbUlHRWdVbTkxZEdVZ2FYTWdabTkxYm1Rc0lHVnNjMlVnYzJWMGN5QmtaV1poZFd4MElHTnZiblJ5YjJ4c1pYSmNiaUFxSUdsbUlHbDBJR1Y0YVhOMGN5NWNiaUFxTDF4dVhHNW1kVzVqZEdsdmJpQndiM0J6ZEdGMFpTQW9LU0I3WEc0Z0lHeGhkVzVqYUdWa0lEMGdkSEoxWlZ4dUlDQnNaWFFnY205MWRHVXNJR1p2ZFc1a1hHNGdJRkpQVlZSRlVsTXVabTl5UldGamFDZ29jbTkxZEdWeUtTQTlQaUI3WEc0Z0lDQWdhV1lnS0NGeWIzVjBaU2tnZTF4dUlDQWdJQ0FnY205MWRHVWdQU0J5YjNWMFpYSXVkR1Z6ZENncFhHNGdJQ0FnSUNCbWIzVnVaQ0E5SUhKdmRYUmxjbHh1SUNBZ0lIMWNiaUFnZlNsY2JpQWdhV1lnS0hKdmRYUmxLU0I3WEc0Z0lDQWdabTkxYm1RdVkyRnNiRVpwY25OMEtDbGNiaUFnSUNCeWIzVjBaUzV5ZFc0b0tWeHVJQ0FnSUZKdmRYUmxjaTVqZFhKeVpXNTBJRDBnY205MWRHVmNiaUFnZlZ4dUlDQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1pHVm1ZWFZzZEVOdmJuUnliMnhzWlhJZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUdSbFptRjFiSFJEYjI1MGNtOXNiR1Z5S0NsY2JpQWdmVnh1ZlZ4dUlsMTkifQ==
